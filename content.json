{"meta":{"title":"Front-end Engineer","subtitle":null,"description":"Beginner Front-end Engineer Blog","author":"pocojang","url":"https://pocojang.github.io","root":"/"},"pages":[{"title":"","date":"2023-02-12T14:14:44.050Z","updated":"2023-02-12T14:14:44.050Z","comments":true,"path":"404.html","permalink":"https://pocojang.github.io/404.html","excerpt":"","text":"#bg { position: fixed; top: -50%; left: -50%; width: 200%; height: 200%; z-index: 100; } #bg img { position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto; min-width: 50%; min-height: 50%; }"}],"posts":[{"title":"글또를 다시 시작하며","slug":"2023-02-12-geultto-8th","date":"2023-02-11T15:00:00.000Z","updated":"2023-02-12T14:45:26.688Z","comments":true,"path":"2023/02/12/2023-02-12-geultto-8th/","link":"","permalink":"https://pocojang.github.io/2023/02/12/2023-02-12-geultto-8th/","excerpt":"새해와 함께 시작하는 글또 8기를 다짐하며","text":"새해와 함께 시작하는 글또 8기를 다짐하며 시작하며글또 5기에 참여하며 다짐 글을 작성했던게 엊그제 같은데.. 벌써 8기에 참가하게되었다. 그동안 5기, 6기, 7기에 모두 참여하며 내 인생 그리고 개발자 커리어도 많은 변곡점이 있었는데 글을 작성하는 꾸준함이나 스킬은 발전했던가? 전혀 아니라고 볼 수 있다. 왜인지 모르겠으나 글 작성에 게을러지며 형편없는 글을 생산했던 시기를 떠올려보면 형편없는 시간으로 세월을 낭비했던 것 같다. 반대로 꾸준히 좋은 글을 작성하려고 노력했던 시기만큼은 성장에도 큰 밑거름으로 작용했다는 것이 서서히 떠오르기 시작한다.당장의 노력은 어렵겠지만 작은 습관 그것조차 어렵다면 글 작성을 위한 루틴이라도 이번에는 꼭 만들어야겠다. 글또 8기와 함께할 2023년 다짐 최소 한달에 한권 읽고 글 작성하기 월간 회고 글 작성하기 블로그 이사하기 글또 보증금 100% 돌려받기 마치며글또의 시작과 함께 2023년을 시작할 수 있다는 것이 참 좋다.글또를 계기로 2023년부터는 일어나는 모든 일을 글로 잘 남기고 싶다. Reference https://alcrego.tumblr.com/post/94580799981/thinking-of-thinking-of-thinking-of-thinking","categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"}],"tags":[{"name":"글또","slug":"글또","permalink":"https://pocojang.github.io/tags/%EA%B8%80%EB%98%90/"},{"name":"글쓰기","slug":"글쓰기","permalink":"https://pocojang.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"}]},{"title":"2022년 7월 회고","slug":"2022-07-31-retrospect-2022-july","date":"2022-07-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.063Z","comments":true,"path":"2022/07/31/2022-07-31-retrospect-2022-july/","link":"","permalink":"https://pocojang.github.io/2022/07/31/2022-07-31-retrospect-2022-july/","excerpt":"2022년 7월을 회고하며","text":"2022년 7월을 회고하며 클린 코드 자바스크립트 3기 시작 2기를 진행했던게 엊그제 같은데 벌써 3기가 시작된다.페어로 하는 동료와 다양한 이야기를 나눴었지만 시간이 부족하여 다른 시도없이 그대로 오픈하게 되었다. 그나마 행복한 점은 2기때보다 더욱 더 뜨거운 관심 속에 코스를 오픈한다는 것이다.대기자가 굉장히 많이 늘었으며 사전 문의도 많아졌다. 이대로 스테디셀러와 같은 코스가 되었으면 좋겠다. 개발오랜만에 개발에 집중하게 되었다.그동안 가지고 있던 프론트 환경 문제를 많이 개선할 수 있었고 또 고민할 수 있었다. 백엔드 &amp; Vue2 환경과의 공존 그리고 React로 마이그레이션.. 굉장히 지지부진한 속도이지만 생각해볼 것도 많고 시도해볼 것도 많아서 앞으로가 기대된다. 유캔두 회고유캔두라는 플랫폼을 이용해 우테코 한정 프라이빗한 SNS를 운영했었던 적이 있었다.1기부터 4기까지 다양한 개발자들이 소통할 수 있었고 특히나 코로나가 강세였던 시기에는 서로간의 많은 내적 친밀감을 쌓을 수 있었다. 간만에 실물영접을 했던지라 다들 어색어색했지만 나름 의미있는 시간이었다.(다들 어색해서.. 혼자 아무 말 대잔치) FE 팀 회고그간 다양한 이유로 팀 내에 프론트엔드 개발자들끼리 소통이 굉장히 줄어들었다.항상 업무 시간에 업무를 주제로 이야기만 했었는데 휴일에 만나 다양한 감정선을 털어놓는 자리를 가졌다.집에 오면서 생각해보니 나 혼자 징징대고 온게 아닌가….싶기도 하다. ⭐️ 정리GOOD 회고를 가장한 모임 개발에 집중 클린 코드 자바스크립트 3기 시작 BAD 팀 회고에서 나온.. 동료의 코로나 확진 Action 개발에 많은 시간 쏟기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2022년 6월 회고","slug":"2022-06-30-retrospect-2022-june","date":"2022-06-29T15:00:00.000Z","updated":"2023-02-12T14:14:44.063Z","comments":true,"path":"2022/06/30/2022-06-30-retrospect-2022-june/","link":"","permalink":"https://pocojang.github.io/2022/06/30/2022-06-30-retrospect-2022-june/","excerpt":"2022년 6월을 회고하며","text":"2022년 6월을 회고하며 DEV 컨퍼런스역시나 흥미로운 이벤트가 가득했다.특히나 토스 SLASH 22 그리고 카카오페이 온라인 페이톡 가장 기억에 남았다. 토스는 역시나 이번에도 대단해서 더 이상 설명이 필요 없을 것 같다.카카오페이는 개더타운을 꽤나 잘 운영하는 점 그리고 팀 분위기가 굉장히 좋아보여 참관한 입장에서도 훈훈한 기분을 느낄 수 있었다. 워크샵팀이 엄청나게 크고 있다는게 느껴지면서 일을 잊을 수 있어 좋았다.일을 머리에서 지울 수 없는 저주 받은 성향을 가지고 있는데 그걸 업무에 대한 생각이 나지 않을 만큼 좋았다.좋은 이벤트를 준비해준 모든 팀원들에게 감사하며 이렇게 또 하나의 잊을 수 없는 추억을 만들었다. 리뷰어 회식2022년 함께 했던 4기 리뷰어와 이별하는 자리를 가졌다.이번 리뷰어 회식은 동료와 함께 페어로 주도하여 준비했는데 그동안 잦은 회고로 피로감을 느껴했던 리뷰어분들을 위해 파티라는 명목하에 뷔페에서 식사를 나눴다. 간단한 비어 타임과 소통을 통해 그동안 나누지 못했던 이야기를 나눌 수 있었다. ⭐️ 정리GOOD 워크샵과 회식을 통해 무언가 정리하는 시간을 가짐 다양한 컨퍼런스에 참여했던 점 BAD 코로나로 밀렸던 업무가 아직 밀려있다. Action 클린 코드 자바스크립트 3기가 시작되기전에 미비된 점 정리하기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2022년 5월 회고","slug":"2022-05-31-retrospect-2022-may","date":"2022-05-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.063Z","comments":true,"path":"2022/05/31/2022-05-31-retrospect-2022-may/","link":"","permalink":"https://pocojang.github.io/2022/05/31/2022-05-31-retrospect-2022-may/","excerpt":"2022년 5월을 회고하며","text":"2022년 5월을 회고하며 스튜디오 촬영결혼 준비 중 가장 많은 지분을 찾이하는 스튜디오 촬영이 드디어 끝났다.다이어트도 해야하고 새벽부터 메이크업까지 해야하는 등.. 정말 많은 일이 있었는데 굵직한 이벤트를 하나 끝내 다행이다. 인프런 인터뷰많은 멘토링을 계기로 인프런에서 인터뷰를 진행할 수 있었다. 덕분에 즐거운 대화를 나눌 수 있어 좋았다.추가로 인프런 측에서 멘티분들에게 따로 인터뷰를 진행해주셨고 두고두고 기억에 남을 것 같다. 길을 잃었다면 멘토링으로! #프론트엔드 멘토편 길을 잃었다면 멘토링으로! #프론트엔드 멘토편 리뷰어와 소통리뷰 기간이 끝으로 다가오니 리뷰어분들이 전반적으로 지친 기색을 보였다.하루하루 마감에 대해 안내하고 진행을 재촉해야 하다보니 죄송스럽기도 했다.감사하면서도 죄송스러운 이 마음을 어떻게 표현해야할까? 코로나드디어 코로나에 걸렸다.피할 수 있다면 좋았으련만… 정말 아쉽다. 그렇게 조심했는데 왜 하필..코로나 휴가로 업무가 지연되었고 다른 팀원들에게 피해를 줬다. 또한 코로나로 지급받은 약은 또 왜 이리 졸린지 코로나 격리 기간이 풀린 이후에도 제대로 된 업무를 하는데 큰 어려움을 겪었다. 레벨2메인 담당 레벨을 드디어 제대로 진행하기 시작했다.작년의 아쉬움을 극복하고 싶었고 작년의 내가 얼마나 노력했고 공을 들였는지 작년의 나에게 고마웠다.때문에 작년보다 어느정도 완성도는 올라왔으나 사람의 욕심은 끝도 없는지 여전히 아쉽고 미련이 남는다. 면담어김없이 다가온 면담 시즌 이제 교육생들은 진행될 팀 프로젝트에 큰 관심을 가지고 있었다.그동안 갈고 닦은 기술들을 팀 프로젝트에서 어떻게 녹여낼까 궁금하기도 하고 이렇게 흥미진진하게 공부할 수 있는 교육생들이 부럽기도 하다. ⭐️ 정리GOOD 리뷰어와의 소통으로 교통 정리 결혼 준비에서 가장 중요한 이벤트 끝 BAD 코로나로 인한 업무 미비 Action 코로나 회복하기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2022년 4월 회고","slug":"2022-04-30-retrospect-2022-april","date":"2022-04-29T15:00:00.000Z","updated":"2023-02-12T14:14:44.063Z","comments":true,"path":"2022/04/30/2022-04-30-retrospect-2022-april/","link":"","permalink":"https://pocojang.github.io/2022/04/30/2022-04-30-retrospect-2022-april/","excerpt":"2022년 4월을 회고하며","text":"2022년 4월을 회고하며 다시 결혼 준비다시 한번 결혼 준비에 돌입했다.개인적으로 할 것도 있는데 큰일이다. 레벨1 종료 &amp; KDT 마무리되풀이되는 커리큘럼인 레벨1이 종료되었다.KDT 행정 처리가 끝난 후 방학 후 담당하고 있는 레벨2 시기로 돌입했다. 사실 레벨1이나 KDT는 함께하는 동료가 고생했었던 부분이니 딱히 할 수 있는 얘기가 많지 않다.다만 내 차례가 왔다. 우아한스터디 준비회사에서 외부 개발자와 함께하는 스터디를 오픈해야 하는데 예정된 스터디가 없어 도와달라는 요청을 받았다. 결국 독서 스터디를 준비하게 되었는데 지원자를 받아보니 책 읽는 스터디일뿐인데도 너무나 많은 지원이 있었다.많은 지원자분들에서 일부의 스터디원을 선별하는데 죄책감이 상당했다.또한 스터디 지원서를 읽어보니 나에 대한 환상이나 기대가 가득했다.이를 타파하기 위해 스터디를 운영하며 환경만 조성하고 스터디에는 직접 참가하지 않는 방법을 설계했다. 레벨 인터뷰 진행우테코 커리큘럼에는 레벨 인터뷰라는 좋은 과정이 존재한다(일종의 면접과 같은 훈련)정말 열심히 공부한 흔적이 보여 뿌듯하기도 했고 실력에 비해 설명은 잘하지 못하는 경우도 있어 속상했다. 그래도 과거의 나를 돌아보고 생각하니 요즘 취준하는 개발자들이 얼마나 훌륭한지 다시 한번 상기할 수 있었다. 클린 코드 자바스크립트 2기 종료 8주라는 긴 시간이 생각보다 빠르게 끝났다.이번 코스는 훌륭한 동료와 페어로 진행했는데 좋은 시도였고 다시 한번 함께하고 싶다. 반면 이번 코스를 수료한 교육생분들께서는 만족하셨을까? 고민하게 되었다.적지 않은 귀중한 돈을 지불해주셨는데 그에 상응하는 교육을 하려면 얼마나 더 완벽하게 잘해야 할까?영원한 숙제로 남을 것 같다. ⭐️ 정리GOOD 클린 코드 자바스크립트 2기 무사 마무리 BAD 너무 많은 일이 벌어졌다. Action 개인적인 업무 컨텍스트 정리하기 수시로 업무 우선순위 점검하기 담당 교육 잘 마무리하기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2022년 3월 회고","slug":"2022-03-31-retrospect-2022-march","date":"2022-03-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.063Z","comments":true,"path":"2022/03/31/2022-03-31-retrospect-2022-march/","link":"","permalink":"https://pocojang.github.io/2022/03/31/2022-03-31-retrospect-2022-march/","excerpt":"2022년 3월을 회고하며","text":"2022년 3월을 회고하며 TypeScript 코스 진행 https://edu.nextstep.camp/c/WMWd30Oq 우아한테크코스에서 당장 TypeScript를 교육해야 하는 상황에 어떻게 하면 지식을 잘 전파할 수 있을까? 완벽주의라는 딜레마에 빠지게 되었다. 그리고 나온 결론은 작은 코스를 운영하며 빠르게 실패해보기였다. 빠르게 무료로 베타 코스를 모집하며 함께하실 분들을 섭외하였고 덕분에 린하게 코스를 진행해볼 수 있었다. 빠른 실패를 해보니 역시나 많은 점에서 아쉬움이 드러났고 유료 코스로 진행하는 것은 일단 접어두기로 했다. 하지만 어떻게 타입을 달지? any를 사용하지 않으려면? 어떻게 할까?고민했던 무지한 나의 지식이 조금은 발전했고 어떤 방향으로 TypeScript를 우아한테크코스에 전파할까? 그 방향을 잡을 수 있었던 좋은 시간이었다. 개발교육자로 일하다 보니 이런저런 변명과 함께 개발을 미뤄둘 때가 많았다.항상 피드백을 받음에도 불구하고 변하지 못하는 나 자신과 마주하며 교육에만 전념했었는데 이번만큼은 정말 강한 피드백을 받게 되었다.다시 한번 개발에 집중해야 하는데 오히려 동기부여를 잃었는지 쉽지 않다. 이력서 첨삭 릴레이인프런 멘토링도 확실히 시기가 있는 것 같다.특정 학원의 특정 기수가 수료하면 다수가 한꺼번에 신청해주시다 보니 지속적인 이력서 첨삭에 빠지게 되었다. 이력서를 첨삭하며 항상 느끼는 것은 결국 셀프 반성.. 그리고 일종의 죄책감을 느끼게 된다.취업을 위해 노력하는 분들을 보며 반복되는 이야기를 하고 아쉬움을 느끼지만 그러는 나는 과연 잘하고 있는 걸까? 회고하기 때문이다. 반성을 실천으로 극복하는 것은 일단 당장 해봐야겠다.그리고 앵무새처럼 반복해서 똑같은 말만 되풀이하는 이 멘토링… 어떻게 하면 효율적으로 개선할 수 있을까? 면담역시나 찾아온 면담 시즌 교육생들이 이전 기수와는 다르게 취업에 미쳐있지는 않아서 다행이다.그냥 고맙다. 클린코드 자바스크립트 코스 진행 드뎌 NEXTSTEP에서 유료 코스를 오픈했다.적지 않은 가격에 많은 분이 참여해주셨고 훌륭한 강사 메이커 준 그리고 훌륭한 리뷰어분들과 함께하게 되어 기대된다. 3기 친구들 만남우아한테크코스를 수료하고 취업했던 친구들이 정신없이 일하더니 이제 어느 정도 업무에 적응된 것 같다.저번 달에 이어서 이번 달도 하나 둘 취업 턱을 낸다는데 함께 하는 시간이 정말 뿌듯했다. 이제는 후배를 넘어 훌륭한 동료 개발자로 성장하고 있는 모습이 계속 보이고 있으니 앞으로 내 커리어 내내 큰 인사이트를 줄 수 있을 것 같다. ⭐️ 정리GOOD 새로운 활동들 시작 BAD 무언가 시작하는 것에 대한 두려움과 완벽주의 Action 완벽주의버리고 일단 실천하기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2022년 2월 회고","slug":"2022-02-28-retrospect-2022-february","date":"2022-02-27T15:00:00.000Z","updated":"2023-02-12T14:14:44.063Z","comments":true,"path":"2022/02/28/2022-02-28-retrospect-2022-february/","link":"","permalink":"https://pocojang.github.io/2022/02/28/2022-02-28-retrospect-2022-february/","excerpt":"2022년 2월을 회고하며","text":"2022년 2월을 회고하며 우아한테크코스 4기 시작새로운 교육생들을 가르칠 수 있다는 것은 영광이기도 하고 역시나 기대와 설렘이 가득해진다.코로나로 완전한 재택이 된 시대에 교육을 하고 있어 교육을 받는 교육생들에게는 너무나 미안하다. 그러다보니 이 문제를 어떻게 극복할까? 코로나 시대에 대비하는 언택트 교육 방법에 관심이 간다. 테크살롱 오픈 이벤트 - 우아한멘토링우아한테크코스와 우아한형제들을 위한 새로운 공간이 태어났다!바로 테크살롱! DR팀과 우리 팀 모두 얼마나 기다려왔던가.. 그 기쁨을 나누기에는 아직 코로나가 심해 작은 오프라인 이벤트를 진행했다. 도움이 필요한 멘티분들을 섭외해 훌륭한 멘토분들과 함께 이야기를 나눌 수 있었다. 언제나 느끼는 것이지만 내가 멘토 자격이 있는 것일까? 의문이 든다.많은 경험을 하고 다양한 경력을 쌓은 것은 틀림없다. 하지만 누군가에게 조언을 해줄 수 있을 정도로 의미있는 것인지는 잘 모르겠다. 결론적으로 오늘도 많은 사람들에게 조언을 했고 많은 이야기를 나눴다. 나도 그런 말을 할 수 있는 자격을 갖추고 또 언행일치한 사람이 되도록 노력해야겠다. 단 하루지만 좋은 에너지를 받고 기억에 남을 추억을 쌓았다. 유데미 학습법 라이브 세션 우리의 연예인 동준님과 다시 한번 유데미 라이브 세션으로 호흡을 맞췄다. 지식의 저주 라는 주제로 발표를 이어나갔는데 뭔가 했던 얘기를 또 하면서 울궈먹는 건 아닌가? 상당히 찝찝했다.그래도 워낙 동준님이 언변가라 진행 자체에는 문제도 없었고 꽤나 많은 참가자분들과 소통할 수 있어서 많은 에너지를 받았다. 언제나 잘 챙겨주는 유데미에 감사하고 다음 세션에는 또 다른 울림을 줄 수 있도록 새로운 컨텐츠를 준비해야겠다. 2022년에 리액트 교육을 설계하는 기분언제나 그렇듯 작년 기수 우아한테크코스에 큰 아쉬움이 있다.교육생들이 잘 성장하며 좋은 곳으로 많이 취직했지만 잘 가르치도 못했는데 스스로 잘 성장했고 그 과정속에서 꿈을 이뤘다는 생각에 매번 아쉬웠기 때문이다. 우리가 프론트엔드 교육은 처음이니까, 우리는 소수의 인원으로 해냈으니까라는 명분이 있었는데 이번에는 없다.어떻게 교육을 할까에 대한 리서치는 작년에 교육을 받은 3기 친구들과 이야기를 나눴고 그럼 한번 해볼까에 대한 시도는 리뷰어 양성 과정을 통해 시도해봤다. 일단 이번 한달은 적어도 이런 루틴으로 리액트 교육을 준비했다.그럼에도 불구하고 아직 확신은 없다. 3기 친구들 만남취업턱! 1월부터 취업에 성공한 뿌듯함을 취업턱으로 보답하겠다는 교육생들이 있었다. 뿌듯하게 얻어먹고 다녀서 당연히 좋았다.이제는 동료 개발자의 위치로 함께 이야기를 나눌 수 있으니 더욱 더 좋았다. ⭐️ 정리GOOD 테크살롱 오픈 3기 친구들 만남 BAD 개인 공부 부족 Action 작심삼일 새해다짐이 망가졌다","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2022년 1월 회고","slug":"2022-01-31-retrospect-2022-january","date":"2022-01-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.063Z","comments":true,"path":"2022/01/31/2022-01-31-retrospect-2022-january/","link":"","permalink":"https://pocojang.github.io/2022/01/31/2022-01-31-retrospect-2022-january/","excerpt":"2022년 1월을 회고하며","text":"2022년 1월을 회고하며 결혼 준비작년 11월부터 꾸준히 준비했는데 3개월을 꽉 채운 지금에서야 어느 정도 초반 준비는 마무리되었다. 인생에 단 한 번뿐이라 참 다행이다.재택근무와 워라밸을 위해 노력해주는 회사 그리고 팀원분들이 아니었다면 아직도 결혼 준비에 한참 빠져있었을 것 같다. 새로운 동료백엔드에 또 새로운 코치분이 오셨다. 새로운 동료가 합류한다는 건 언제나 좋다.팀원이 늘어난다는 장점도 있지만 나와 교육자의 길을 걷고자 하는 동반자가 생기는 기분이랄까! 그래서 더 좋다. NEXTSTEP 클린 코드 리액트 베타 시작리뷰어 양성을 목적으로 또 한 번 베타 과정을 진행했다.역시나 이번에도 향후 우아한테크코스와 NEXTSTEP에서 리뷰어로 함께 해주실 분들을 모집했고 발품을 뛰며 알아보거나 믿을 만한 지인분들로 모집했다. 그러다 보니 한분 한분 모두 소중한 분들인데 또 참여 의사를 밝혀주셔서 얼마나 다행인지 감사한 마음이 들었다.기필코 서로에게 도움이 되는 과정이 되도록 열심히 준비해야겠다. 2022년 새로운 시작2021년은 여러 가지로 아쉽지만, 또 많은 사랑을 받았던 한해로 기억될 것 같다.이제 벌써 2022년이다. 개인적으로 2022년은 인생에서 중요한 이벤트가 가득하기 때문에 잘해야 한다. 그리고 잘 준비해야 한다. ⭐️ 정리GOOD 결혼 준비가 잘되고 있다. 리액트 리뷰어 양성 과정 새롭게 출발 BAD 새해 버프로 받았던 강력한 동기부여가 작심삼일로 끝나버렸다. Action 더 이상 탈출구는 없다. 실천하고 또 실천하자. 게으름 탈출 운동하기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 12월 회고","slug":"2022-01-02-retrospect-2021-december","date":"2022-01-01T15:00:00.000Z","updated":"2023-02-12T14:14:44.062Z","comments":true,"path":"2022/01/02/2022-01-02-retrospect-2021-december/","link":"","permalink":"https://pocojang.github.io/2022/01/02/2022-01-02-retrospect-2021-december/","excerpt":"2021년 12월을 회고하며","text":"2021년 12월을 회고하며 결혼식 릴레이결혼식이 정말 많았다.거의 8주 연속 하객으로 참여했으니 사놓은 정장들을 뽕뽑고도 남았다는 생각이 들었다.(때문에 주말 스터디에 불참하는.. 민폐도 많이 보였다) 이런 어려운 시기에 결혼이라는 큰 산을 넘은 지인들이 참 대단하다. 행복했으면 좋겠다. 멘토링 활동올해 부스트캠프에서 코치, 멘토 활동에 참여하게되었는데 12월에 드디어 마무리 되었다.이어서 엘리스라는 교육 기관에서도 코치, 리뷰어로 참가하게 되었다.여러 교육기관을 참여하며 많은 경험을 해보니 앞으로 내가 무엇을 더 해야할지 크게 느낄 수 있었다. 4기 프리코스 및 최종 선발우아한테크코스에서는 서류 합격한 분들을 대상으로 프리코스라는 사전 교육 및 선별 과정을 진행한다.이 과정에서 프리코스 미션을 설계하고 점검하고 테스트하는 데 정말 많은 시간을 쏟았다.그리고 다른 동료들이 나보다 더 많은 고생을 해줬기에 미안함이 많이 남았다. 또한 마지막 최종 테스트를 마치며 드디어 4기 최종 선발의 큰 업무들이 종료되었다. 3기 커리큘럼 회고첫 프론트엔드 기수를 운영하며 많은 아쉬움이 있었다.3기 교육생들에게 많은 조언을 구했고 앞으로 무엇을 더 보완할지 팀원들과도 밀도 있는 대화를 할 수 있었다. 중점은 커리큘럼의 자유도, CSS, TypeScript, React TDD 등인데 4기에서는 부족한 점을 많이 보완해야겠다. 송년회 요즘은 회사에서 이렇게까지 챙겨주는데.. 모자란 내가 얼마나 더 기여해야 회사에서도 만족할 수 있을까 생각이 든다. 또한 이제 1년동안 합을 맞춰온 동료가 다른 팀으로 이동하게 되었다.우테코 초기 멤버로 팀에 정말 많은 부분을 기여해온 동료인데.. 역시나 누군가를 떠나보낸다는 것은 아쉽다. ⭐️ 정리GOOD 대부분 2021년을 정리하는 업무와 행사가 많았다. 회고하고 또 회고하며 1년을 돌아보는 모든 것이 좋았다. 1년을 정리하고 회고하며 2022년에는 무엇을 해야할지 잘 그려진 것이 모두 좋았다. Action 2022년에 해야할 일 미리 잘 계획하기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 11월 회고","slug":"2021-12-19-retrospect-2021-november","date":"2021-12-18T15:00:00.000Z","updated":"2023-02-12T14:14:44.062Z","comments":true,"path":"2021/12/19/2021-12-19-retrospect-2021-november/","link":"","permalink":"https://pocojang.github.io/2021/12/19/2021-12-19-retrospect-2021-november/","excerpt":"2021년 11월을 회고하며","text":"2021년 11월을 회고하며 대학 교육과정 개편 회의 참가 운 좋은 기회로 교육과정 개편 회의에 참여할 수 있었다.최대한 많은 의견을 드렸으나 오히려 부담만 드린 것 같다. 현업에서의 입장은 컴퓨터공학 기본 소양에 투자하는 것을 꽤 말씀드렸는데 대학에서의 입장은 취업률과 현장에 바로 뛰어들 인재를 양성하는 것에 초점을 두고 있었다. 또한 다양한 이유로 불필요한 교육도 추가되어 있기도 했는데 서로 간의 다양한 이해관계가 있기 때문에 모든 대학 교육과정이 성숙해지는 걸 기다려봐야겠다. 프론트엔드 전공과를 운영한다는 것에 한 번 놀랐고 현업자에게 피드백을 받는 교수님이 너무나 인상적이라 존경스러우면서 또 놀라웠던 하루다. NEXTSTEP 클린 코드 자바스크립트 베타 시작 https://edu.nextstep.camp/c/BRaNdTQx 우테코를 운영하며 가장 큰 이슈 중 하나는 리뷰 속도였다. 훌륭한 분들을 많이 모셨지만 모두 현업에서 중요한 역할을 하고 계신 필드의 개발자분들인지라 개인의 업무에 우테코가 밀리는 경우가 있었다. 또한 우아한테크코스에 처음 겪으며 나오는 문제들도 많았다. 추가적으로 크루들이 리뷰어에게 과하게 잘 보이려고 노력하는 현상까지 발생하기도 했다… 이런 부분들은 큰 해결 과제 중 하나였다. 그 때문에 다음 기수에 참여할 리뷰어분들을 최대한 빠르게 섭외했고 참여 조건으로 우테코와 비슷한 환경에서 리뷰이 &amp; 리뷰어 두 역할을 모두 체험하기로 했다. 다양한 분들이 베타에 참여해주셨고 분위기도 좋아 앞으로의 활동이 기대된다. 팀 회고프론트엔드 팀 회고를 진행했다. 우아한테크코스에서의 첫 프론트엔드 코스 진행에 대한 회고를 나누고 다음 기수에서는 어떻게 개선할지 진솔한 회고를 했다.교육장 확장, 교육생 확장 등 앞으로도 겪어야 할 것들이 많기에 이번 회고 자리가 앞으로 큰 도움이 될 것으로 예상된다. 우아한테크코스 4기 - 프리코스새롭게 들어올 크루들을 선별하기 위해 프리코스라는 별도의 과정을 진행한다.잘하는 친구들 그리고 의욕적인 친구들이 많아 보기 좋다. 다만 남의 과도한 의욕이 주화입마로 나타나는 경우가 있었고 유사 부정행위와 문제해결보다는 남의 코드부터 참고하기 등의 모습은 보기 좋지 않았다. 팀 내부적으로는 다른 동료들이 프리코스에서 더 힘을 보태고 있으니 잘 도와야겠다. 우아한테크코스 3기 - 끝 3기 크루들을 위한 막판 행사가 꽤나 많았다. 이력서 특강 면접 특강 리쿠르팅 데이 굵직한 행사들이 꽤 있었는데 이게 대부분 마무리를 위한 일들이라 이제는 정말 끝이구나 싶다.좋은 곳에서 행복했으면 좋겠다. ⭐️ 정리GOOD 확실히 수료식이라는 행사로 끝맺음을 하니 결실을 맺고 수확을 거둔 기분이다. 현재 기수와 다음 기수 업무를 병행했는데 좋은 팀원들 덕분에 무탈하게 해낼 수 있었다. BAD 예전부터 미뤄왔던 일 + 이런저런 일들로 지금 더 중요한 것들을 제대로 못하고 있다. 항상 업무에 우선순위를 잘지켜야하는데 수습이 잘 안된다. 운동 부족!! Action 2021년이 끝나기 전에 밀린 일 모두 정리하기 일을 벌인 만큼 수습하는 것도 중요하지만 퀄리티 챙기기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"if(kakao)2021 - FE 세션 관람 후기","slug":"2021-11-20-if-kakao-2021","date":"2021-11-19T15:00:00.000Z","updated":"2023-02-12T14:14:44.062Z","comments":true,"path":"2021/11/20/2021-11-20-if-kakao-2021/","link":"","permalink":"https://pocojang.github.io/2021/11/20/2021-11-20-if-kakao-2021/","excerpt":"if(kakao)2021 FE 세션 관람 후기","text":"if(kakao)2021 FE 세션 관람 후기 Next.js와 Typescript를 이용한 프론트엔드 개발기 https://if.kakao.com/session/40 역시 웹뷰 이야기 큰 주제였고 실 서비스는 카카오페이를 예시로 들었지만, 카카오페이 팀은 아니라고 하셨다. 주제에서의 한계가 있었는지? 아니면 난이도 조절을 대중적으로 가지려고 했는지 깊은 내용을 다루지는 않아 아쉬움이 들었다. 전체적으로는 서비스에 Next.js &amp; TypeScript 프로젝트를 어떻게 녹여냈는지 어떤 장점으로 프로젝트를 운영할 수 있었는지 개괄적인 설명이 있었고 추가적으로 캐시, Shallow Routing, getInitialProps, 이미지 개선에 대한 이야기를 풀어줬다. 개인적으로 Next.js를 간단하게 건드려본 경험이 있었는데 발표를 듣고 복습하는 시간을 가질 수 있었다. 이게 진짜 일 리 없어 : 초보 리더가 프로젝트에서 마주치는 어려운 상황들 https://if.kakao.com/session/39 프로젝트 일정 산정과 요구 사항을 스펙으로 도출하고 구현했던 이야기가 인상적으로 다가온다. 대략적인 흐름과 기승전결 항상 변하는 프로젝트 상황을 어떻게 대처했는지 일정 산정 Story Point 코드 리뷰 오픈 전 크리티컬 이슈 대응 회고 이제 카카오가 작은 회사도 아닌데 무경험자를 리더로 임명할 이유가 있나 싶기도 했고 스스로 초보 리더라고 표현하신 것에 비해 발표 내용을 보니 이미 충분한 경험이 있는 게 아닐까? 계속 의심스러웠다.그래서 그럴까보는 내내 이해가 안 되는 부분은 있었고 팀 내에 정치적 이슈나 대외적으로 풀어낼 수 없던 흥미로운 오프 더 레코드가 있지 않았을까? 궁금했다. 숨 막히는 스토리 포인트.. 일정 산정은 시니어가 리딩해도 난처하고 쉽지 않은 것이 분명한데 이 모든 것을 꼼꼼하게 진행한 점이 존경스럽다. 마지막으로 오픈 전에 터진 이슈 대응에 대해 이런 큰 발표 자리에서 솔직하게 많은 것들을 공유하는 용기가 새삼 멋졌다. functional css와 figma를 이용한 디자이너와의 웹프론트 협업이야기 (feat. AdorableCSS) https://if.kakao.com/session/89 AdorableCSS 설명이 필요 없다. 너무 훌륭한 이야기로 가득했고 동기부여도 팍팍 받을 수 있었다. 세션 레이아웃 why? - 전통적인 css 방법론으로 개발할 때 이야기 what? - functional css를 처음 접하게 해준 TailwindCSS how? - functional css를 현업에 사용하기 위한 시도들 if? - 현재 캘린더 프로젝트에서 figma를 이용한 디자니어와 협업 이야기 why -&gt; what -&gt; how -&gt; if 순으로 설명해주셨는데 기승전결도 좋았다. 기억에 남는 것 의미 기반 &lt; 시각적 기능 기반 &#x3D;&gt; 단일 클래스 네이밍 CSS를 먼저 만들어두고 &#x3D;&gt; HTML에서 스타일을 조립해서 작성 어느 한 집단의 소속으로 일하며 가장 힘든 것은 개인적인 욕망(기술적, 정치적)을 숨기고 그 욕망을 회사 업무로 치환하려는 사람들과 일하는 것이다.(비즈니스나 서비스의 중요성보다 개인적인 욕망이 우선시되기 때문에) 그런 나에게 이 세션을 발표해주신 분을 보며 많은 반성을 하게 된다.기술적인 챌린지, 사이드 프로젝트, 회사 프로젝트까지 일거양득 그 자체였고 좋은 자극을 받은 만큼 진지하게 개발자 인생을 돌아보고 크게 그려봐야겠다. 카카오페이 프론트엔드 개발자들이 React Query를 선택한 이유 https://if.kakao.com/session/118 아직까지는 React Query와 SWR에 대한 이야기는 대부분 크게 다르지 않다. React 생태계에서 느꼈던 번거로움과 캐시에 대한 고민을 줄여주기 때문이다. 이번 세션에서도 일부분의 내용은 마찬가지였다. React &amp; Redux에서의 Data Fetch을 React Query로 어떻게 풀어냈는지 비교하며 Custom Hook에 로직을 어떻게 분리해냈는지는 대부분 비슷하기 때문이다. 다만 카카오페이 실 서비스에서 persistQueryClient나 캐시를 어떻게 활용했고 그로 인해 사용자에게 좋은 환경을 제공했다는 몇 가지 케이스가 구체적으로 나타나서 충분히 좋았다.(큰 기업에서 새로운 기술을 실제 비즈니스에 녹여낸다는 건 언제나 좋은 모범 사례)","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"if(kakao)","slug":"if-kakao","permalink":"https://pocojang.github.io/tags/if-kakao/"},{"name":"kakao","slug":"kakao","permalink":"https://pocojang.github.io/tags/kakao/"}]},{"title":"2021년 10월 회고","slug":"2021-10-31-retrospect-2021-october","date":"2021-10-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.062Z","comments":true,"path":"2021/10/31/2021-10-31-retrospect-2021-october/","link":"","permalink":"https://pocojang.github.io/2021/10/31/2021-10-31-retrospect-2021-october/","excerpt":"2021년 10월을 회고하며","text":"2021년 10월을 회고하며 1. 황금연휴대체 공휴일(개천절, 한글날) 덕분에 굉장히 잘 쉬었다.오히려 10&#x2F;18일에는 왜 일해야 하는지 당황스러울 정도..! 2. 우아한테크코스 - Level4 수업간만에 커리큘럼 작성부터 강의 리딩까지 한 사이클을 또 운영했다. 레벨3에서는 크루들이 본격적인 팀 프로젝트를 해야 하니 최대한 간섭하지 않았고 레벨4가 되서야 드디어 강의에 복귀했으니 꽤나 오랜만이다. 이전에는 레벨2 React 담당으로 대표적인 커리큘럼을 설계하며 엄청나게 고민을 하고 커리큘럼을 수시로 갈아엎으며 다시 만들기를 반복 했었는데 이번 레벨4에서도 결국 어쩔 수 없이 레벨2와 연계된 비슷한 강의를 진행하게 되었다. 가장 고려했던 점을 다시 짚어보자면 모던 SPA 내부 동작 원리를 탐구하도록 유도 React에만 주화입마 되지 않도록 넓은 시야로 방향 잡기 VirtualDOM 동작 원리 &amp; JSX 상태 관리에 대한 깊은 고민 자유로운 참여형 강의 2-1. 모던 SPA 내부 동작원리를 탐구하도록 유도예시 코드와 사례는 React로 설명하지만, 미션 수행은 JavaScript로 해야 하는 것을 누차 강조하고 미션 요구사항을 도출한 후 유도했다. 2-2. React에만 주화입마되지 않도록 넓은 시야로 방향 잡기다른 사람들이 작성한 코드를 보고 학습하는 것을 금지하는 분위기로 이끌었다. 알고리즘을 떠올리게 하고 문제해결을 유도하며 스스로 고민하고 고통을 느끼는 것은 힘들지만 그 과정속에서 배우는 것이 많다는 것을 설명했다. (마시멜로 이야기에 비유) 2-3. VirtualDOM 동작 원리 &amp; JSXReact의 관점에서 한 설명과 React를 벗어난 설명을 하며 함수 하나하나 쪼개서 설명하는 느낌으로 강의를 진행했다. 2-4. 상태 관리에 대한 깊은 고민반응형 그리고 선언형 프로그래밍에 대해 함께 탐구하고 절대 정답을 주거나 특정 패턴을 케이스로 던지지 않았다. 또한 React is not Reactive를 이야기하며 Vue가 가고자 하는 방향과 Proxy API를 언급하여 흥미를 가지고 스스로 탐구할 수 있도록 유도 했다. 참고로 상태관리는 거의 분량을 포기하기는 했다. 데모데이로 바쁜 크루들을 괴롭힐 수 없기에 강사로써 욕심을 버리고 포기할 수밖에 없었다. 2-5. 자유로운 참여형 강의Figjam을 활용했다. 생각보다 성능이 훌륭해 지장이 없었고 크루들이 브레인스토밍하는 데 있어 다양하고 복잡한 기능보다는 간단하고 간결한 기능을 제공하며 사용하기 편리했다. 추가로 흥미로운 템플릿이 많아 수업 참여도를 높이는 데 도움이 되었다. 크루들이 스스로 강사가 되어 배운 걸 다시 강의하도록 유도했다. 직접 만든 VirtualDOM 알고리즘을 설명하고 자신이 만든 라이브러리를 남들 앞에서 설명한다든가 상태 관리에 대해 직접 고민하고 풀어냈던 경험담을 풀어내도록 했다. 3. SW마이스터고 웨비나 연사 우아한테크캠프 캠퍼들을 멘토링한 경험이 있는데 멘티 모두 마이스터고 학생이였다. 그때 느꼈던건 이미 어린 시절부터 많은 경험을 해왔고 그로 인해 뛰어난 실력과 개발자 선후배가 가득한 생태계까지 풍부해 부족한 게 없어보였다. 마이스터고 학생들을 멘토링 하는 것을 넘어 강연까지 한다니.. 개인적인 경험이 떠올라 큰 부담으로 다가왔다. 결국 과거 멘토링으로 연을 쌓은 학생에게 도움을 요청했고 채용, 실무 경험, 기본기 이런 부분들을 마이스터고 학생들에게 설명한다면 굉장히 반응이 좋을 것이라며 마이스터고 후배들에게 사전 설문까지 받아줬다. (정말 감동스러웠다.) 멘티의 지혜와 도움에 우아한테크코스의 전신이자 타이틀(소프트웨어 생태계에 선한 영향력을)을 접목하여 적당한 주제로 이야기를 나눌 수 있었다. 강연하고 소통하며 질문을 받아보니 이미 학생 수준을 넘어 취준생 그리고 현업 개발자 수준의 성숙한 고민을 하고 있더라.. 나는 그 나이에 무엇을 했을까? 오히려 반성하는 것을 넘어 연사자로써 주는 것보다 좋은 인사이트를 받는 시간이였다. 4. 네이버 부스트캠프 리뷰어 활동타 교육 기관에서는 리뷰어가 어떻게 활동하는지 궁금해서 참여하게 되었다. 부스트캠프의 캠퍼들이 어려운 미션을 해결하는 것을 보며 고생하는 점은 안타깝지만 이런 성장통은 있어야겠지? 생각이 든다.다만 개인적으로 가장 아쉬웠던 부분 다른 사람들의 구조를 따라 하는 경우가 굉장히 많았고 심한 경우 핵심 코드를 긁어올 때가 있어 이런 부분은 아예 리뷰시 거부감이 들어 이런 교육을 하는 게 맞는 건가? 회의감이 들고는 했다. 리뷰어로 참여해본 입장에서는 배울 점도 많았고 느낀 점도 많았다. 5. 유데미 강의 출시 https://www.udemy.com/course/clean-code-js 드디어 첫 온라인 강의를 출판했다. 7월부터 준비했는데 게으른 탓에 이제서야… 모습을 드러냈고 출시 일정에 맞춰 허겁지겁 강의를 찍어냈다. 돌아보니 부족하고 허접한 퀄리티를 넘어 스스로 누군가에게 동영상으로 지식을 전파할 수 있는 수준이 아닌 게 아닐까? 반성하고 있다. 거기다가 프로모션 효과로 많은 광고가 노출되고 있으니 하루하루 속상하다. 내년에는 강의 제작 경험을 잘 정리하고 앞으로는 어떻게 잘 만들 것인가에 대해 연구를 하고 부족한 실력으로 억지로 지식을 쏟아내지 말고 나부터 잘해야겠다. 6. 오늘의 개발자: 프론트엔드 : Live Talk #42 https://www.wanted.co.kr/events/livetalk42 총 지원자: 1400명대 라이브 최고 참가자: 500명대 정말 매 순간이 즐거운 이벤트였는데 드디어 끝나는구나 이제서야 수요일에 정이 들었는데 아쉬움이 가득하다. 하지만 대부분의 연사자분들이 준비하시며 꽤 스트레스를 받았다니 정말 죄송스러웠다.(지인 섭외라 더 죄송스러웠다) 그래도 찐하게 오래 남을 추억을 보냈고 원티드 그리고 우테코 모두 도움 되는 행사를 보낸 것 같다. 7. 우아한테크코스 4기 모집 3기도 소중하지만 10월에는 새로운 4기를 선발해야 했다.모든 팀원이 3기와 4기를 위해 동시에 시간을 쓰다 보니 단 하루도 바쁘지 않은 날이 없었다. 8. 우아한테크코스 3기 최종 데모데이 https://sites.google.com/woowahan.com/wooteco-demo-3rd 우테코 크루들의 수준이 정말 훌륭하다.뿌듯하고 또 뿌듯했다. 잘 가르친 적도 없는데 이렇게 알아서 성장하다니 이제는 강사이자 코치인 나보다 크루들이 더 훌륭하다는 걸 직접적으로 느낄 수 있었고 교육생인 크루들에게 배워야겠다. Java 국비지원 학원을 다니며 공부했던 그 시절을 떠올려보면 요즘 어린 취준생들은 굉장히 훌륭한 실력을 갖추고도 이렇게 치열하게 취업한다니… 9. 조기 수료 크루들갑작스럽게 3명의 크루들을 떠나보냈다.한참 잘 나가는 좋은 회사를 갔으니 축하할 일이지만 왜일까? 누군가를 떠나보낸다는 것이 아직은 익숙하지 않다. 적당히 노력하면서 좋은 개발자로 잘 성장했으면 좋겠다. ⭐️ 정리GOOD 레벨4 강의가 최고는 아니지만, 최선에 가까웠고 크루들이 바쁜 와중에도 좋은 인사이트를 얻어간 것 같아 기분이 좋았다. 그동안 연사 활동을 많이 했지만 이번 달에 진행했던 연사 활동은 유난히도 추억에 남을 것 같다. 현재 기수와 다음 기수 업무를 병행했는데 좋은 팀원들 덕분에 무탈하게 해낼 수 있었다. BAD 운동 부족!! 게으름.. Action 운동을 해야한다. 개인 업무보다는 팀을 위해 움직이자 게으름의 원천은 완벽주의에서 나온다는 것을 알았다. 답은 없다. 실천할 수 밖에","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"함께 자라기","slug":"2021-10-24-growth-be-together","date":"2021-10-23T15:00:00.000Z","updated":"2023-02-12T14:14:44.062Z","comments":true,"path":"2021/10/24/2021-10-24-growth-be-together/","link":"","permalink":"https://pocojang.github.io/2021/10/24/2021-10-24-growth-be-together/","excerpt":"함께 자라기 - 애자일로 가는 길 제목과는 다르게 느껴지는 성장에 대한 이야기","text":"함께 자라기 - 애자일로 가는 길 제목과는 다르게 느껴지는 성장에 대한 이야기 책 정보출판사 : 인사이트저자 : 김창준출간 : 2018-11-30페이지 : 228ISBN : 9788966262335가격 : 13,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=14341885: https://blog.insightbook.co.kr/2018/12/10/%ed%95%a8%ea%bb%98-%ec%9e%90%eb%9d%bc%ea%b8%b0 소개애자일 전문가로 유명한 김창준님의 강연을 보면 항상 어렵게 느껴지기도 했고 애자일이 자체가 거대한 벽과 같이 느껴질때도 있었다.그러던 중 2020년..많은 개발자 커뮤니티에서 김창준님이 작성해주신 함께 자라기라는 책이 자주 언급되는 것을 보게 되었다.하도 많이 언급되고 있다보니 얼마나 대단하면 그럴까? 내가 아는 애자일이 애자일이 맞나?근데 왜 책 리뷰를 보면 애자일이 아닌 성장이야기로 가득할까? 결국 수 많은 궁금증이 생기기 시작했다. 성장에 도움이 된다는 이야기와 추가로 제목에서 느껴지는 함께 자라기라는 말은 마침 내게 필요한 책이구나 라는 생각이 들게 되었다.스타트업에서 팀을 함께 만들어나가던 시점이라 그 부분에서의 갈증을 해소해줄 수 있을 것만 같은 생각이 들어 더욱 궁금해졌다. 제목 제목에 문제가 있다는 생각이 들었다.함께 자라기 그리고 애자일로 가는 길 이런 제목만 봐서는 정말 팀에서 애자일 문화를 개선하고 함께 자라는 것에 초점을 두는 내용으로만 느껴졌다.실제로 함께 일하는 동료도 이 책을 읽는 내 모습을 보고는 요즘 애자일 공부하시나봐요? 라는 이야기를 농담으로 던질 정도였으니 말이다. 함께 + 자라기와는 다르게 그냥 혼자 자라고 싶을 때도 읽을 수 있는 책이라는 확신이 든다.성장 관점에서 너무나 환상적이기때문이다. 이 책의 구성은 3가지로 구성된다. 자라기 함께 애자일 그러니 책 제목도 자연스럽게 연결되는 듯하다.하지만! 자라기 챕터 부분만 봐도 엄청난 영감과 동기부여를 준다. 성장에 관심이 있는 그 누구나 읽어봤으면 좋겠다. 자라기독서 중 감명 깊은 구절이 있으면 해당 내용에 밑줄이나 하이라이팅을 남겨놓고는 하는데..함께 자라기를 보며 모든 내용에 흔적을 남길 수 없어 안타까웠다.그만큼 모든 내용에 있어 망치로 머리를 맞은 듯 강한 충격을 받았다. 말콤 글래드웰의 아웃라이어 본문 중 1만 시간의 법칙이라는 내용이 얼마나 근거 없는 이야기인지 느껴졌고 성실함의 배신도 느껴지게 되었다. 의도적인 수련이 중요하다는 말과 사례는 숱하게 들어봤지만 추상적이고 막상 실천하려니 막막해 포기하고는 했었다.함께 자라기에서는 의도적인 수련에 대해 케이스 별로 어떻게 수행할 수 있는지 매우 자세하고 간결하게 풀어나간다. 함께읽는 내내 큰 반성과 회고를 하게 되었다.결국 난 아마추어에 가까운 개발자이자 동료에 가까웠구나 느껴졌기 때문이다.물론 대부분의 사례와 이야기를 보면 너무 빡빡하고 철저한 기분도 들지만 진정한 프로는 이렇게 일하는구나 체감할 수 있었다. 물론 이 책을 보고 나조차도 변하기 어렵고 팀에 변화를 주기도 어렵다.다만 매일매일 노력한다면 복리로 다가올 수 있을 것이다. 결론의식적인 수련이 책을 보고 확실히 얻어가는 한 가지이다.공부를 하든 업무를 하든 가슴 속 어딘가에서 나는 지금 의식적으로 하고 있는가? 라는 질문이 떠오른다. 참 좋은 영감을 강하게 준 엄청난 책이다. (심지어 200페이지 가량의 얇은 책인데도) 물론 애자일에 큰 기대를 가지는 사람이라면 애자일에 대한 분량이 많지 않아 아쉬울 수 있지만 성장을 원한다면 그 누구라도 엄청난 울림을 줄 수 있는 얇고 강력한 책이라고 추천해줄 수 있다. 추가적으로 인사이트 이북의 DRM-Free 함께 자라기 구매를 추천한다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"}],"tags":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/tags/book/"}]},{"title":"리팩터링 2판","slug":"2021-10-10-refactoring-2nd-edition","date":"2021-10-09T15:00:00.000Z","updated":"2023-02-12T14:14:44.062Z","comments":true,"path":"2021/10/10/2021-10-10-refactoring-2nd-edition/","link":"","permalink":"https://pocojang.github.io/2021/10/10/2021-10-10-refactoring-2nd-edition/","excerpt":"리팩토링 개정판 코드 구조를 체계적으로 개선하여 효율적인 리팩터링 구현하기","text":"리팩토링 개정판 코드 구조를 체계적으로 개선하여 효율적인 리팩터링 구현하기 책 정보출판사 : 한빛미디어저자 : 개앞맵시(이복연)역자 : 남기혁출간 : 2020-04-01페이지 : 550ISBN : 9791162242742가격 : 35,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=16311029: https://www.hanbit.co.kr/store/books/look.php?p_code=B6952616555 소개2018년 마틴 파울러옹의 아티클을 보고 드디어!! 리팩터링이 출간되는구나 흥분을 감출 수 없었다. 이번 2판은 Java &#x3D;&gt; JavaScript로 변경되어 작성되었다는 소식이 언급되어 있기 때문에 프론트엔드 엔지니어로써 더 많은 기대가 되었기 때문이다.(역시 발빠른 한빛미디어에서 번역본을 출간해줬고 어찌 또 운좋게 책을 증정받아 무료로 읽어볼 수 있었다.) 리팩터링 1판이 20년이 넘은 지금도 훌륭한 책으로 불리며 Java 진영에서는 필독서로 손 꼽히니 읽기 시작할때도 흥분을 감출 수 없었다. 리팩터링이란저자는 리팩터링에 대한 정의를 명사와 동사로 나누어 구체적으로 묘사한다.이는 클린 코드와는 다른 느낌인게 클린 코드 저자 엉클 밥은 클린 코드에 대한 정의를 수 많은 개발자들이 서로 다르게 생각할 수 있다고 설명한다. 아무튼 마틴 파울러는 리팩터링을 구체적으로 설명한다. 명사 소프트웨어의 겉보기 동작은 그대로 유지한 채, 코드를 이해하고 수정하기 쉽도록 내부 구조를 변경하는 기법동사 소프트웨어의 겉보기 동작은 그대로 유지한 채, 여러가지 리팩터링 기법을 적용해 소프트웨어를 재구성한다. 추가로 켄트 벡이 비유한 두 개의 모자도 재미있는 비유다.(마틴 파울러는 두 모자를 자주 바꿔 쓴다고 한다.) 기능 추가 모자 기능을 추가할 때는 기능 추가 모자를 쓰고 기존 코드는 절대 건드리지 않고 새 기능을 추가하기만 한다. 진척도는 테스트를 추가해서 통과하는지 확인하는 방식으로 측정한다. 리팩터링 모자 기능 추가는 절대 하지 않기로 다짐한 뒤 오로지 코드 재구성에만 전념한다. 테스트도 새로 만들지 않는다. 부득이 인터페이스를 변경해야 할 때만 기존 테스트를 수정한다. 끝으로 돈 로버츠의 가이드 3의 법칙 즉 삼진 리팩터링도 흥미롭다. 결국은 책 곳곳에 테스트 코드 없이 리팩터링하는 것은 리팩터링이 아니다라는 내용이 계속 따라온다. Chapter 1 ~ 2아쉽고 또 아쉽다 ㅠㅠ기대가 많았던 책인데 남는건 1장~3장 아닐까?라는 생각일정도로 4장부터는 개인적으로 실망에 가까웠다. Chapter 1 (1장)최고의 챕터다.1장의 코드는 굉장히 길고 흐름을 따라가기 어렵지만 이 책에서 비중을 40%는 차지하는게 아닐까 싶다.리팩터링하는 과정조차 흥미로우니 시간없으신 분들은 1장만봐도 충분하다는 생각이 들 정도로 흥미로웠다. Chapter 2 (2장)리팩터링 원칙이 무수히 쏟아진다.프로그래밍의 이론과 역사를 공부하는 느낌이라 재미있는데 리팩터링에 대한 다양한 시각과 시선 그리고 원칙이 개발자로써 내가 얼마나 무책임한 개발자였던가 깨우치게 해줬다. 리팩터링이란 핑계와 변명으로 무장했던 나 그리고 여태까지 해왔던 리팩터링이 리팩터링이 아닌데 착각했던 나를 되돌아 볼 수 있었다. 실망3장부터는 실망이 가득하게 들었다.출간 전부터 기대가 컸고 1장부터 3장까지는 흥미진진하고 재미있었다. 하지만 4장부터.. 지치기 시작했다.그 이유는 여러가지가 있겠지만 몇가지가 생각난다. 억지로 짜낸 것만 같은 무수히 많은 리팩터링 기법들 리팩터링 기법에 사용되는 예시 코드 재활용 리팩터링 카탈로그부터는 완전히 다른 책 JavaScript를 다룰 것이라는 큰 기대 Java 로직이 나타나며 흐름이 또 한번 끊김 결론기대가 너무 커서 그랬을뿐이지 그래도 좋은 책이다.한땀 한땀 코드를 열심히 작성해서 저장소를 관리하기도 했고 여러번 읽기도 했다. 2020년에 자바 카페 커뮤니티분들과 거의 4개월 이상 진행했고2021년에는 재남님의 스터디에 우테코 크루들과 함께 참여해서 읽어볼 수 있었다. 아마…. 혼자 읽었다면 금방 포기했을 법한 책이다. 그래도 챕터 1~3은 최고다. 베스트 중의 베스트라 시간될때 다시 한번 읽어봐야겠다. (작년에 읽은 책인데 이제서야.. 후기를 쓰다니 역시 글또덕분 👍)","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"}],"tags":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/tags/book/"}]},{"title":"2021년 9월 회고","slug":"2021-09-30-retrospect-2021-september","date":"2021-09-29T15:00:00.000Z","updated":"2023-02-12T14:14:44.062Z","comments":true,"path":"2021/09/30/2021-09-30-retrospect-2021-september/","link":"","permalink":"https://pocojang.github.io/2021/09/30/2021-09-30-retrospect-2021-september/","excerpt":"2021년 9월을 회고하며","text":"2021년 9월을 회고하며 인프런 멘토링인프런 멘토링을 시작한지 한달이 되었는데 이번 달은 정말 멘토링 신청이 워낙 많아서 놀랐다.한 달에 10회 이상 멘토링을 하며 느낀 건 확실히 돈이 되는 건 아닌데 개인 시간에 멘토링을 툭툭 하게 되어버리니 쉽게 지칠 수 있다. 연휴간만에 꽤 긴 연휴 기간을 지냈다.코로나가 창궐하며 휴가 느낌은 나지 않지만 그래도 나름 충전할 수 있는 시간을 보냈다. 부스트캠프 리뷰네이버 부스트캠프 리뷰어로 참여하게 되었다.우아한테크코스에서 리뷰어와 소통하고 케어하며 부족함을 느끼게 되었다. 차라리 다른 교육 기관에 리뷰어로 참여해보자! 라는 생각으로 시작하게 되었다. 아직은 시작한지 얼마되지 않아 크게 다른 건 모르겠지만 그래도 배울 점이 많이 있었다. 대학 강연이번 달은 유난히 멘토링이 몰리더니 대학 강연 요청도 꽤 많아서 놀랐다.재택이라 집에서 퇴근 시간 이후에 진행하면 되기 때문에 편하긴 하다. 하지만 여전히 벽을 보고 혼자 떠드는 느낌이라 씁쓸했다. 취업 불안감교육생들이 엄청나게 흔들리기 시작했다. 아직 교육 수료까지 3개월은 남았는데 벌써부터 좋은 회사에 합격하며 이별을 고하는 친구들이 생기고 있다. JavaScript 기본기도 부족해서 힘들어하던 시절이 엊그제 같은데 벌써 이렇게 훌륭하게 성장했다는 게 뿌듯하긴 하지만 그것을 보고 우테코 활동에 점점 소홀해지는 경우가 많았다. 다 개발자로 취업하자고 하는 일인데 내가 개입할 수 있는 일인지 달랠 수 있는 일인지도 잘 모르겠다.다만 확실한 건 취업해야만 개발자는 아니다. 가르치는 강사이자 코치의 개인적인 욕심이지만 우테코에 들어온만큼 이 교육 기간에 충실했으면 좋겠다. KPTKeep 다음 기수 리뷰어 양성을 위한 연구 Problem 취업에 불안감을 느끼는 교육생들을 잘 달래주지 못했다. 외부 활동이 많았다. Try 과하게 많은 활동을 하고 있다. 불필요한 활동 줄이기","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 8월 회고","slug":"2021-08-31-retrospect-2021-august","date":"2021-08-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.062Z","comments":true,"path":"2021/08/31/2021-08-31-retrospect-2021-august/","link":"","permalink":"https://pocojang.github.io/2021/08/31/2021-08-31-retrospect-2021-august/","excerpt":"2021년 8월을 회고하며","text":"2021년 8월을 회고하며 🤩 즐거움방학 + 휴가 벌써 휴가 기간이라니 시간 참 빠르다.휴가 기간이지만 개인 업무 현황이 아직 미비해 따로 평일에 휴가를 쓰지는 못하고 주말을 이용해 지방으로 간단한 휴가를 다녀왔다. 물론 교육을 진행하는 상황에 학생들에게는 마지막 방학 기간이 있었지만 코치로써 준비할게 많기도 했다. 글또 컴백글또 6기에 운 좋게 다시 한번 참여할 수 있었다.5기에서는 형편없는 활동을 했었는데 6기에서는 좋은 활동을 하며 멋진 글을 작성하고 싶다! 한마디로 글또에 다시 참여한 덕분에 어떻게 하면 좋은 글을 작성할 수 있을까?고민할 수 있어 좋다. 인터뷰유데미에서 강의 촬영 제안을 받고 몇 가지 강의를 기획하고 제작하기로 했다. 결국 클린 코드 자바스크립트 라는 강의를 만들기로 했는데 (아직도 못했다..) 강의를 홍보하기 위해 나는 어떠한 개발자인가 인터뷰하며 촬영을 했는데 오히려 셀프 회고처럼 느껴져 흥미로운 시간을 가졌다. 🔥 핫 이슈인프런 멘토링https://www.inflearn.com/users/@poco 인프런 멘토링을 시작했다.멘토진에는 이미 훌륭한 개발자분들이 많아 가장 최저의 금액으로 멘토링에 참여하게 되었는데 아직 시간대비 멘티분들에게 도움되는지는 잘 모르겠다. 인프런 멘토링의 평균 가격대가 아직 높게 형성된 편은 아니다. 또한 필드에 홀로 일하는 주니어 개발자 분들이 많다보니 멘티로써 괜찮은 가격에 다양한 멘토분들에게 멘토링을 받고 있었다.그러다보니 멘토링하며 다른 멘토분들은 이렇게 말씀하시던데…와 같은 이야기도 많이 들어봤고 후기 별점으로 다른 멘토들과 비교되어 평가되는 느낌을 받다보니 멘토링을 하며 크게 신경이 쓰이게 되었다. 따라서 인프런 멘토링이 금액 및 시간대비 행복한 경험으로만 기억되기는 어려운 경우가 나올 것 같아 이런 활동을 지속할 만한 가치가 있을까 고민이 된다. 프로그램 기획 원티드에서 두 차례 강연을 하게 된 이후로 지속적인 연락을 해오고 있었다.그러던 중 우아한테크코스를 위한 외부 이벤트를 개최하고 싶었고 때마침 원티드 담당자분이 도와주실 수 있다며 흔쾌히 협력해주셨다. 원티드 측에서 상당 부분 도와주셨지만 연사자 섭외부터 프로그램 구성 그리고 일정까지 많은 부분을 직접 기획하다보니 좋은 경험이 되었다. 😱 어려움면담우아한테크코스 레벨3와 인프런 멘토링 등을 하며 수 많은 면담을 진행했다. 아무래도 다양한 교육생들이 프로젝트를 팀 단위로 처음하다보니 많은 감정과 스트레스가 오가고 있다는 것을 피부로 느낄 수 있었다. 또한 하반기 채용 시즌이라 취업에 대한 불안함으로 흔들리는 크루들을 보자니 한편으로는 속상하지만 계속 교육에 집중해주길 바랬다. 교육 설계레벨 별로 운영되는 우테코를 운영하며 레벨4는 프로젝트 리팩터링 및 유지보수 추가로 심화 교육이 들어간다. 원래는 Redux 교육도 전담하기로 했으나..크루들의 Redux 사용률이 상당히 저조해 수 많은 회의와 고민을 통해 설계를 다시 하고는 했다. 결국 React 심화 교육을 해야하는데 이 부분 조차 어디에 초점을 맞춰야 교육생들에게 도움이 될까?많은 고민을 해야만했고 팀원들과 수 많은 시간 머리를 맞대고 결론을 도출해야만 했다. ⭐️ 정리교육 커리큘럼 설계를 하는 것도 정신없는데 수 많은 분들의 멘토링을 함께하려니 꽤나 벅차기도 했다. 중간에 잠깐 다녀온 휴가로 휴식을 보내서 큰 힘을 받았던 것 같고 결국 뜨거운 여름만큼이나 뜨거웠던 한달을 보냈다.","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 7월 회고","slug":"2021-07-31-retrospect-2021-july","date":"2021-07-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.061Z","comments":true,"path":"2021/07/31/2021-07-31-retrospect-2021-july/","link":"","permalink":"https://pocojang.github.io/2021/07/31/2021-07-31-retrospect-2021-july/","excerpt":"2021년 7월을 회고하며","text":"2021년 7월을 회고하며 🤩 즐거움캠퍼 멘토링교육자로 활동하게 되면 타 교육 기관에 대한 궁금증이 자연스럽게 따라오게 된다.그러던 와중에 우아한테크캠프의 멘토를 모집한다는 사내 공고에 기쁜 마음으로 멘토에 지원하게 되었고 운 좋게도 멘토로 선정되게 되었다. 우아한테크코스 교육생의 호칭은 크루이지만 우아한테크캠프는 캠퍼라는 호칭을 사용한다는 것만으로도 색다른 느낌인데 학습 커리큘럼이나 기간 그리고 교육생들의 성향도 꽤나 다르다는 것을 알 수 있어 재미있었다. 이제서야 3회의 멘토링을 끝냈고 멘토링의 시작은 우테캠과 그 교육을 받는 캠퍼들에 대한 궁금증이었지만 앞으로는 캠퍼분들에게 선한 영향력을 끼칠 수 있는 좋은 멘토로 기억에 남도록 노력해야겠다. 강연 활동 상반기에 좋은 기회로 강연을 하게 되었는데 다시 한번 더 강연 요청을 받았다. Web Developer 누구에게나 처음은 있었다라는 주제로 웹 개발자라는 직업을 선택한 계기부터 취업하기까지의 내용으로 준비하게 되었고 이전의 첫 강연을 마치고 나니 이전에 느꼈던 엄청난 중압감이 한결 나아져 약간의 부담감만을 가지고 준비할 수 있었다. 마지막으로 부산대학교 학생들을 대상으로 강연을 진행했는데 대학 강연은 또 그 나름대로 큰 중압감을 가질 수 있었다.컴퓨터 전공 학생들에게 무슨 좋은 말을 할 수 있을까 걱정이 되었고 비전공자로써 어떻게 전공 학생들을 이해할 수 있을까 상상해보며 준비했다. 많은 학생들이 참여했는데 단독으로 연사를 진행하려니 이 또한 나름 긴장이 되었는데 역시나 온라인 강연은 고요한.. 리액션을 대응하는 것이 큰 헌들로 작용했다.결국 나홀로 쓸쓸히 강연의 텐션을 높이려니 쉽지 않았지만 2시간이라는 긴 시간동안 캠을 키고 리액션해주는 일부 학생들이 있어 힘을 받고 마무리할 수 있었다. 🥲 여담이지만 개발자라는 주제로 대학 강연을 진행했는데 절반 정도는 컴퓨터 전공과 전혀 관계없는 학생들이 개발자라는 직업에 대한 호기심으로 참여했다고 한다. 그것도 모르고 컴퓨터 전공 학생들을 대상으로 강연을 준비했으니 참.. 민망하고 학생들에게 미안했다. 🔥 핫 이슈JTBC 다큐플러스 JTBC 다큐플러스라는 프로그램에서 우리 교육기관을 촬영했다.팀 내에 포비가 워낙 연예인이다보니 미디어에 노출되는 경우가 많으니 이런 기회도 많은 것 같다.정말 다행스럽게도 코로나가 심하지 않을 때라 무사하게 촬영을 끝냈고 너무 아쉽게도 5분도 안되는 시간으로 편집되어 나갔다. 프로그램 제목은 코로나 이후의 미래 생존 법칙인데 지구 온난화 등 불안한 인류의 미래를 위해 IT 기술의 발전이 필요하고 결국 필요한건 개발자다… 라는 기승전결로 이어지는 이야기로 마지막에 우테코가 카메오 수준으로 간단하게 등장하며 끝이 난다. 다시보기 모의 면접3기부터 시행된 모의면접을 오랜만에 진행했다.다들 열심히 준비한 만큼 많이 성장했다는 게 느껴졌다.최대한 실전에 가깝게 하기 위해 JavaScript 기초에 대해 깊이 파고드는 질문을 많이 주고 받았다. 😱 어려움리뷰어우테코에서는 외부 코드 리뷰어를 섭외하여 특정 기간의 코드 리뷰를 진행한다.훌륭한 리뷰어분들의 도움으로 크루들이 많은 성장을 이룰 수 있었지만 리뷰어분들이 워낙 바쁘기도 하고 우테코에 대한 이해도가 부족하다 보니 리뷰가 늦어져 교육 일정이나 크루들의 학습에 큰 영향을 끼치고 말았다. 이를 해결하기 위해 많은 고민과 논의를 하고 있지만 뾰족한 해결책은 찾지 못했다. 코로나 강림델타 변이까지 확산되며 코로나 확진자는 이제 1,000명을 돌파해버렸다.올해 코로나 검사는 도대체 몇 번을 하는건지.. 망설여지던 코로나 검사가 이제 익숙하다.가장 아쉬운건 코로나를 정통으로 맞은 우리 크루들 그리고 우테코의 캠퍼들이다… 현장에서 진행하는 교육이라는 강점을 전혀 누리지 못하게 되는 경우가 발생하고 있어 교육하는 입장에서도 어려움이 많은데 교육을 받는 교육생들의 입장에서는 얼마나 답답할지 속상하다. ⭐️ 정리뜨거운 여름만큼이나 핫한 이벤트가 많았던 한 달이었다.운빨투성이인 나를 세상에 드러내면 무능함을 들킬까 무서워 어떠한 제안이 와도 거절하고 미뤘었는데 이제서야 본격적으로 1인 브랜딩을 시작하고 있다.그렇게 찾아주는 곳이 점점 많아지고 있어 행복하고 감사한 마음이 들지만 역시나 부족함을 들킬 때마다 아찔한 기분에 가슴이 철렁하다. 앞으로 이불킥을 줄이지 못한다면 흑역사는 계속 쌓일 것이다.","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 6월 회고","slug":"2021-06-30-retrospect-2021-june","date":"2021-06-29T15:00:00.000Z","updated":"2023-02-12T14:14:44.061Z","comments":true,"path":"2021/06/30/2021-06-30-retrospect-2021-june/","link":"","permalink":"https://pocojang.github.io/2021/06/30/2021-06-30-retrospect-2021-june/","excerpt":"2021년 6월을 회고하며","text":"2021년 6월을 회고하며 방학 &amp; 코로나코로나가 이제 종결된건 아닐까? 마지막 희망을 품었던 시기였다. 다시 한번 코로나는 심해졌고 짧았던 방학은 이렇게 끝났다. 외부 미팅 &amp; 지인 식사코로나 소강 시기 &amp; 방학이 겹치며 그동안 만나지 못했던 지인들과 많은 이야기를 나눴다. 언제나 그렇든 개발자 지인분들과는 관련 이야기를 하며 서로 영감을 주고받았다. 레벨3 시작심해진 코로나로 인해 결국 전면 온라인으로 진행하게 되었고 출근 환경도 전면 재택근무로 전환되었다.언제까지 이렇게 대처해야 하는지 참 지치기도 하고 고생하는 교육생들도 참 안타깝다. 모의 면접마찬가지로 모의 면접을 진행했고 메인으로 배운 React보다는 JavaScript를 집중적으로 공격했다.React를 배웠으니 그것만 물어보겠지? 라는 생각으로 방심하는 것을 경계시켰다. 건강 관리갑자기 또 작년 이맘때와 같이 두드러기가 엄청나게 올라왔다. 일상생활이 불가능할 정도로 간지럼을 느꼈고 잠자는 시간조차 고통스러웠다. 항상 나 정도면 정말 건강하다는 생각으로 내 몸에 너무 무관심했고, 기고만장했다. 결국 대학 병원까지 일정을 잡았다.이번만큼은 기필코 완치하리라 KPTKeep 코로나에 지장이 없는 선에서 다양한 사람들과 교류하고 영감을 주고받은 것 Problem 너무 많은 일을 벌인 것 건강 관리에 소홀한 것 Try 이번 달에 특히 새로운 많은 일을 약속했다. 다 해낼 수 있도록 시간 관리해야겠다.","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 5월 회고","slug":"2021-05-31-retrospect-2021-may","date":"2021-05-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.061Z","comments":true,"path":"2021/05/31/2021-05-31-retrospect-2021-may/","link":"","permalink":"https://pocojang.github.io/2021/05/31/2021-05-31-retrospect-2021-may/","excerpt":"2021년 5월을 회고하며","text":"2021년 5월을 회고하며 사진 촬영우테코 교육생들은 각자의 개성을 살린 사진 촬영 시간을 가진다. 이런 사진 촬영 시간에 추억을 남기고 서로 웃는 친구들을 보니 부럽기도 했다.이렇게 추억을 남기면서 또 함께 자랄 수 있구나! 면담또 면담 시기가 찾아왔다. 사실 크게 다를 건 없었다.스스로 성장하지 못하는 것 같아서 불안한 친구들, 취업 때문에 학습에 집중하지 못하는 친구들이 많았다. 추가적으로 교육에 불만을 가지는 친구들도 있었다. 불안감 다루기리액트를 가르치면서 가장 어려웠던 것이 불안감 다루기였다.교육생들은 리액트의 내부 동작 원리를 모르고 리액트로 개발한다는 것에 큰 거부감을 느껴했다.또한 사용하는 모든 도구의 동작 원리를 알려주지 않으면 많은 항의를 하고는 했다. 사실 내부 동작 원리에 집착하는 것은 개발자로서 굉장히 좋은 자세이다.하지만 아직 제대로 사용하지 못하는 와중에 그 모든 것을 내부 동작 원리를 이해할 때까지는 납득하지 못하는 이 현상을 보니 자바스크립트 공부에 바닐라라는 단어가 하나 붙으면서 생긴 효과가 아닐까 싶었다. 교육생들을 다독이기도 하고 압박하기도 하고 교육에 대한 일정을 조정하기도 하며 많은 삽질을 거듭했다. 그래도 열심히 해주는 교육생들에게 고맙고 이렇게밖에는 가르칠 수 없는 상황이 답답했다. 코드 스피츠결국 중도에 탈주하고 말았다. 다음에는 제대로 무장해서 완주하고 싶다. 스승의 날하라는 공부는 안하고.. 스승의 날 준비를 해온 학생들 정말 엄청난 이벤트였다.그래도 교육자로서 누릴 수 있는 단 하루의 혜택이 아닐까? https://gamsa.netlify.app KPTKeep 실패해도 괜찮다는 생각으로 한번 정한 것은 일단 끝까지 잘되도록 노력했다. Problem 타인의 감정에 너무 휘둘렸던 것 Try 다른 사람들의 감정에 휘말리지 말고 중심을 잡자","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 4월 회고","slug":"2021-04-30-retrospect-2021-april","date":"2021-04-29T15:00:00.000Z","updated":"2023-02-12T14:14:44.061Z","comments":true,"path":"2021/04/30/2021-04-30-retrospect-2021-april/","link":"","permalink":"https://pocojang.github.io/2021/04/30/2021-04-30-retrospect-2021-april/","excerpt":"2021년 4월을 회고하며","text":"2021년 4월을 회고하며 첫 방학교육 기관을 운영하다 보니 신기하게도 방학이 있다. 물론 교육자로 일하는 사람들은 일을 계속 해야 한다. 그래도 좋다. 평소보다는 업무에 여유를 느낄 수 있었다. 전체 회식코로나로 얼굴도 보기 힘들도 소통하기도 힘든 게 현실이다. 각자의 학생들과 소통하는 것만으로도 많은 에너지가 소비된다! 그래서 더욱 전체 회식을 통해 모든 팀원과 소통하는 것에 대한 의미는 중요하다. 컬쳐 캠프입사 기념으로 회사에 대한 기본적인 캠프를 진행했다. 피플팀 &amp; 전사 교육팀이 얼마나 노력하는지 알 수 있었다.역시 다른 회사와는 다르게 따분할 수 있는 시간조차 재미있게 풀어줘서 기억에 남는다. 웹 프론트개발그룹 4월 meetup다른 회사도 아닌 내부 개발자들끼리도 소통하기 어렵고 어떻게 일하는지 알 수 없었다.역시나 사내에서는 웹 프론트엔드 개발자들의 소통을 이끌기 위해 다양한 행사를 하고 있다. 첫 참여인데도 의미 있는 시간과 교류였다. 앞으로는 꾸준히 참여해야겠다.사실 밋업 중요하겠지만 가장 중요한 건 동기부여와 영감이다.같은 직무의 개발자와 비교해서 뒤처지지 않도록 노력해야겠다는 자극을 받을 수 있었다. 교육 설계레벨2라는 교육 기간이 시작되었다.담당 즉 메인 강사로 교육을 진행하게 되었는데 열심히 준비했음에도 모자라고 속상하다. 더 잘하고 싶은데 매번 아쉽다.교육 설계가 이리 어려운 것인지 다시 한번 생각해보게 되었다. 나조차도 리액트를 이해하고 사용하는 데 수많은 시간이 걸렸음에도 불구하고 교육받는 대상에게는 더 빠르게 배우도록 유도해야 하니 쉽지가 않다. 나는 과연 리액트를 처음 마주했던 시절 얼마나 막막했을까? 기억이 잘 나지 않다.뭔가 지식의 저주에 빠진 것만 같다.리액트를 가르치기에는 아직 나도 모자란 사람인가보다. 모의 면접우테코에서는 이번에 모의 면접이라는 새로운 시도를 하게 되었다.개인적으로 면접 경험이 많고 짧은 면접관 경력이 있어서 그런지 진행에 어려움은 없었다. 교육생들에게 도움이 되도록 최대한 실전에 가깝게 진행했고 가감없이 피드백을 줬다. 코드스피츠최애하는 스터디 코드 스피츠가 개설되었으나.. 여러 가지 시간 관리 실패로 낙오되었다.참관식 스터디였다면 계속 들었을텐데 맹기완님이 이번만큼은 숙제를 내고 숙제하지 않는 경우 과감히 스터디에서 제외시키고 계시다니 안타깝지만 중도 하차하게 될 것 같다ㅠㅠ 강의 촬영요새 들어 다양한 곳에서 많은 제안을 받게 되었다.강의 촬영 요청이 들어왔고 그에 대한 환경을 구성하는 것만으로도 많은 시간이 들었다. 언젠가는 해야 하는 것이기도 하고 해보고 싶기도 했다.이번 기회에 좋은 강의를 잘 촬영해봐야겠다. KPTKeep 소통할 수 있는 행사나 모임에 꾸준히 참여하자 모의 면접처럼 내 경험이 교육생들에게 도움된다면 아낌없이 활용하자. Problem 완벽주의 Try 아쉬움은 잘 달래고 다음에 또 잘해보자.","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 3월 회고","slug":"2021-04-03-retrospect-2021-march","date":"2021-04-02T15:00:00.000Z","updated":"2023-02-12T14:14:44.061Z","comments":true,"path":"2021/04/03/2021-04-03-retrospect-2021-march/","link":"","permalink":"https://pocojang.github.io/2021/04/03/2021-04-03-retrospect-2021-march/","excerpt":"2021년 3월을 회고하며","text":"2021년 3월을 회고하며 🤩 즐거움프론트엔드 팀우리 팀의 프론트엔드 파트가 드디어 완전체가 되었다. 우아한테크코스는 벌써 3기를 운영 중이지만 프론트엔드 코스는 처음이기 때문에 부분적으로는 1기나 다름없는 상황이다.(거의 모든 걸 처음으로 운영하고 있다) 여태까지는 주로 단둘이 오붓하게 일하는 느낌이 강했는데 새로운 동료의 합류로 드디어 완전체가 되었다.프론트엔드 파트 회식을 따로 해보니 이제야 실감이 난다 원래부터 잘해주고 있는 준 존재 자체만으로 든든한 로이드 새롭게 합류한 공원 이렇게 훌륭한 동료들에게 도움되는 팀원이 되도록 노력해야겠다.(백엔드도 포함) 회고동료가 특이한 회고 템플릿을 들고 왔다. 정말 특이하다.평소에 김창준님을 사모하고 존경하는 동료라 그냥 괜찮은 회고겠지 생각을 했는데 직접 해보니 상당히 괜찮다. 개발자가 되기 전부터 회고 혹은 회고와 비슷한 무언가를 밥먹듯이 해왔는데 거부감이 들지 않고 굉장히 진보적인 회고라 맘에 든다.(하지만 노션에 하는건 뭔가 불편하다… 템플릿을 따로 만들어볼까?) 특강크루들에게 도움 될만한 정보 공유를 하고자 몇 가지 강의를 특강으로 진행했다. 구글링 잘하기 VS Code 잘 활용하기 할 일 관리하기 &#x3D;&gt; 만다라트 차트로 Output 크루들에게 많은 학업이 밀려있기에 상당 부분을 생략하고 대충 끝내서 찝찝했지만 그래도 잘 들어줘서 다행이다. 🔥 핫 이슈불안감심적으로 불안한 크루들이 굉장히 많다.불만족스러운 실력, 잘하는 사람들과 비교하며 느끼는 좌절감, 미션 혹은 지식에 압도되는 스트레스, 번아웃 등 크루들이 다양한 이유로 불안감에 빠져 힘들어했다.하지만 이런 고난들은 스스로 극복해야 하기에 도와줄 수 있는 게 생각보다 많지 않았다. 일단은 곁에서 들어주고 함께 공감하는 것이 최선인 것 같지만혹시 내가 크루들을 불안감에 몰아넣는 행동을 하고 있는 게 아닐까 찾아보는 것도 방법이라는 생각이 든다. 면담크루들과 깊은 대화를 해서 좋았고 사각지대에 있는 크루들도 알게 되어 미안했다.특이하게도 나에 대해 알고 싶다며 내 경험과 이야기를 해달라는 크루들이 많았다. 대부분의 크루들이 불안감을 가지고 있어 속상했다. 개인적으로는 과도한 면담과 공감에서 나오는 과한 몰입으로 지적을 받기도 했다. 방학드디어 방학이다!한 크루가 방학이라고 하기에는 너무 귀여운 고작 일주일이 넘는 방학이라고 표현했는데 공감이 간다. 큰 변화를 주기에는 짧은 시간이지만 충전하고 오기에는 충분한 시간이니 크루들이 잘 충전하며 쉬었으면 좋겠다. 😱 어려움교육 설계레벨2 교육을 주도하게 되었다.8주 분량의 React를 커리큘럼을 설계하며 리딩해야 하는 상황이다.매우 기대가 되지만 한편으로는 시간이 모자란 상황이다.나름 잘 준비했다고 생각했지만 몇 번을 갈아엎는 탓에 처음으로 돌아왔다. 커리큘럼을 설계하며 어느 정도 흔한 구성이지만 순차적인 A와 새로운 시도를 담아낸 B에 대해 굉장한 고민을 하고 있었다. 팀 회의를 진행하며 A 커리큘럼에 대한 설명을 진행했는데 놀랍게도 다른 팀원들의 아이디어에 앞서 생각했었던 B 커리큘럼과 유사한 구성에 대한 의견이 나왔다.기쁜 마음으로 동의했고 커리큘럼을 처음부터 다시 설계하기로 했다. 설계를 다시 해야하는 공수와 시도해보지 못했던 방법에 대한 두려움이 들지만 교육에 대한 열정으로 새로운 모험을 할 수 있다는 게 뿌듯하다. 시간 관리내 인생에 있어 가장 바쁜 날들을 보냈다.너무나 바빠서 정말 스스로 감당할 수 없는 수준에 모든 일들을 퀄리티있게 수행하지 못했다. 기존에 개인적인 밀려있던 일들 많은 면담 커리큘럼 설계 원티드 발표 3월에 했던 일들을 정리해보니 굵직하게는 정말 많은 일이 있었다.참고로 4월에는 지금보다 더 바쁠 예정이다. ⭐️ 정리너무나 바쁜 한 달을 보냈다.1년은 12개월이나 되는데 왜 일이 한꺼번에 몰리는지 참 야속하다.그러다 보니 순간순간 내려놓고 싶을 때도 많았는데 어떻게 시간이 흘러 대충 마무리되었다.결국 마무리 후에 느낀 감정은 짧은 후련함 뒤에 찾아오는 허탈감과 실망이다. 바쁘다는 이유로 일을 해치우는 것에 급급했다. 마감에 맞춰 일을 해치우는 것도 중요하지만 잘했어야 했다. 그동안의 결과물이 별로라 일이 더 쌓였고 시간을 되돌릴 수도 없다. 4월부터는 업무적으로 메인으로 강의해야 할 일도 많고 개인적으로는 새로운 도전을 위한 일이 있다.1분 1초 밀도있는 시간 활용을 통해 모든 일을 수준 높게 마무리해야만한다. 앞으로는 그저 열심히 하는 것보다 잘 하는 것에 충실하자.","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"2021년 2월 회고","slug":"2021-03-07-retrospect-2021-february","date":"2021-03-06T15:00:00.000Z","updated":"2023-02-12T14:14:44.061Z","comments":true,"path":"2021/03/07/2021-03-07-retrospect-2021-february/","link":"","permalink":"https://pocojang.github.io/2021/03/07/2021-03-07-retrospect-2021-february/","excerpt":"2021년 2월을 회고하며","text":"2021년 2월을 회고하며 🤩 즐거움개강드디어 OT(개강)를 통해 크루들과 첫 만남을 했고이 분야의 전문가 전사교육팀 덕분에 랜선 OT를 성공적으로 마무리할 수 있었다.(상대적으로 떨어지는 텐션과 친화력으로 도움이 되지 못해 아쉬웠다) 슬기로운 랜선 생활랜선으로 진행되는 모든 만남과 교육이 어려웠다에너지가 넘치는 크루들의 리액션이 큰 힘이 되어줬다. 특히 슬랙의 DM 같은 Text 기반의 소통이 너무 답답해서 별도의 스몰 토크로 유도하며 친밀도를 올리기 위해 노력했다. +추가로 훌륭한 도구들의 도움을 많이 받았다.(Google Meet, Zoom, Gather Town) 클럽 하우스이름, 얼굴, 닉네임을 외워야 하는 게 쉽지 않았는데요즘 핫한 클럽하우스 덕분에 크루들과 소통하고 친해질 수 있는 기회를 가졌다.(+ 리뷰어분들까지) 첫 오프 만남코로나가 회복되며 거의 3주 만에 크루들과 직접 마주할 수 있었다.(현장에서 진행하다 보니 오히려 재택도 장점이 있다는…) 크루들이 이 순간을 얼마나 간절하게 기다렸는지 눈에 보여 지켜보는 내내 뿌듯했다. 사진 촬영매년 우테코 시작 시 크루들의 소중한 프로필 사진을 촬영한다. 사진 촬영에 행복한 크루들을 구경하는 게 재미있었다.(촬영 담당 동료들에게 도움을 주지 못해 미안했다ㅠㅠ) 🔥 핫 이슈MVC 패턴현재 단계에서는 크루들이 미션 진행시 순수하게 JavaScript로만 접근하고 있다.(라이브러리 없이)때문에 다양한 시도를 할 수 있었고 오버 엔지니어링을 하거나 패턴에 대한 이해도 없이 의도가 불분명한 코드를 작성하는 경우도 종종 있었다. 하지만 가장 큰 문제는 이러한 케이스들의 유행으로 다가왔다.특정 크루들이 MVC 패턴을 작성하니 너도나도 불안하다며 비슷한 코드를 작성하기 시작했고 서로 학습의 기회를 가두기 시작했다.특단의 조치로 일정을 준수하며 쓰레기 코드라도 작성해야 한다는 접근 방식을 전파하거나 구조 시각화를 유도화하기도 해다. DOM 조작미션에 어느 정도 적응한 크루들은 DOM 조작 함수를 따로 만들거나 Custom Element 생성을 시도하고는 했다.하지만 이런 시도에 대해 리뷰어들과 소통이 거의 없었던 것 같아 아쉬웠다. 페어 프로그래밍크루들이 페어로 미션을 진행하며 설계하는 것에 시간이 많이 들었겠지만 Git과 네이밍 컨벤션에 가장 비용이 많이 쏟아지는 것으로 보였다. 😱 어려움COVID 19모든 것이 랜선으로 진행되다보니 아이스브레이킹이 쉽지 않았다. 앞서 나온 내용처럼 스몰 토크와 클럽 하우스 그리고 크루들의 도움이 없었다면 정말 쉽지 않았을 것이다. 수준 맞추기교육을 하며 크루들 간의 수준을 맞추는 것은 영원한 숙제가 아닐까?특히 선함에서 나오는 침묵과 불필요한 양보는 페어간의 불균형을 야기했다. 결국 크루들의 수준을 끌어올리거나 맞추기 위해 따로 컨콜을 진행하며 스스로 깨우칠 때까지 집요하게 묻거나 이해할 수 있을 때까지 반복해서 설명했다. 언제부터인가 설교를 하는 게 아닐까 싶기도 하고 크루들이 더욱 열심히 교육에 임하길 바라는 내가 싫었다. 또한 스스로를 타인과 비교하며 불안에 빠지는 크루들이 많아 차근 차근 해결해야 할 문제로 남았다.(성장을 위해 별도의 스터디를 진행하는 크루들이 있어 기특했다) 학습 유도어떠한 문제에 마주했을 때 해답보다는 키워드나 힌트만 주고 문제에 접근할 때 스스로 해결할 수 있도록 도우며 스스로 고민할 수 있는 시간을 연장시키게 했다. Front-Engineer를 꿈꾸는 크루들이 HTML &amp; CSS나 사용자의 경험에는 큰 관심을 가지지 않고 오로지 JavaScript에만 열중하고 있었다.미션이 벅찬 크루들도 있고 이미 교육 설계를 진행 중이기 때문에 미션 추가 요구 사항보다는사은품을 내걸고 이벤트를 진행하거나 몇몇 크루들에게 스몰 토크를 통해 웹 표준 &amp; 접근성의 필요성을 강조하며 전파를 유도했다.(일부 크루들은 사용자의 환경에 집착하는 반응이 빠르게 나타나 굉장히 신기했다.) 교육 설계우아한테크코스에서는 레벨링을 통해 학습 단계를 구분하는데 레벨1을 리딩하는 동료를 지원하며 레벨2를 리딩하게 되었다. 해결 과제 React 테크코스내에 첫 프론트 기수 역량 목표 정량적인 기준 타 부트캠프나 교육기관에서는 더 많은 커리큘럼을 3~6개월 안에 소화하기 위해 달리고 있는데 우리 우테코 크루들은 이겨낼 수 있지 않을까?생각이 들지만 그건 너무 이기적인 생각 같다. 개인적인 네트워킹을 총 동원하여 조언을 구하고 커리큘럼을 설계하고 있지만 오히려 머릿속이 점점 더 복잡해지고 있어 답답한 상황이다. 회초리크루들이 정말 잘못된 코드를 작성하거나 부주의한 태도를 보일 때 즉시 알려주거나 스몰 토크로 이를 해결하고는 했다.잘못된 습관이 형성되거나 오류로 똘똘 뭉친 논리가 지식으로 내재화되지 않도록 방지하고자 했으나때로는 크루들에게 Blame으로 느껴지기도 한 것 같다. 언제부터인지 포초리라는 별명이 생겨버렸다….별명을 만들어준 크루들에게는 감사하지만 앞으로는 표현을 부드럽게하며 소통 방법을 되돌아봐야겠다. ⭐️ 정리우아한테크코스 3기 그리고 프론트엔드 기수로는 1기나 다름없는 첫 기수를 맞이하게 되었다.또한 정식 교육자로서의 첫걸음과 새로운 팀 적응을 동시에 했어야만 했다.훌륭한 동료들과 에너지 넘치는 크루들 덕분에 잘 이겨낼 수 있었다. 어떻게 하면 더 훌륭한 개발자가 될 수 있을까?고민하며 성장을 갈구해왔던 내가 이제는 다수의 크루들을 성장시켜야 한다는 책임감이 막중하다. 어떻게 하면 크루들을 좋은 개발자로 성장시킬 수 있을까 하루에도 몇 번을 고민하며 순식간에 한 달이 지났다.이제 지나간 2월을 되돌아볼 순간도 없이 앞으로 달려야 한다.해결해야 할 과제들이 산더미로 쌓였으니 3월은 가장 험난한 일정이 예상된다.","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"나에게 영감을 주는 유튜브","slug":"2021-02-07-insight-youtube","date":"2021-02-06T15:00:00.000Z","updated":"2023-02-12T14:14:44.061Z","comments":true,"path":"2021/02/07/2021-02-07-insight-youtube/","link":"","permalink":"https://pocojang.github.io/2021/02/07/2021-02-07-insight-youtube/","excerpt":"언제나 큰 영감을 주는 중요한 유튜브 채널들","text":"언제나 큰 영감을 주는 중요한 유튜브 채널들 개인 유튜버코딩의 신 아샬 직설적이면서도 다양한 조언을 아끼지 않았는 아샬님입니다.개인적으로 굉장히 즐겨 보는 채널이며 특히 고민 상담 &amp; 개발론 &amp; 개발자의 성장 그리고 자세에 대한 영상이 많고Front-end에 대한 이야기도 간간이 존재하여 참고하기 좋습니다.또한 요즘은 다양한 교육과 컨텐츠를 준비 중이신 걸로 보입니다. ㅌㅇ 태용에서 ㅌㅇ (Entrepreneurship &amp; Opportunities)로 변경된 1인 미디어 컨텐츠입니다.스타트업 및 기업의 CEO부터 일반 직원까지 다양한 인터뷰를 통해 인사이트와 영감을 얻어 갈 수 있으며인터뷰와 편집까지 깔끔하여 굉장히 즐겨 보는 채널입니다. 포프TV 개발자 중에서는 가장 초창기 유튜버이신 포프님의 채널입니다. 해외에서 개발을 하시며 겪은 다양한 경험과 개발자의 성장 그리고 태도를 많이 다루고 있으며고민 상담 또한 주력 컨텐츠입니다. 케빈 TV 시드니 개발자이신 케빈님은 한때 나프다 활동도 하며 라이브 방송 및 인터뷰를 진행하고는 하였으나요즘은 굉장히 뜸한 걸로 보입니다. Minjun Kim 굳이 설명이 필요 없는 Velog 오너 벨로퍼트님의 채널입니다.다양한 React 강좌 및 라이브 코딩을 볼 수 있습니다. 승지니어 Sengineer 실리콘밸리에 근무 중인 승지니어님의 채널입니다개발자의 태도나 성장 그리고 취업과 이직에 대한 이야기를 주로 다루고 있습니다.간혹 라이브 Q &amp; A를 진행하시며 알고리즘 강의 또한 볼 수 있습니다. 비전공 문과 출신으로 취준생에게 응원과 조언을 해주시는 모습이 언제나 보기 좋습니다. 테크보이 워니 샌프란시스코에 사는 개발자 워니님의 채널입니다유튜브를 시작하신지 얼마 안 되었지만 빠른 속도로 구독자를 늘리고 있으며승지니어님의 컨텐츠와 비슷한 부분이 많습니다 주 컨텐츠는 주니어 개발자 및 취준생 고민 상담입니다. Hika Maeng 코드스피츠와 비사이드소프트를 운영하시는 Hika Maeng님의 채널입니다.연결된 코드스피츠 채널을 통해 강의를 보면 더 좋습니다. 굉장히 놀랄 만큼 깊이 있는 JavaScript 강의와 WEB 생태계를 선사해줍니다. 백기선 주로 Java &amp; Spring 강의를 올려주셨지만 요즘은 개발자 고민상담 컨텐츠에도 관심이 많아 보입니다. 박재성 실명보다 자바지기로 유명한 박재성님입니다.Java &amp; Spring 강의가 주이며 개발자 성장에 관한 영상도 있습니다.하지만 요즘은 업로드가 없습니다. 권오흠 알고리즘과 자료구조 강의가 알차면서도 굉장히 깊이 있습니다.입문자에게는 어려울 수 있습니다. 맠튜브 국내 JavaScript 및 Front-end 생태계에 큰 활동을 하고 있는 마크님의 채널입니다.초반에는 주로 TypeScript 강의에 주력하셨지만 점점 범위를 넓혀나가시는 것으로 보입니다. 동빈나 이제는 주력 컨텐츠가 무엇일까 헷갈릴 정도로 자료가 많아진 나동빈님의 채널입니다.진행도 초반보다 굉장히 깔끔해진 모습이 보기 좋습니다. Channy Yun - 윤석찬 AWS 테크 에반젤리스트 윤석찬님의 개인 채널이지만 AWS 문화를 소개하는 컨텐츠가 다양하게 많아 친근하게 접할 수 있는 채널입니다. Interactive Developer 비전공 고졸 개발자 출신 구글 개발자로 유명한 김종민님의 채널입니다.프론트엔드 개발자가 언제나 큰 영감을 받을 수 있는 굉장한 공간으로 개발자뿐만 아니라 UI&#x2F;UX에 도움되는 내용도 많습니다. 홍정모의 실리콘밸리 도전기 홍정모 교수님의 다양한 강의들도 있겠지만 특히 실리콜밸리에 직접 도전하는 영상들이 상당히 흥미롭습니다. 드림코딩 by 엘리 실리콘밸리에서 일하는 프론트엔드 개발자 엘리님의 채널입니다.이제는 개인 아카데미를 오픈할 정도로 교육에 열을 올리시고 계시지만 무료 강의만 봐도어떻게든 구독자들을 이해시키고 성장시키기 위해 많은 노력을 하고 기본적으로 하이 텐션 성향이셔서 좋은 에너지를 받을 수 있습니다. Naver d2 네이버의 DEV Talk 채널로 굉장히 유익한 초청 강연을 다양하게 만나볼 수 있습니다. 우아한 Tech 우아한형제들에서 운영 중인 채널로 운영된 지 얼마되지 않았지만 편집도 깔끔하고 흥미로운 컨텐츠가 많습니다. Netflix UI Engineering Netflix 개발자들의 컨퍼런스 영상을 볼 수 있습니다. Kent C. Dodds React 생태계에 굉장히 활발한 활동을 하는 개발자 Kent C. Dodd의 유튜브 채널입니다. Wes Bos 졸릴때도 확 들려오는 하이톤과 강렬한 딕션을 지닌 Wes Bos의 일부 무료 강의와 Front-end 영상을 볼 수 있습니다.대표 강의로는 JavaScript30이 있습니다. Ben Awad React &amp; GraphQL에 생태계에 관심이 많은 핫한 개발자입니다.인터뷰나 클론 코딩을 자주 올리는데 흥미로운 컨텐츠가 상당히 많은 채널입니다. 컨퍼런스FEConf Korea 국내 프론트엔드 개발자들을 위한 컨퍼런스 강의를 모두 몰아볼 수 있습니다 양재동 코드랩 다양한 교육 세션을 운영하는 양재동 코드랩의 채널이며JavaScript 관련 교육 컨텐츠가 많은 편입니다. JSConf JSConf의 거의 모든 컨퍼런스 영상을 찾아볼 수 있습니다. 국내에서 열렸던 JSConf Korea 2019 또한 재생목록에 포함되어 있습니다. Google Developers 구글에서 제공하는 기술에 대한 이야기나 튜토리얼 혹은 구글이 어떻게 풀어나가는가에 대한 영상그리고 구글 I&#x2F;O &amp; Developer Summits 등의 컨퍼런스 영상도 제공합니다. React Conf React Conf 영상을 유튜브로 접할 수 있습니다. 교육생활코딩 코딩야학과 생활코딩을 이끌고 계신 이고잉님의 생활코딩 채널입니다.다양한 교육 컨텐츠를 다루고 있으며 주로 입문과 이해에 초점을 두고 있습니다. 코드스피츠 굉장히 놀랄만큼 깊이 있고 수준높은 JavaScript 강의와 WEB 생태계를 선사해주는 채널입니다.입문과 초보에게 굉장히 어려울 수 있으며 간혹 영상에 문제가 있는 경우가 있습니다. 노마드 코더 Nomad Coders 한국인 린과 콜롬비아인 니꼴라스의 프로젝트 “노마드 코더”의 교육 채널로유튜브에서는 일부 혹은 전체 무료 강좌로 JavaScript 공부를 할 수 있습니다. 영어이지만 자막 영상이 많이 있습니다. FAST CAMPUS 교육기관 패스트 캠퍼스의 채널이지만 다양한 인터뷰 또한 볼 수 있습니다. 코드스쿼드 교육기관 코드스쿼드의 일부 강의를 볼 수 있는 채널입니다. Programmers 한때 Try HelloWorld 였던 것 같은데 이제는 프로그래머스로 변경된 것으로 보입니다.예전에 진행했던 강의가 있으며 현재는 다양한 기업 인터뷰에 관한 컨텐츠를 담기 시작했습니다. 스튜디오밀 STUDIOMEAL 다양한 인터렉션에 대응하는 방법에 대한 팁이 많이 존재하여 참고하기 용이합니다. 빔캠프 VEAMCAMP freeCodeCamp 셀 수 없이 많은 강의 컨텐츠와 커리큘럼을 통해 무료 교육 생태계를 이끌어가고 있는 freeCodeCamp의 유튜브 채널입니다. 되도록이면 공식 웹 사이트를 통해 진도 체크를 하며 공부하는 것을 추천합니다. MIT OpenCourseWare MIT 교육을 집에서 볼 수 있습니다. CS50 비전공자라면 꼭 봐야 할 유튜브 채널입니다.컴퓨터 공학 기초부터 심화 그리고 요약 영상부터 풀 강의까지 준비되어 있으며이외에도 웹에 관련한 강의까지 소소하게 올라오는 편입니다. 특히 하버드대학교 컴퓨터과학과 교수인 David Malan의 열정적인 모습에 감탄을 하게 되고는 합니다. 별도로 제공되는 일부 한글 영상은 edwith를 통해서 확인 가능합니다. UC Computer Science Education CS50 보다 훌륭하지는 않지만 CS50만큼 훌륭한 강의를 많이 가지고 있습니다.특히 다양한 시선과 눈높이로 컴퓨터 공학을 이해시키려는게 흥미롭습니다. Academind Udemy 스타 강사 Maximilian Schwarzmüller 가 함께하는 Academind의 유튜브 채널입니다.주로 WEB Front-end를 다루며무료 영상만으로도 굉장히 다양한 튜토리얼을 찾아볼 수 있습니다. Domain of Science 어려운 과학을 기가 막히게 도식화하여 예술적인 동영상으로 해석해줍니다. 특히 이 영상은 개발자라면 꼭 한번 보시는걸 추천합니다. techsith JavaScript를 좋아하는 개발자 Hemil Patel의 강의를 볼 수 있습니다.다양한 튜토리얼과 조금 더 깊이있는 JavaScript 학습을 돕습니다. Bitfumes Webnologies 밑바닥부터 큰 웹 앱까지 다양한 기술 스택으로 함께 개발합니다.편집도 괜찮고 요즘은 다루는 기술 스택도 다양해져서 다양한 케이스의 개발을 참고하기 좋습니다.(단 개인적으로 에디터의 폰트 가독성이 떨어져 보기 힘든 편입니다) Ihatetomatoes 왜 토마토를 싫어하는지는 모르겠지만 다양한 Front-end 개발 튜토리얼을 만나볼 수 있습니다.(최근에는 업로드가 없습니다) Codegrid 굉장히 화려한 UI/UX를 뚝딱 코딩하는 영상이 대부분이며 디자인 또한 훌륭합니다. The Coding Train 화려한 편집과 흥미로운 웹 개발 튜토리얼을 제공하는 채널입니다.함께 도전하는 듯한의 느낌이 드는 강의 컨셉이 특징입니다. DesignCourse 웹 디자인에 대한 다양한 컨텐츠를 만나볼 수 있으며간간히 Front-end 튜토리얼 강의도 제공합니다. Meth Meth Method 재미있는 게임 프로젝트를 JavaScript로 구현해봅니다. Colt Steele 업로드 주기가 뜸하지만 잘 편집된 JavaScript 강의를 제공합니다. edutechional Ruby 기반의 웹 개발 튜토리얼을 주로 다루는 채널입니다. LearnCode.academy 웹 개발 및 Front-end 튜토리얼 강의를 제공합니다. The Net Ninja 주로 웹 개발을 다루는데 편집이 굉장히 깔끔해서 보기 좋습니다 Coding Tech 정말 다양하고 넓은 범위의 웹 개발 강의 영상과 컨퍼런스 영상을 만나볼 수 있습니다. Codevolution Front-end 튜토리얼이 주를 이루며 React &amp; Angular를 공부할때 참고하기 좋습니다. Udemy Tech Udemy에서 운영하는 유튜브 채널로 스타 강사를 초빙하여 짧은 튜토리얼을 제공합니다. 기타뭐해먹고살지? 퍼스널브랜딩에 관심이 생겼을때 Chris님의 추천으로 구독하기 시작했습니다.퍼스널 브랜딩과 개인 성장에 굉장한 도움을 줍니다. 체인지 그라운드 동기부여와 팩폭으로 채찍질이 가능합니다.메타인지와 시간 관리 그리고 자아 성찰에 도움을 주는 강의가 많습니다. 세바시 강연 Sebasi Talk 더 좋은 세상과 지식을 모토로 하는 강연인데 한국의 TED 같은 면서도 한편으로는 따뜻하고 큰 위로가 되는 강연이 많습니다. 성장문답 진로와 고민이 많은 시기에 큰 위로를 받을 수 있습니다. 공부의신 강성태 이미 유명한 공신 강성태님의 채널로 동기부여와 자극이 필요할 때 채찍질을 해줍니다. 정리하며언제부터인지 유튜브가 없어서는 안되는 존재로 삶에 큰 영향을 끼치고 있는데수 많은 컨텐츠를 킵해놓고 제대로 보지도 못하고 경우가 많아 구독 중인 채널들을 정리하고 있다. 도대체 이 많은 채널을 언제 구독했는지 정말 꾸준하게 보고 있는 채널들이 있는지 더하고 비우는 시점에 도달한 것이 느껴진다.","categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"}],"tags":[{"name":"learning","slug":"learning","permalink":"https://pocojang.github.io/tags/learning/"},{"name":"youtube","slug":"youtube","permalink":"https://pocojang.github.io/tags/youtube/"}]},{"title":"2021년 1월 회고","slug":"2021-01-31-retrospect-2021-january","date":"2021-01-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.060Z","comments":true,"path":"2021/01/31/2021-01-31-retrospect-2021-january/","link":"","permalink":"https://pocojang.github.io/2021/01/31/2021-01-31-retrospect-2021-january/","excerpt":"2021년 1월을 회고하며","text":"2021년 1월을 회고하며 외주 🤯작년부터 하던 외주 프로젝트가 있다.처음에는 마크업으로 시작했으나 점점 당연하게 개발까지 해야 되는 것처럼 이야기가 되었다.수많은 의사소통 오류가 있었고 곪을 대로 터져 문제가 발생했다. 부랴부랴 쓰레기 같은 코드를 갈아 넣고 외주를 준 업체에 민폐를 끼치고 말았다.사명감을 가지고 조금 더 투철하게 임했다면 결과가 달랐을까? 빨리 마무리하고 본업에 충실히 해야 하는데 스노우볼이 엄청나서 문제를 해결할 수 있을지 모르겠다. 면접 ⚽️작년부터는 정말 잘 안된다.불과 3년 차 정도까지는 면접을 워낙 잘 보기도 했고 잘 못 보더라도 이상하게 결과적으로는 성공적인 면접인 경우가 많았다.하지만 작년부터 최근 면접까지는 단 한 번도 제대로 풀린 적도 없고 결과 또한 안 좋았다.운도 안 좋은데 운을 탓하기에는 나 자신도 이해가 안 될 정도로 처참하게 면접에서 발렸다. 이쯤 되니 나 자신한테 화가 나고 스스로를 용서할 수 없다. 어디서부터 내 커리어가 꼬이고 물경력이 된 것일까 다시 한번 또 좋은 개발자로 성장하고 있는가 의구심이 든다. 교육자로 새로운 출발 👨‍🏫 우아한테크코스에서 교육자라는 새로운 직무로 새롭게 출발하게 되었다.교육자로 시작한다는 것에 대한 커리어 단절의 두려움 등 수 많은 고민에 망설이게 되었지만 지금 아니면 또 언제 도전해볼까 싶었다. 2021년 새 출발을 교육자로 시작한다니 머쓱하면서도 기대된다. 새로운 사람과 새로운 업무 도메인 그리고 새로운 직무까지 정말 열심히 해야겠다. KPTKeep 최악의 면접을 이어가고 있지만 준비는 열심히 했다는 것 Problem 여러 가지 환경에 노출되며 집중하지 못했던 것 Try 다시는 일을 2개 이상 하지 말자. 하나만 잘하자. 아니 하나라도 잘하자 사명감이 없다면 가슴이 뛸 정도로 동기부여가 오는 일을 하자.","categories":[{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"}]},{"title":"개발자의 울트라러닝","slug":"2021-01-24-ultra-learning-of-dev","date":"2021-01-23T15:00:00.000Z","updated":"2023-02-12T14:14:44.060Z","comments":true,"path":"2021/01/24/2021-01-24-ultra-learning-of-dev/","link":"","permalink":"https://pocojang.github.io/2021/01/24/2021-01-24-ultra-learning-of-dev/","excerpt":"지식을 얻는 9단계 초학습법 울트라러닝의 9가지 법칙을 개발자의 관점에서 바라보기","text":"지식을 얻는 9단계 초학습법 울트라러닝의 9가지 법칙을 개발자의 관점에서 바라보기 Table of Contents 1. 메타학습: 먼저 지도를 그려라 1-1. 어떠한 기술을 공부해야 하는 이유 파악하기 1-2. 리소스 수집하기 1-3. Proof of Concept (PoC) 1-4. 나만의 로드맵 그리기 2. 집중하기: 짧은 시간에 집중도를 높여라 2-1. 뽀모도로 혹은 타이머 활용하기 2-2. 루틴 만들기 2-3. 집중이 잘 되는 TPO 파악하기 3. 직접 하기: 목표를 향해 똑바로 나아가라 3-1. 회사에서 실천하기 3-2. 외주 진행하기 3-3. 사이드 프로젝트 진행 4. 특화 학습: 취약점을 공략하라 4-1. 취약점 파악 4-2. 계층 지식 활용 4-3. 피드백 받아보기 4-4. 이론과 실습의 경계 5. 인출: 배운 것을 시험하라 5-1. 알고리즘 풀기 5-2. 지원하기 6. 피드백: 날아드는 조언을 피하지 마라 6-1. 면접 보기 6-2. 그룹 스터디 6-3. 오픈 소스 기여 6-4. 배운 것을 공유하기 7. 유지: 새는 양동이에 물을 채우지 마라 7-1. 기본에 충실하자 7-2. 리듬 유지하기 8. 직관: 뼈대를 세우기 전에 깊이 파라 8-1. Computer Science 8-2. 의식적인 학습하기 8-3. 독서 9. 실험: 자신의 안전지대 밖을 탐험하라 9-1. 극한에 도전하기 9-2. TDD 9-3. 학생 계정 및 프리 티어 등 다양한 제도 활용하기 마치며 울트라러닝의 9가지 법칙이전에 읽었던 울트라러닝의 법칙을 기반으로 개발자는 어떻게 행동할 수 있을까? 다시 한번 개발자의 입장으로 정의해보고 싶어 책을 다시 한번 펼쳐보았다. 1. 메타학습: 먼저 지도를 그려라어떻게 습득할지 조사한다. 메타는 그리스어에서 온 것으로 그 너머를 의미하며 학습에 관한 학습이라고 할 수 있다. 메타 학습은 자신만의 메타 학습 지도 그리기부터 시작한다.때문에 3가지 질문을 통해 메타 학습 탐색을 하게 되면 학습 지도 그리기에 바탕이 된다. 왜 그것을 배우려 하는가? (동기 파악) 또 다른 결과를 위해 결과보다는 나만의 목적을 위해 무엇을 흭득해야 하는가? (공부하려는 지식을 구조화하기 위해 브레인스토밍) 개념: 암기가 아닌 이해해야하는 내용들 사실 정보: 외우면 그만인 것들 절차: 수행을 동반한 연습 어떻게 학습할 것인가? 벤치마킹 (예: 커리큘럼, 추천 서적, 강의) 강조: 목표로 설정한 부분을 집중적으로 학습 제거: 목표에 부합하지 않는 부분을 미루거나 제외 1-1. 어떠한 기술을 공부해야 하는 이유 파악하기 취업 혹은 이직 같은 커리어 패스를 위해 개인의 이익이나 목적만을 위해 (Proof of Concept) 없이 회사의 서비스에 불필요한 기술 도입을 추진하는 경우 개발이나 코딩 자체가 즐거움 수 많은 학원들의 과장 광고와Hype Driven Development라는 아티클이 이를 증명한다.스스로 욕망을 감추지 않고 학습을 대하는 태도에 진심이 담겨 있거나 스스로 즐겁다면 배움에 이유는 중요치 않다. 하지만 학습에 전념하는 목적과 방향이 흐릿한데 그 이유가 다른 곳에 있다면 독학을 하면서도 길을 잃을 수 있다.때문에 어떠한 기술을 왜 배워야 하는지 스스로 잘 정리해놓고 준비해야 한다. 1-2. 리소스 수집하기 관심 있는 위클리 구독 즐겨 찾는 아티클 정리 (Medium, DEV.to) SNS (Facebook, Slack, Reddit, Meetup, twitter, Youtube) 1-3. Proof of Concept (PoC)직역하자면 개념증명이라고도 한다.경력자의 경우 충분히 접해봤을 수 있는 용어인데 주로 신기술 도입 전 검증을 뜻한다. 개인적으로 무언가를 학습하기 전에 PoC (Proof of Concept) 과정을 거치는 게 큰 도움이 됐다.한마디로 내가 이 기술을 꼭 학습해야 하는 이유가 무엇인지 셀프 검증하며 다시 한번 판단해볼 수 있다.(뚜렷한 목적 없이 단지 불안함과 유행 등을 이유로 학습하는 경우도 있었다.) 1-4. 나만의 로드맵 그리기목적이 정해졌다면 수집된 리소스를 통해 학습을 방법을 고민해 본다.완벽함을 추구하기 위해 시간을 쏟지 말자 가장 중요한 것은 실천이다. 방향을 명확하게 가져가며 중간 중간 빠르게 수정하자 아무리 찾아도 로드맵을 그릴 수 없고 스스로 로드맵에 확신이 들지 않는다면 다양한 매체를 활용해보자 강의 독서 클론 코딩 멘토링 학원 및 교육 기관 커리큘럼 2. 집중하기: 짧은 시간에 집중도를 높여라집중력을 기르고 공부할 수 있는 시간을 빼둔다. 시작하지 못하고 미룬다 실천할 수 있는 정신적 습관 만들기 미루게 되는 대상이 싫은 이유 파악 시간을 쏟게 되는 다른 관심사가 좋은 이유 파악 집중에 실패한다 (일정과 성격 그리고 작업 흐름을 고려해 최적의 방법을 찾기) 환경: 가장 잘할 수 있는 환경 과제: 집중이 잘 되는 과제 (예: 동영상, 문제풀이) 정신: 깨끗하고 차분한 마음을 장기적으로 강화 집중에 좋은 최상의 상태 찾기 복잡한 업무: 다소 느슨한 집중 상태와 낮은 각성 상태 문제 풀이: 조용한 환경 단순한 일: 적절한 소음과 함께 2-1. 뽀모도로 혹은 타이머 활용하기나를 감시하는 또 다른 잔소리꾼을 만드는 일이지만 이러한 간섭이 필요할 경우도 있다.단 한계를 벗어나게 된다면 번아웃이 예상된다. 2-2. 루틴 만들기어쩌면 습관 만들기라고 볼 수 있다.루틴을 만들어 자연스럽게 집중이 되도록 환경을 만들어보자 예) 기상시 폰을 보지 않고 바로 일어나서 영단어 외우기 2-3. 집중이 잘 되는 TPO 파악하기집중이 잘 되기 위한 시간 &amp; 장소 &amp; 상황을 만든다.그전에 스스로 어느 시간 &amp; 장소 &amp; 상황에 집중이 잘되고 안되는지 파악하는 게 선행되어야 한다. 예) 카페에서 코딩하기, 새벽에 독서하기 3. 직접 하기: 목표를 향해 똑바로 나아가라 잘하고 싶은 그 일을 해라 배우려는 기술과 가까운 환경과 상황 그리고 상태에서 학습하는 방식 직접 하는 것은 불편하고 지루하며 좌절감을 느낌 &#x3D;&gt; 책, 강좌, 앱에 만족하게 된다 (실력 상승 기대) 가장 쉬운 방법은 많은 시간을 들이는 것이다. 직접 학습 전략 프로젝트 기반 학습: 수많은 기술을 활용하여 프로젝트로 마무리 담금형 학습: 목표로 하는 기술을 해야하는 환경에 뛰어든다. 모의 비행 방식: 시뮬레이션 과다학습: 많은 도전을 하며 피드백을 받는다. 3-1. 회사에서 실천하기회사에서 실천한다는 것은 정말 무모한 도전이다.서비스와 비즈니스의 이해 관계 그리고 릴리즈까지 생각해보면 잘 하고 싶은 그 일을 회사에서 한다는 것은 이기적이다. PoC를 통해 스스로 잘하고 싶은 그 일이 회사에 기여할 수 있는 측면이 가득한지 철저하게 의심해보자 실제로 개발자들에게 기술 스택이나 도메인 지식이 회사를 선택하는 동기로 작용하는 면도 있기때문에회사에서 가고자 하는 방향과 내가 잘하고 싶은 그 일이 일치한다면 일석이조가 아닐까 생각이 든다. 3-2. 외주 진행하기내가 하고 싶은 그 일을 직접 자유롭게 하고 싶다면 외주를 받아보는 것도 방법이다.(하지만 납기일과 계약 조건 관계를 생각한다면 일반적인 회사 생활과 크게 다르지 않다) 3-3. 사이드 프로젝트 진행개발자의 견습공의 패턴 중 부숴도 괜찮은 장난감만들기라는 이야기가 있다.개인적인 시간을 사용해야 하며 별도의 금전적인 이득은 없지만 내가 직접 처음부터 끝까지 다 직접 해보자 요즘은 사이드 프로젝트를 위한 다양한 커뮤니티가 많다. 예) 디프만, DDD, 멋사(직장인), 비사이드, 넥스터즈, DnD 등 4. 특화 학습: 취약점을 공략하라취약한 부분을 냉정하게 극복해나가라. 특화 학습 전략 피드백 순환 고리 만들기 학습의 병목 구간은 하위 단계로 분리하고 잘할 때까지 학습 배운 것들을 통합하여 맥락 정리 특화 학습 적용 시간 쪼개기: 짜투리 시간 활용 흉내내기: 시간 절약 돋보기 방식: 어떠한 한 가지 요소에 훨씬 많은 시간 쏟기 되돌아가기: 반복된 연습 4-1. 취약점 파악손자병법 중 적을 알고 나를 알면 백번 싸워도 위태롭지 않다는 말이 있다. 하지만 취약점 파악이 마냥 쉽지는 않다.이미 알고 있다고 착각하고 있기 때문이다. 누군가에게 내가 알고 있는 것을 설명하거나 가르칠 수 있는 기회가 있다면 그 착각이 깨진다.면접, 스터디, 멘토링 등을 통해 나의 취약점을 파악하자 (무지가 드러나는 것을 두려워하지 말자) 스스로 메타 인지 강화에 꾸준하거나 피드백을 기반으로 성장해왔다면 이 부분은 이미 극복하고도 남았을 것이다. 4-2. 계층 지식 활용지식의 계층을 만들고 무한하게 펼쳐보자즉 나의 지식을 지도 혹은 트리 등으로 만들어 구축해보자 위키 형태도 좋다. 그렇게 구축하고 나면 부족한 점이 눈에 보이고 채워야 할 부분이 눈에 보이기 시작한다. 4-3. 피드백 받아보기개발자 커뮤니티는 상당히 넓다.또한 환경이 좋은 회사에 재직 중이라면 회사에서도 피드백을 받아볼 수 있다. 짧은 주기로 자주 피드백을 받아보자 4-4. 이론과 실습의 경계책만 보는 사람, 클론 코딩만 하는 사람, 코드만 짜는 사람 내가 불편한 공부는 하고 싶지 않은 사람들이 생각보다 많다.나 대신 공부해주며 경험을 쌓아놓은 매체들이 많기 때문이다. 불편하더라도 파악한 취약점을 토대로 불편한 공부도 해보자 5. 인출: 배운 것을 시험하라자체적인 시험은 지식을 만드는 방식이며 정보를 적극적으로 기억하게 해준다. 수동적인 복습은 피드백을 받을 수 없다. 뽑아내는 고통을 겪어라 아직 배우지 못한 지식에 애쓰는 행위의 효과는 현실로 나타난다. 인출 방법 낱말 카드: 질문과 답을 짝지어 학습 자유 회상: 기억나는 것을 모조리 회상 문제집 방식 도전 과제: 스스로 도전할 과제를 만든다. 클로즈 북: 머릿속부터 탐색 5-1. 알고리즘 풀기개발자의 기본 소양 중 하나로 이만한 학습 수단이 없다.알고리즘을 푸는 방법이나 학습 방법에 대한 이야기만해도 한 트럭 나오겠지만 더 이상의 설명이 필요하지 않다. 알고리즘 자체가 이미 인출의 대표적인 모범 사례이기 때문이다 5-2. 지원하기회사나 다양한 교육 기관을 통해 시험을 치뤄본 경험은 개발자들에게 흔할 것이다. 알고리즘을 풀고 과제를 수행하고 면접을 본다.또 면접 중에 손 코딩이나 자신이 해왔던 경험과 지식을 잘 정리해서 인출해야 한다. 시작부터 끝까지 인출의 연속이니 두말할 것도 없이 최고의 인출 방법이다.향후 면접을 통해 나왔단 피드백을 정리한다면 취약점 분석과 복습에 큰 도움이 된다. 6. 피드백: 날아드는 조언을 피하지 마라자존심은 버리고 피드백을 이용하라 피드백이 마냥 좋은 것은 아니다. 피드백의 유형이 중요하다. 장래의 학습에 지침이 될 유용한 정보를 제공 부정적인 피드백을 이겨낼 수 있도록 적응을 돕는다. 피드백 유형 (최선의 피드백은 현재와 목표의 차이를 알려주고 더 잘할 수 있는 단계를 취하도록 돕는다.) 결과 피드백: 잘했다 or 잘못했다 정보 피드백: 잘하고 있다 or 잘못하고 있다 수정 피드백: 잘못하고 있는 것을 어떻게 고칠 수 있을까? 6-1. 면접 보기면접을 보면서 파악해야 한다. 필히 면접관의 반응과 피드백을 유도한다. 면접관이 갸우뚱하거나 시원치 않은 반응을 보인다면 그것이 신호가 아닐까 6-2. 그룹 스터디빨리 가려면 혼자 가고, 멀리 가려면 함께 가라.는 말이 있듯이 학습을 함께 해야 하는 경우가 생각보다 많으며 효과 또한 배가 될 수도 있다. 워낙 스터디의 방향이나 진행 방법이 다양하지만 피드백에 큰 도움이 될 수 있다. 피드백에 도움이 되는 스터디 참여형 스터디 토론형 스터디 피드백이 강제되는 구조의 스터디 함께 코드를 구현하는 프로젝트형 스터디 6-3. 오픈 소스 기여First Pull Request에서 첫 PR 기여가 있는지 검색해보자 아무런 검색 결과가 없다면 내가 오픈 소스에 전혀 관심이 없었구나 생각해보면 된다.대규모 오픈 소스거나 유명 오픈 소스가 아니더라도 작게 시작해보자 실력에 자신이 없다면 문서화나 꼼꼼한 번역 활동으로 기여를 해볼 수도 있고실력이 뛰어나거나 훌륭한 아이디어가 있다면 직접 만든 오픈 소스를 전세계에 공개해 반대로 PR을 받아보자 6-4. 배운 것을 공유하기블로그, 컨퍼런스 발표, 멘토링, 오픈소스 등 다양한 활동으로 배운 것을 공유해보자 대부분 청자보다 배운 것을 공유하는 공유자가 더 배우게 된다. 7. 유지: 새는 양동이에 물을 채우지 마라지금 당장이 아닌 평생 기억해야 할 것을 공부하라. 뇌는 처음 배운 것부터 망각한다 쇠퇴: 시간이 흐르며 망각 간섭: 새로운 기억이 과거의 기억을 덮어쓴다. 망각: 인출되지 않는 기억 기억 유지하기 공백: 기억하기 위해 반복 절차화: 절차화한 지식이 더 오래 저장된다. 초과 학습: 꾸준히 연습하고 제련 연상 기호: 기억의 연결 고리를 만든다 7-1. 기본에 충실하자개발을 학문으로 바라봤을 때 그 양과 깊이는 정말 방대하다.때문에 내재화하는 것도 어려운데 그것을 반복 학습하여 유지하는 것도 쉽지 않다. 변할 수 있는 기술인 프레임워크와 라이브러리에만 함몰되지 않도록 주의를 기울이자.CS 기초 지식을 쌓는 것에 충실하며 사용 중인 기술들을 잘 사용하며 동작 원리나 철학에 깊은 관심을 갖으며 기반 지식을 쌓아보자 7-2. 리듬 유지하기학습을 너무 타이트하게 가져간다면 번아웃에 빠질 수 있으며이후 극복에 실패한다면 번아웃이 지속될 수 있다. 극한의 학습 스케줄을 유지하는 대단한 사람도 있지만 그렇지 못한 경우가 더 많다.차라리 조금씩 꾸준히 유지하는 게 장기적으로는 더 좋다. jQuery의 창시자인 존 레식 또한 매일 코드를 작성하기 위해 의식적인 커밋을 하고 있다. 예) 1일 1커밋\u001e 8. 직관: 뼈대를 세우기 전에 깊이 파라개념과 기술을 탐구함으로써 직관을 길러라. 직관 기르기 어려운 문제라고 쉽게 포기하지 마라 대상을 증명하는 방식으로 이해하라 늘 구체적인 사례를 가지고 시작하라 자신을 속이지 마라 파인만 기법 전혀 이해하지 못할 때 문제를 해결하지 못할 때 직관을 확장할 때 8-1. Computer Science문제를 해결 과정에 경험이 크게 필요할 할 수 있다.하지만 절대적인 근간이 되는 CS을 뼈대로 잘 쌓아놓는 것은 경험만으로 가능한 범위가 아니다. 8-2. 의식적인 학습하기동일한 경험과 학습을 하더라도 가지고 있는 직관은 사람마다 천차만별이다.어떠한 대상에 대해 충분히 알지 못하고 추상적으로 이해한다면 알고 있다는 착각과 경험이 쌓이기 때문이다. 학습의 대상을 이해하는데 집요하게 파고들어 이해할 수 있도록 노력해야 한다. 예) 비유를 위한 사례, 시각화 8-3. 독서학습에 도움이 되는 매체들이 점점 늘어나고 있다.구글링이나 동영상 강의를 하거나 클론 코딩을 하며 인스턴트에 가까운 학습을 하게 되는 것이다. 때로는 학습 대상에 대해서 깊게 이해하기 위해 독서를 하는 것이다.(요즘 훌륭한 아티클이나 튜토리얼이 많지만)책에 쓰인 저자의 철학이나 관점이 주는 영감을 무시할 수 없다. 9. 실험: 자신의 안전지대 밖을 탐험하라 상상하지 못한 가능성들을 탐색해야 한다. 따라 하고 창조하기 비교하기 새로운 제약 도입 관련 없는 기술 결합하기 극단을 탐험하라 9-1. 극한에 도전하기성능 개선과 최적화 등에 도전하는 것이다.혹은 새로운 기술을 도입해보는 방법도 있다. 직접하기에서 언급했듯이 이기적인 방향이 아닌 꼭 필요한 실험에 도전해보자 9-2. TDD개발자에게 실험 정신은 중요하지만 이미 잘 돌아가는 코드를 뜯어고치는 것에는 큰 위험이 따른다. 마틴 파울러는 TDD 없는 리팩터링은 리팩터링이 아니라고 설명한다.극한에 도전하기 위해서 안전장치가 필요하다는 것을 잊지 말자 9-3. 학생 계정 및 프리 티어 등 다양한 제도 활용하기학습을 위해 돈이 드는 것은 무시할 수 없다.회사 지원 혹은 학생 지원을 잘 확인해서 비용을 아끼도록 한다. 마치며울트라러닝에서 제시하는 9가지의 학습 법칙을 개발자 입장에서 바라보고 정리해봤다.MIT 컴퓨터 공학 과정을 독학하던 저자가 정리한 법칙이라 그런지 개발자에게 적용되는 법칙이 제법 많았고 개발자 버전으로는 9가지가 아닌 6~7가지로도 줄 일 수 있겠다는 생각이 들었다. 배움의 길에는 왕도가 없다는 말이 있듯이 수많은 개발자들에게 배움이 어렵게 느껴질 수 있다 보니 배움의 강박에 시달리며 스트레스 받는 개발자들을 흔하게 볼 수 있다. 울트라러닝에서 제시하는 9가지의 학습 법칙 자체가 정답은 아니지만 스스로 학습 방법을 계속 정리하고자 글을 작성하니 매우 도움이 되었다.다음에는 작년에 큰 영감을 줬던 함께 자라기를 다시 한번 정독하고 나만의 학습 방법을 정리하고 루틴을 만들어보도록 해야겠다.","categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"}],"tags":[{"name":"learning","slug":"learning","permalink":"https://pocojang.github.io/tags/learning/"}]},{"title":"2020년 회고","slug":"2020-12-27-adieu-2020","date":"2020-12-26T15:00:00.000Z","updated":"2023-02-12T14:14:44.060Z","comments":true,"path":"2020/12/27/2020-12-27-adieu-2020/","link":"","permalink":"https://pocojang.github.io/2020/12/27/2020-12-27-adieu-2020/","excerpt":"2020년을 놓아주며 2020년을 어떻게 보냈고 앞으로 어떻게 활용할 것인가","text":"2020년을 놓아주며 2020년을 어떻게 보냈고 앞으로 어떻게 활용할 것인가 들어가며사실 회고 작성 자체를 좋아하는 편이 아니다.몇 년 후에 작성한 회고를 보면 워낙 오그라들기도 하고 뿌듯함보다는 반성이 가득한 회고를 작성하다 보니 머쓱함을 넘어 씁쓸함이 느껴지기 때문이다. 또한 회고의 결론은 내년에 더 노력하겠습니다! 선언하는데 잘 지키지 못하고 있다. 경력관리여러 가지 이유로 다니던 회사를 퇴사 후 재취업 활동을 진행했다.평소에는 조금 힘들더라도 재직 중에 이직을 추진했지만 이번에는 좋은 제안이나 기회가 보여서 일단 퇴사를 진행했다. 꽤나 많은 면접에 참여했다.면접 자체가 공부이며 배움이기에 도전할 수 있었고회사의 방향과 내 동기부여의 일치성을 맞춰보는 시간 자체가 흥미로웠다.테크 면접은 당연히 그 자체로 큰 실전이다. 면접을 보면 볼수록 오히려 자신감이 떨어졌다.그동안 실력에 비해 면접을 잘 보는 성향이라 좋은 결과로 이어진 경우가 많았는데이번 시즌에는 오히려 정반대였다. 확실히 안다고 생각하는 것도 제대로 표출하지 못했고 내 가치를 보여주지도 못했다.신입에 가까웠던 시절보다 질문에 대한 깊이와 수준이 올라갔고 그동안 쌓은 경력에 대한 증명이 필요했다. 면접 복기 후 확인된 문제점 깊이가 부족한 대답 심플하지 못한 논리와 설명 많은 지식이 정리되지 않은 채로 혼재 질문에 동문서답하거나 꼬리물기에 정신없이 횡설수설 명확히 알고 있는 것도 압박감을 느끼면 스스로를 의심하며 흔들림 퇴사 및 잦은 이직에 대한 압박 질문 대처 떨어진 자신감 꼭 위의 단점을 극복해야겠다. 결론적으로 2020년 재취업은 실패에 가까웠다.잦은 이직에 발목 잡힌 경우도 많았고 역량으로 이를 뒤집지도 못했다.애초에 회사가 원하는 기준에 개인 역량 자체가 부족했다는 근거이기도 하다. 또한 오래 일하며 기여하고 싶은 회사를 목표로 찾다 보니 더욱 고민이 많아 어딘가에 속하는 것에 대한 쉽사리 결정을 내릴 수 없었다. 독서 0. 자바스크립트를 말하다 (다독)가장 좋아하는 기본서 중 하나다.이미 본 책이지만 다시 한번 빠르게 훑어봤고 역시나 좋았다. JavaScript를 순전히 언어로만 바라보며 다시 한번 정리할 수 있었다. 1. 객체지향 자바스크립트의 원리 (다독)Nicholas C. Zakas 를 존경하게 되었다. 이것도 이미 본 책이지만 분량이 적어 아주 빠르게 다시 한번 훑어볼 수 있었다.얇은 책임에도 불구하고 내용은 얇지 않다. 2. 함께 자라기 (정독)원래 인기 있는 책이지만 개발자들 사이에서는 뒤늦게 입소문이 나며 핫했던 책 중 하나다. 성장을 다양한 관점에서 바라보며 생각할 수 있었고 핵심과 통찰을 넘어 수치적인 데이터로 성장을 설명한다. 보는 내내 흥미로웠고 성장을 대하는 태도와 행동에 대해 반성할 수 있었다. 3. 개발 7년차, 매니저 1일차 (정독)한빛미디어의 나는 리뷰어다 2020를 통해 읽어볼 수 있었다. 처음에는 제목과 표지가 내용이라는 어울리지 않았기 때문에 큰 기대는 하지 않았다. 하지만 막상 읽어보니 훌륭한 이력을 가진 Camille Fournier가 엔지니어에서 관리자로 성장하는 이야기를 배경으로 관리자가 대처할 수 있는 다양한 방법과 사례를 제시하며 꿀팁들이 매우 즐비한다. 해외 IT 현실과 우리나라 IT 현실은 상이하지 않을까 생각했는데 굉장히 비슷한 점이 많았고 나중에 관리자가 된다면 꼭 한번 다시 읽어봐야겠다는 생각이 들정도로 좋았다. 4. 울트라러닝 (정독)저자가 MIT 챌린지를 통해 엄청난 학습을 이뤄내며 정리한 9가지 법칙을 토대로 써 내려간 책이다. 함께 자라기를 읽은 다음 바로 읽어서 그런지 매우 흥미로웠고 성장과 학습에 대해 조금 더 구체적으로 생각하고 계획할 수 있었다. 5. 실전 리액트 프로그래밍 (정독)카카오페이지의 이재승님이 카카오페이지 웹 React 포팅 후기를 작성하시더니 책까지 출간하셨다. 실무와 경험에 철저히 입각한 내용이 대부분이라 오히려 도움이 되었다.하지만 코드를 함께 타이핑하지는 않고 책을 쭉쭉 읽어나갔는데 개정판까지 재출간되어 내년에는 개정판을 제대로 읽기 위해 다독에 도전해봐야겠다. 6. Hello Coding 그림으로 개념을 이해하는 알고리즘 (정독)분명 알고리즘 서적 중에서도 입문 수준의 책인데 이해가 쉽지 않았다. 그동안 알고리즘을 못 본 척 외면한 게 참 후회가 된다. 7. 웹 앱 API 개발을 위한 GraphQL (정독)회사에 GraphQL 도입을 고민하며 PoC 했던 적이 있었고 그때 가볍게 읽었던 책이다. 읽은 후 도입도 내용 정리도 하지 않았고 기억에 남은 것이 딱히 없다. 8. 리팩터링 2판 (정독 + 스터디)출시 전부터 엄청난 기대를 했던 책인데 1판이 어려우니 나중에 읽을까 고민만 하는 와중에 한빛미디어 측에서 책을 제공받았고 기왕 읽는 김에 제대로 읽어보자 싶어 스터디 그룹까지 참여하며 토론할 수 있는 시간을 가졌다. 개인적으로는 기대에 비해 만족스럽지는 못했다.전체적인 코드 베이스는 JavaScript로 작성되었으나 코드는 Java나 다름없다는 생각이 들정도로 Java의 철학을 억지로 씌우는 느낌이며 저자가 정리하고 명명한 리팩터링 기법이 너무 불필요한 게 아닐까 싶기도 했다. 하지만 몇몇 챕터는 굉장히 훌륭했고 개인적으로 리팩터링에 대한 정의를 다시 할 수 있었다. 스터디0. 멘토링직접 함께 일할 팀원을 뽑기 위해 발품을 뛰고 면접관을 하며 신입 혹은 인턴분들과 함께할 수 있는 기회가 있었다.과거에는 과외나 강의를 통해 누군가를 가르친 경험이 있지만 사내에서 누군가를 이끌고 가르쳐본 경험은 처음이었다. 생각보다 재미있었고 타인의 입장과 수준에 맞춰 지식을 이해하고 가정하는 것이 어려웠다. 어떠한 개념과 논리에 대해 서로 동등한 위치를 가지거나 알고 있다는 것을 전제로 토론하지 않기에 이런 프로토콜을 맞춰나가는 과정의 연속이었고 시간이 많이 들지만 멘토와 멘티가 동반 성장할 수 있는 좋은 시간의 연속이었다. 1. 부스트코스 코딩뉴비챌린지 - CS50너무나도 유명한 하버드 CS50 강좌를 부스트코스에서 플립 러닝 방식으로 참여할 기회가 있었다.그룹 스터디로 진행할 수 있었으며 스터디 리더로 사람을 모아 좋은 스터디원분들과 함께할 수 있었다. 이번에는 이상하게 네트워크와 웹 생태계를 다루지 않고 온전히 C언어에만 집중한 커리큘럼이라 막판에 흥미와 재미가 많이 떨어졌다. 2. 리팩터링 2판자바카페의 리팩터링 2판 독서 스터디에 참여했다.아주 흔한 독서 스터디 포맷으로 매주 정해진 분량을 학습 후 이에 대한 발표를 진행했다.지속되기 어려운 포맷이지만 스터디를 리딩해주시는 분들 덕분에 길고 험난한 여정을 끝낼 수 있었다. 3. 1일 1커밋카카오프로젝트100이라는 플랫폼을 통해 1일 1커밋을 어느 정도 달성했다.개발 쪽에 흥미로운 프로젝트가 보이지 않아 직접 1일 1커밋 프로젝트를 개설한 후 리딩했다. 처음으로 100일 이상 1일 1커밋을 수행할 수 있었고 이 과정에서 간단한 사이드 프로젝트를 2개나 만들었다. 좋은 습관과 인연을 만들 수 있었던 프로젝트로 다음에 또 함께할 수 있는 기회가 있으면 좋겠다. 4. 블랙커피프로그래머스라는 플랫폼과 유사한 스터디를 진행하는 곳이 있어 참여하게 되었다.이곳에서는 주로 도움을 주는 역할을 많이 수행했는데 훌륭한 에너지와 긍정적인 기운을 받아갈 수 있었다. 마지막으로는 코드 리뷰 도중 코드의 단점과 문제점만을 찾는 나 자신을 보며 회의감이 든 적이 있다.내가 뭐라고 남의 코드에 피드백을 할 수 있을까? 많은 생각을 할 수 있었다. 5. 수원 Front-end 개발자 모임생각보다 수원 Front-end 개발자가 많이 보이길래 한 평생 수원에서 살아온 추억과 로컬 커뮤니케이션을 도모하고자 모임을 만들었다. 하지만 다들 너무 바쁘고 코로나로 인해 동기부여를 잃어버리는 바람에 모임이 소홀했으나 코로나가 끝나면 로컬 커뮤니케이션을 다시 한번 일으켜봐야겠다. 경쟁률이 매우 치열했고 애매한 연차라 참여가 어려웠지만 운 좋게 참여할 수 있었다. 역시 김민태님의 강의는 견문을 넓히고 기술에 대한 색다른 시각을 깨우치는 데 도움이 된다. 7. 글또개발을 하는 것도 중요하지만 개발자로서 글을 작성하고 읽는 것에 관심이 많다.글또 이전에는 Post a Week이라는 블로그 챌린지나 블랙커피 블로그 글쓰기에 함께한 적이 있었지만 다른 업계 혹은 업종의 사람들과 함께하며 글에 대해 생각해 보고 싶었다. 글또의 수 많은 장점 중 이 부분이 끌렸고 아주 운좋게 합류할 수 있었다.사실 시기상 2020년 보다는 2021년에 더 활동할 예정이다. 오픈소스0. 로드맵 번역2018년부터 매년 Web Developer Roadmap을 번역했고 역시 2020년에도 하게 되었다.이제는 다른 분이 직접 원본 저장소에 PR 하는 것 같은데 애매하게 겹치게 되어 2021년부터는 어떻게 관리해야 할지 모르겠다. 1. TypeScript 번역몇 년 전 TypeScript 스터디를 진행하며 스터디원분들과 공식 문서를 직접 번역했다. 막상 번역할 때는 배우는 것이 많았지만 리소스가 많이 들다 보니 시간이 갈수록 관리가 안 되고 방치되고 있었다.역시나 이러한 문제점을 개선하기 위해 새롭게 번역하시는 분들이 계셨고 아예 관리하던 오거나이저를 넘길 수 있었다.(현재는 TypeScript 개발팀에서 공식적으로 번역 PR을 받고 있다) 사이드 프로젝트0. Nuxt Real World현재 재직 중인 곳에서 Nuxt를 처음 접하게 되었다.일단 코드를 인계받으며 리팩터링 과정을 가지려고 했으나다시 생각해보니 신규 스펙에 대한 요구 사항이 많고 이미 돌아가는 코드에 굳이 위험한 행동과 불필요한 리소스를 쏟을 이유도 없었다. 때문에 향후 적용을 위한 선행 학습을 위해 RealWorld를 진행했다.마침 Nuxt로 개발된 샘플이 존재하지 않아 오픈 소스에 기여해본다는 생각으로 Nuxt Real World에 도전했다. Vue Composition API와 Nuxt 그리고 TypeScript에 적응하고 있는 Vue &amp; Nuxt 생태계에 조금은 가까워질 수 있었고 회사에서 개발할 때도 어느 정도 방향을 잡고 진행할 수 있었다. 또한 오픈소스에 PR을 남겨놨는데 받아줄지는 모르겠다. 1. Recoil Todo지겨운 Todo 앱을 아주 간단하게 또 만들어봤다.쏟아지는 각종 Front-end 생태계가 이제 좀 잠잠해지나 싶더니 페이스북에서 새로운 상태 관리를 내놓고 말았다. 이번 만큼은 그냥 넘어가면 안 될 것 같지만 그렇다고 시간을 많이 투자하는 것도 옳지 않다고 생각해 아주 간단한 Recoil Todo 앱을 만들었다. React 팀이 Recoil을 만들어낸 이유가 궁금했었고 가지고 있는 철학이나 방향을 다시 한번 생각해 볼 시간이 필요했었는데 완전히 해결되지 않았지만 다시 한번 상기할 수 있는 프로젝트였다. 2021년 목표0. 나만의 퍼스널 블로그현재 Hexo 기반의 블로그를 운영하고 있는데 제대로 관리되고 있지 않다.간간이 아티클을 올리는 정도인데 블로그를 넘어 나를 표현할 수 있는 무언가로 만드는 것이 목표다. 현재는 도메인 구입 후 기획만 하고 있지만 1년을 목표로 차근차근 꾸준히 진행해봐야겠다. 1. 서비스 출시아이디어는 넘치는데 항상 의욕적으로 시작했다가 포기했다.주로 실패했던 이유는 회사 업무, 함께하는 동료들의 이탈, 완벽주의가 있다. 앞으로는 혼자 한다 생각하고 묵묵히 아이디어를 구현해야겠다. 2. 변하지 않을 지식과 깊이면접을 보며 피부로 부족함을 느꼈다.근 몇 년 동안 회사에 빠르게 적용하기 위한 인스턴트 학습법을 실행했고 변할 수 있는 무언가를 학습한 경험이 더 많다. 다시 돌아보면 신입 시절에는 이론을 파악하고 이해하는 것에 몰두하느라 입력 위주의 학습 방법에서 빠져 나오지 못했고무언가를 구현하는 입장이 되니 경험과 해결 방법이 모자라 다시 인출 위주로만 학습을 했다.입력과 인출의 조화를 이뤄야 했었는데 최근 몇 년의 경력을 쌓는 동안 신입 시절에 쌓아놓은 지식을 바탕으로 인출만 했던 게 큰 문제였던 것 같다. 이제는 조금 더 유연하고 능동적으로 학습할 필요가 있고 변하지 않을 지식에 더 깊이 다가갈 필요가 있다. 3. 영어분명 번역 활동을 할 때는 영어를 보고 읽는 것에 자신감이 생겼었는데번역 활동을 손에 놓고 나서부터는 부분 부분 번역기를 돌리며 빠르게 내용을 이해하는 것에만 몰두했고 영어를 이해하는 것에는 관심이 없었다. 극적인 노력과 변화는 힘들겠지만 의식적으로 듣고 읽는 것을 습관화해야겠다. 4. 책한 달에 한 권 읽는 것이 2020년 목표였으나 실패했다.다독을 합쳐서 2020년 한 해 동안 총 10권 정도를 읽었으니 너무 아쉽다. 2021년의 나의 독서 방법 주로 변하지 않을 지식에 대해 학습하기 다독하기 (한 가지 주제에 대한 여러 책 독서) 다독하기 (여러 차례 다시 읽기) 최소 한 달에 2권 독서 학습 방향의 우선 순위는 언제나 변하지 않을 지식이라는 것을 잊지 말자 5. 운동2019년 하반기부터 2020년 상반기까지 미친듯한 야근으로 몸이 안 좋아졌는데퇴사 후 몸이 좋아지나 싶더니 코로나로 재택 근무를 하며 몸이 더 안 좋아졌다. 건강한 몸에서 생산성이 향상되는 게 분명하다.조금이라도 더 이불에서 벗어나도록 노력해야겠다. 마치며어느 회사를 다니든 회사에서 받을 수 있는 것부터 생각했다.많은 것에 기여하고 도전하려 부단히 움직이긴 했지만 막상 누군가에게 좋은 영향을 끼치는 것보다는 타인에게 영향을 받는 것에 관심이 많았다. 그렇게 언제나 그렇듯 서비스와 프로젝트에 주는 영향에만 몰두했고 그것만이 본분이라고 생각했었다. 하지만 스타트업에서 팀 빌딩을 하던 중 다른 동료들의 성장과 업무를 도우며 팀원들에게 선한 영향력을 끼칠 수 있다는 것에 스스로 한 단계 나아감을 느꼈다.이제는 다수의 사람들에 많은 영향력을 끼치고 서비스와 프로젝트를 넘어 어느 한 곳에 소속되어 발자취를 남기고 싶다. 또한 개발자에 대한 키워드와 기술에 관심이 많았는데 이 부분은 당연히 잘해야 하는 덕목이고 앞으로는 서비스와 팀에 기여하는 방법에 관점을 가지며 다른 무언가에 또 도전하고 싶다. 그렇게 되려면 T자형 인재가 되어야 하는 데 이런 관심과 남기고 싶은 영향력들을 정리해 내년에는 단순한 개발자가 아닌 개발도 하고 또 다른 +@도 할 수 있는 개발자가 되고 싶다. 그만큼 훌륭한 역량과 퍼스널 브랜딩이 필요해보이고 2021년에는 이를 달성하기 위해 노력해야겠다. Reference 배너이미지","categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"}],"tags":[{"name":"2020 개발자 회고","slug":"2020-개발자-회고","permalink":"https://pocojang.github.io/tags/2020-%EA%B0%9C%EB%B0%9C%EC%9E%90-%ED%9A%8C%EA%B3%A0/"}]},{"title":"울트라러닝","slug":"2020-12-13-ultra-learning","date":"2020-12-12T15:00:00.000Z","updated":"2023-02-12T14:14:44.060Z","comments":true,"path":"2020/12/13/2020-12-13-ultra-learning/","link":"","permalink":"https://pocojang.github.io/2020/12/13/2020-12-13-ultra-learning/","excerpt":"세계 0.1%가 지식을 얻는 비밀 짧은 시간에 가장 완벽한 지식을 얻는 9단계 초학습법","text":"세계 0.1%가 지식을 얻는 비밀 짧은 시간에 가장 완벽한 지식을 얻는 9단계 초학습법 책 정보출판사 : 비즈니스북스저자 : 스콧 영역자 : 이한이출간 : 2020-02-12페이지 : 352ISBN : 9791162541289가격 : 16,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=16241103: http://www.businessbooks.co.kr/businessbooks/book_detail.asp?CATE1=&amp;page=1&amp;pageCode=best&amp;idx=394 소개우연히 페이스북에서 구독 중인 아웃스탠딩의 한 기사 (MIT 컴공을 1년 만에 독학으로 끝낸 문과생의 학습법)를 보고 홀린 듯이 아웃스탠딩의 정기 구독권을 결제해버렸다. 수많은 자기 개발서가 있고 IT 서적이 있지만 비전공자가 MIT 챌린지를 성공적으로 마무리하며 지속적인 배움에 도전한다는 게 매우 흥미로웠다. 저자 스콧 영은 MIT 챌린지 이후에도4개 국어 정복하기, 초상화 그리기 등에 도전했고 이제는 흔한 비전공자의 개발자 취업 이야기를 넘어 많은 괜찮은 학습법을 정의했다. 아웃스탠딩의 기사를 보고 책이 너무나 궁금하고 보고 싶었는데 때마침 번역본이 출간되어 빠르게 읽어볼 수 있었다. 울트라러닝의 9가지 법칙1. 메타학습: 먼저 지도를 그려라 어떻게 습득할지 조사한다. 2. 집중하기: 짧은 시간에 집중도를 높여라 집중력을 기르고 공부할 수 있는 시간을 빼둔다. 3. 직접 하기: 목표를 향해 똑바로 나아가라 잘하고자 하는 그 기술을 실행을 통해 배워라. 4. 특화 학습: 취약점을 공략하라 취약한 부분을 냉정하게 극복해나가라. 5. 인출: 배운 것을 시험하라 자체적인 시험은 지식을 만드는 방식이며 정보를 적극적으로 기억하게 해준다. 6. 피드백: 날아드는 조언을 피하지 마라 자존심은 버리고 피드백을 이용하라 7. 유지: 새는 양동이에 물을 채우지 마라 지금 당장이 아닌 평생 기억해야 할 것을 공부하라. 8. 직관: 뼈대를 세우기 전에 깊이 파라 개념과 기술을 탐구함으로써 직관을 길러라. 9. 실험: 자신의 안전지대 밖을 탐험하라 상상하지 못한 가능성들을 탐색해야 한다. 9가지 법칙 중 의문이 드는 것은 하나도 없다. 오히려 한마디 한마디 옳다는 생각이 드는 법칙이다. 요즘 한때 유행했던 1만 시간의 법칙을 따라도 전문가가 될 수 없다는 이야기가 숱하게 나온다. 얼마나 시간을 쓰느냐보다 같은 시간을 학습하더라도 의식적으로 학습하는 것이 중요하며 날이 갈수록 메타인지와 자기 객관화의 중요성이 대두되고 있다. 이 시점에 울트라 러닝 9가지 법칙이 꽤나 좋은 예가 아닐까 싶다. 실행력아무리 의식적으로 학습하고 다양한 방법을 실험하든 실천하지 않으면 무슨 소용일까? 저자는 아주 뛰어난 실천력을 가지고 있다.완전히 일을 벌이고 저질러버린다는 느낌까지 들 정도이다. 거기에 의식적인 학습을 놓지 않기 위해 노력하는 것이 포인트다. 결국 어떤 학습법으로 공부를 하고 법칙을 따르든 도전하고 몸소 실천하며 학습하는 것이 최우선이라는 걸 스스로 증명해냈다. 흔한 이야기이 책에 대한 평이 썩 좋지는 않다. 위의 9가지 법칙에 어디서 인가 들어봤을 법한 사례들을 더해 부연 설명을 늘어지게 하고 있으니누구나 알고 있는 옳은 이야기를 늘리고 늘려 과장시킨다는 의견과 불만이 많이 달린다. 다시 생각해보면 그걸 누가 몰라서 못해?!라는 생각이 들만한 내용이 대부분이기는 하다. 또한 말콤 글래드웰의 아웃라이어에 나오는 1만 시간의 법칙을 사례로 들며 의식적인 학습을 강조하는 내용이 꽤나 많은 자기 계발서 인용되고 있어 자기 계발에 관심이 많은 독자들에게는 반감을 살 수 있을만하다. 결론저자가 IT에 입문하기 위해 MIT 챌린지를 시작하며 엄청난 학습을 이뤄내며 9가지 법칙을 공식처럼 내놓았다. 언제나 말도 많고 탈도 많은 자기 계발서들 중 하나이지만 적어도 저자가 스스로 이뤄내며 증명한 초월한 학습법이라는 것은 변함 없기 때문에 그 자체로 충분한 가치가 있다고 생각한다. 다음에는 개발자 입장에서 울트라러닝 학습법을 접목하며 어떻게 실천할 수 있을지 정리를 해봐야겠다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"}],"tags":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/tags/book/"}]},{"title":"글또 5기를 시작하며","slug":"2020-11-15-geultto-5th","date":"2020-11-14T15:00:00.000Z","updated":"2023-02-12T14:14:44.060Z","comments":true,"path":"2020/11/15/2020-11-15-geultto-5th/","link":"","permalink":"https://pocojang.github.io/2020/11/15/2020-11-15-geultto-5th/","excerpt":"글또 5기를 시작하며 남겨보는 다짐글","text":"글또 5기를 시작하며 남겨보는 다짐글 글또 신청 사유동기부여빨리 가려면 혼자 가고, 멀리 가려면 함께 가라는 아프리카 속담이 있다.동기부여 없이 무언가 한다는 것이 쉽지 않다.또한 나 홀로 동기부여를 만들고 지켜나가는 것은 더욱 쉽지 않다.때문에 동기부여의 원천이 될 수 있는 함께 할 수 있는 사람들을 찾아 글또를 신청했다. 간절함이 부족한 것인지 나태하고 게으른 것인지 혼자서 실행하기에는 여전히 부족한 인간이다.여태까지 그래왔으니 너무 지쳐 포기하지 않으면서도 적당해서 부러지지 않을 수준의 강제성은 필수이다. 인사이트개발자로서 글을 작성할 수 있는 방법과 목적은 매우 다양하다.하지만 기술에 갇혀 오로지 그 기술을 해결하고 습득하기 위한 경우가 있는데글또에는 다양한 커리어를 가진 분들이 골고루 분포되어 있어편향된 글감이 아닌 다양한 글감들을 참고할 수 있다. 때문에 기술에만 집중된 테크 블로그가 아닌 나만의 퍼스널 블로그가 되어 글을 작성하는데다양한 영감과 통찰력을 받을 수 있지 않을까 기대해본다. 최근 관심사퍼스널 브랜딩나의 주변이 아닌 내가 이야기가 될 수 있는 그런 사람이 되어야 한다는 생각을몇 년 전부터 하고 있지만 아직 아무것도 실천하지 않았다. 다양한 글을 작성하며 생각을 정리할 필요가 있다. T자형 인재퍼스널 브랜딩 이전에 선행되어야 하며 병행으로 해야 하는 성장 아닐까 싶다.처음 개발을 시작할 때 시니어 개발자들은 엄청난 개발자가 아닐까 상상했다.언젠가 저런 연차의 개발자가 된다면 자연스럽게 잘하겠지.. 막연히 생각했다. 하지만 뒤돌아보니 그런 상상 모두 허상에 불과했으며 아무리 많은 시간이 흘러도 성장은 저절로 주어지지 않는다.성장통을 느낀 것은 사실이나 아직도 너무 부족한 것이 현실이다. 때로는 내가 RPG 게임 속의 캐릭터가 아닐까 싶다.주어진 시간이라는 경험치를 먹는데 시간을 허투루 쓴다면 경험치가 0에 가깝다. 하지만 시간은 한정적이고 앞으로 배우며 성장할 것은 점점 더 늘어만 간다.때문에 구루 개발자 같은 엄청난 역량의 개발자가 되는 것을 상상하기보다는전문성과 폭넓은 지식을 가진 엔지니어가 되는 것을 앞으로 가져가야 할 방향으로 설정했다. 글또에서 하고 싶은 것신청 사유 &amp; 최근 관심사 &#x3D;&gt; 글또에서 글을 작성하며 기반을 다지고 싶다. 유통기한 없는 글 작성하기Post A Week에 참여하며 다양한 글을 작성했으나돌아보니 시간에 쫓기며 마구 작성한 글들이 보여 씁쓸하다.앞으로는 과거에 작성했던 허접한 수준의 글을 다시 작성하지 않도록 주의해야겠다. 때문에 작성할 글감들을 대략 선정해놨고 분류해놨으니 이제 실천만 하면 된다!특히 기술에 대한 글을 쓴다면 최대한 유통기한이 없고 논리에 치중하지 않은 글을 작성하고 싶다. 블로그 새로 만들기글은 조금씩이라도 작성하고 있었지만 여전히 블로그는 방치 상태에 가깝다. 훌륭한 블로그 플랫폼도 많고 블로그에 부족함 없는 서비스를 만들 수 있는 툴도 넘치지만오래도록 사용할 수 있는 나만의 블로그를 꼭 만들고 싶다. 글또에 참여한 상황에 만들 수 있다면 더욱 의미있지 않을까 생각한다. 마치며최근 1일 1커밋 프로젝트를 진행하며 습관에 가까운 강박을 얻었다.커밋을 하고 자야 한다는 강박이다. 물론 아직은 제대로 된 습관을 형성한 것도 아니며 항상 의미있는 커밋을 하는 것은 아니지만결국 커밋을 하고 자야 한다는 생각을 시도 때도 없이 하는 궤도에는 올라왔다. 건전한 강박을 얻어내는 것은 성공했고 아직도 꾸준히 하고 있으니글또를 통해서도 건전한 강박과 습관을 형성해야 위에 나열해놓은 다짐들을 조금이라도 지켜낼 수 있지 않을까 싶다. 배너 이미지 https://alcrego.tumblr.com/post/94580799981/thinking-of-thinking-of-thinking-of-thinking","categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"}],"tags":[{"name":"글또","slug":"글또","permalink":"https://pocojang.github.io/tags/%EA%B8%80%EB%98%90/"},{"name":"글쓰기","slug":"글쓰기","permalink":"https://pocojang.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"}]},{"title":"우아한 테크러닝 3기 React & TypeScript 후기","slug":"2020-10-17-woowahan-tech-learning-3rd","date":"2020-10-16T15:00:00.000Z","updated":"2023-02-12T14:14:44.060Z","comments":true,"path":"2020/10/17/2020-10-17-woowahan-tech-learning-3rd/","link":"","permalink":"https://pocojang.github.io/2020/10/17/2020-10-17-woowahan-tech-learning-3rd/","excerpt":"우아한 테크러닝 3기 React &amp; TypeScript 정리","text":"우아한 테크러닝 3기 React &amp; TypeScript 정리 1회차강의 목표 수많은 주니어들이 스스로 잘 하고 있는지 고민과 의문에 도움을 주고자 한다. 네트워킹에 대한 욕심이 커 보인다 (코드리뷰, 사수, 피드백) 코드 품질 아키텍처 적정기술 동작은 하지만 설계가 옳은 것인지 김민태님 소개 90년대부터 개발한 아재 개발자 저수준을 바닥부터 구현했던 시절 도구와 학습의 관계 이제는 도구를 잘 사용하는 시대가 왔다 TypesScript, React 등등… 어떤 도구를 쓰더라도 원천을 이해하는 것이 가장 잘 사용하는 것이다. 만든 사람의 의도 혹은 솔루션 이러한 흐름을 놓치게 된다면 불편함에 놓이게 된다. 도구는 도구일뿐 사용하는 관점을 발견할 수도 있는 것 언어를 배울 때 경력과 실력에 상관없이 가벼운 학습 후 막힐 때는 구글링에 의존하는 개발자가 많은 것 같다 최근에는 조금 길더라도 읽기 쉽고 명시적인 코드를 선호하는 흐름 React &amp; TypeScript Type Alias 타입에 별명을 통해 의미를 부여할 수 있다 컴파일과 런타임 구분을 잘하자 타입스크립트를 쓰면 런타임까지 보장된다고 생각하지만 그렇지 않다 Babel React의 JSX를 트랜스파일링하는 역할을 한다 CRA 과거에는 웹팩부터 모든 설정을 직접 했었으나 미리 만들어진 템플릿을 사용할 수 있어진다 자신들만의 설정을 강요한다 개인적으로 프로덕션 앱을 만들때는 권장하지 않는 편이다 Eject는 너무 방대하기때문에 추천하기 어렵다 JSX 결국 React의 createElement문을 더 편리하게 사용할 수 있는 것 뿐이다. React.StrictMode React 개발을 하면서 생기는 문제 상황을 알려준다. Redux 과거에는 이것만 사용할때가 있었다 굉장히 간단하지만 그 간단함 때문에 어려워하는 측면이 있다 단순한 기능만 제공하는데도 복잡한 걸 하려니 굉장히 어려워지는 것 불필요한 행동이 많다 MobX Redux와 비교 대상이라고 보기 어려우며 대체품도 아니다 프로덕션 환경에서도 많이 활용되고 있는 상황이다 유연성이 주는 장점과 단점을 가지고 있다 Q &amp; A 회사에서 앵귤러를 사용하다 보니 초조하다 앵귤러가 가진 철학과 방향도 충분히 좋다 개발자라면 앵귤러만 했어도 상황에 따라 리액트를 습득해서 잘하면 된다 Context API 사용해도 되지 않는가 너무 많은 의존성이 생기면 당연히 좋지 않다. 페이스북 개발팀에서도 안내하고 있는 사항 아직 주니어인데 앞으로 어떻게 공부해서 성장해야 할지 모르겠어요 주니어가 시니어보다 유리한 점은 시간이 많고 여유가 있다 초조해하지 말고 여유를 가지며 의도적으로 훈련하자 2회차JavaScript Function of JavaScript 함수는 값이며 모든 값은 대입될 수 있다. 함수를 인자로 받아 해당 함수를 반환하는 함수를 1급 함수라고 한다. Closure 내부의 값을 캡처해놓는다 값을 보호할 때 사용한다 모듈 패턴이라고도 불리운다 새로운 형태에 현혹되지 말자 (어려운 개념) 심호흡을 하며 하나하나 분해해보는 용기를 가자 새로운 개념을 만드는 경우는 드물다 비동기 &amp; 동기 사람의 생각은 동기인데 코드의 동작 방식은 비동기라 어렵다 똑똑한 사람들이 어려울 때는 안 어렵게 만드는 방법을 찾아보다 Callback Function 비동기 코드를 동기 코드처럼 동작하도록 만들어본다. 중첩 CallBack 지옥을 가질 수 있다. Promise 내부의 스코프를 resolve를 통해 받아보는 것이 Closure와 같다 then 을 가진 인스턴스를 생성할 수 있다 Async &amp; Await async를 선언한 함수 await를 then처럼 사용할 수 있다 Q &amp; A 우형에 들어갈 수 있는 방법은 어떻게 되나요 6개월마다 지원 가능합니다 도전! 나이는 보지 않습니다 FE 코테는 어떻게 준비할까요 다들 준비해 줍니다 편하신 대로 하세요 FE가 UI도 해야할까요? (CSS 해야하는지) 앙꼬 없는 찐빵입니다 세미콜론 안 쓰는 이유는? 귀찮은 일은 기계를 시킵시다 프론트 자격사항은 다양하다 백엔드는 어느정도까지 준비해야할지 팁이 필요합니다 기승전 스프링과 그 외에 CS와 몇몇 구현체를 학습하는 게 중요하니 기본에 충실하는 걸 잊지 말아야 합니다 브라우저에 대한 공부 크로미움과 V8 소스를 까봐야 한다 자신의 수준을 먼저 알아야 한다 주화입마에 빠지지 않은 전략이 필요하다 프론트 개발자에게 CS 역량은 얼마나 중요할까요 결국 다 필요합니다 꾸준히 합시다 사이드프로젝트를 만들어서 볼륨을 키워보고 단계마다 전략학습을 해봅시다 클로저가 있는데 커링을 사용할 필요가 있을까요 인자를 나누는 것 어차피 거기서 거기다. 클로저에 대한 이해가 부족해 보인다. Redux Flux 아키텍처 이후로 완전한 주류가 되었다. VDom 알고리즘과 상호작용하기 좋은 구조다. 컴포넌트에서 상태를 바꾸지 못하도록 한다. 3회차 새로운 것을 습득할 때는 항상 공부할 것이 많이 보인다. 남들의 코드를 배우고 새로운 것을 읽히면 넓이만 추구하게 된다 이름만 잘 지어도 중간은 간다 JS의 객체는 원시 값보다 다루기 쉬운 구조다 WHY without 10년차 개발자 &lt; WHY with 10년차 개발자 WHY를 탐구하고 기본을 탄탄하게 다지자 &#x3D;&gt; 몸값으로 증명 공식 문서를 자주 보자 React 기본 개념 React는 단일 Virtual DOM을 가진다. DOM HTML 요소를 JavaScript로 다룬다. Virtual DOM DOM을 JavaScript로 더욱 쉽게 다룬다. React.createElement() Virtual DOM을 만든다 ReactDOM.render() Virtual DOM &#x3D;&gt; Real DOM React는 DOM에 의미를 부여할 수 있는 장점을 가진다. React 컴포넌트에 무언가 넘기는 방법은 Children &amp; Props뿐 React가 해주는 것과 트랜스파일러가 해주는 것을 구분해야 한다. 런타임 시점에서 일어나는 일과 컴파일 타임에 일어나는 일을 인지해야 한다. 성능에 문제가 없다면 일관성을 지키는 것이 굉장히 중요 React API Class Component 완전한 객체 구조 라이프사이클 통제 가능 Function Component 과거에는 컴포넌트가 호출될 때마다 상태가 생성되어 상태를 유지할 수 없었다. 라이프 사이클 및 상태를 가질 수 없다 기본적으로 계속 재 호출하는 형태로 구현되어 있다. Hook API 메커니즘을 이해하는 게 좋다 전역 배열로 관리되며 생성되는 순서에 맞춰 key로 부여 후 인덱싱 내부 코드를 모두 이해할 수는 없지만 컨셉적인 측면을 이해해야 도움이 된다 최상위가 아닌 부분에서 호출 &#x3D;&gt; 전역 배열에 문제 발생 &#x3D;&gt; 원치 않는 값 반환 가능 4회차개발자의 소통 의사소통시 프로토콜이 어긋나는 경우가 특히 많다 쏟아내는 방식의 일방적인 소통은 좋지 않다 높고 낮은 이해의 수준보다 상대방과의 수준을 맞추는 것이 중요 상대방이 이해할 수 있는 레이어 파악이 중요 Generator 코루틴의 구현체 function*, yield 키워드 사용 Generator, Promise, Async &amp; Await는 밀접한 관련이 있다 단순화된 일반화된 것들은 여러 방향으로 사용할 수 있어 어렵다 Redux-saga에서 사용됨 아키텍처 굉장히 거대한 것처럼 느끼지만 실제로는 작은 코드에서부터 시작 작은 코드에서부터 어떻게 아키텍처를 잡아갈지가 더 중요 거대해지기 전에 미리 쪼개자 Garbage Collector 엔진이 어떤 알고리즘으로 알아서 진행 Garbage 정리되지 않은 메모리 유효하지 않은 메모리 주소 Mark 객체의 참조를 찾는 과정 Sweep Mark 되어있지 않은 객체들을 제거 Hook API useEffect 렌더링 이후 내부 함수 호출 제어 불가능한 요소들을 주로 다룬다 실제 메모리에 관련된 것들을 해제해주지는 않는다. Hook 자체는 Closure가 아니다. 하지만 Hook을 사용할 때 당연히 Closure 캡처 5회차Redux 예측 가능한 상태 컨테이너로 상태 변화를 예측하기 쉽게 도와준다. 멱등성 수 회의 연산을 적용해도 같은 결과를 보이는 성질 Redux 로직을 실행할 때마다 결과가 다를 수 있는 경우가 존재 (비동기) 커링 함수 지연 호출 가능 인자와 인자 사이에 대해 개입 가능한 기법 Redux는 동기적 처리 흐름을 가진다 비동기 작업 처리를 위해 미들웨어 이용 미들웨어 Redux에서는 커링을 이용한다. 데이터가 처리 흐름 과정 중간을 거친다. 연결된 파이프 순서를 따르기 때문에 항상 같은 처리 흐름을 따른다. Redux Saga Side Effect event 관리 동작 메커니즘 Action &#x3D;&gt; 비동기 처리 &#x3D;&gt; Middleware &#x3D;&gt; Dispatch 디자인 패턴 Observer 객체의 상태가 변화를 구독 의존성과 결합도가 높다 모든 객체 상태를 구독받아야 한다. 동기 방식 Pub-Sub 낮은 결합도 비동기 방식 몽기 페칭 실행 중인 코드의 일부분을 런타임 상태에서 바꾸는 기법 함수도 값이기 때문에 다른 객체의 메서드를 가져와 자신의 것처럼 사용 메서드를 선언 시점이 아닌 사용 시점에 확장하는 것 공식문서 처음에는 무조건 봐야 한다. 1회 완독했다고 해서 이해된 것이 아니다. 대략 1&#x2F;3 이해한 정도 수많은 맥락과 배경지식을 전제로 하는 암묵적인 개념 파악 필요 6회차훈련 방법 엔진을 만드는 사람과 개발을 하는 사람 모두 알아야 하는 정보 어떠한 목표로 무엇을 배우고 있는지 항상 레이어 화해서 불필요한 학습시간을 최대한 줄이는 것이 좋다. Webpack 전부 Node에서 실행 프로젝트의 구조를 분석하고 모듈 &amp; 리소스들을 묶고 패킹하는 모듈 번들러 Loader (컨버팅) 미들웨어와 같은 역할 Plugin (후처리) loader보다 더 복잡하고 많은 일을 처리할 수 있음 보통 loader가 모두 실행된 후 실행 컴파일 사람이 읽는 코드를 기계어 코드로 변환 트랜스파일 사람이 읽는 코드를 사람이 읽을 수 있는 코드로 변환 7회차Promise 일종의 상태 머신이자 도구, 그리고 인터페이스 then 체이닝을 통해 작업을 연결할 수 있다 리액트를 사용하는 이유 개발하는 재미 사용하는 개발자들이 많음 높은 자유도와 취사선택 컴포넌트 구조 상태에 의존적인 컴포넌트와 그렇지 않은 컴포넌트 분리 비즈니스 로직 상태를 변경 시 상태에 대한 출처와 선택을 포함하는 코드들로 단지 props로 내려받는 것과 전혀 다름 Atomic Design Pattern 너무 조립적이다 유연성이 떨어진다 조직의 상황에 맞게 해야 한다. 구분의 기준 외부와의 관계를 어떻게 가지는지 외부와의 흐름을 어떻게 가지는지 컨테이너 데이터를 전달하는 역할로 로직을 포함 여러 하위 컴포넌트들을 결합 하나의 페이지를 구성 페이지와 1:1 or 1:N 구성 가능 UI 혹은 스타일 상태를 가지지 않는다 일반 컴포넌트 순수하게 역할에 맞는 렌더링 웬만하면 로직 없는 곳 코드 스플리팅 초기 로딩 최적화를 위함 화면을 뿌리는 단위 SSR 서버의 부하 고려 트래픽 및 인스턴스 고려 백오피스 구조 스케일은 크지만 복잡도는 낮은 케이스 폴더 구조 폴더 구조 자체가 디펜던시이다 바깥쪽에서는 네이밍으로만 소통하도록 해보자 Maybe Component Conditional Rendering 이용시 삼항연산자의 떨어지는 가독성 최소화 TypeScript 컴파일 타임에서의 검사이지 런타임에서 타입 검사를 하지는 않는다. Type Alias vs Interface 기능적으로는 굉장히 유사 개인적으로는 props &#x3D;&gt; Interface &#x2F; 그 외의 내부 데이터는 Type Alias Interface 외부에 노출시켜주는 느낌으로 사용 Type Alias 상태를 규격화 Generic 여러 타입에 유연하게 대응 Q &amp; A 개발자는 많지만 쓸만한 개발자는 없다 과한 패턴에 대한 집착은 유연성을 잃게 만든다 Redux는 MVC에 적합 MobX는 MVVM에 적합 포트폴리오는 주로 코드만 확인한다 이력서의 경력기술서로 실력을 검증할 수 없다. 구조에 대한 고민 상태에 대한 고민 마크업을 잘할 수 있다고 말할 수 있는 조건 시멘틱에 대한 이해 2D화면에서 Geometry의 이해 나누는 것은 관심사의 분리로 생각하는 것이 좋다 새로운 기술을 공부하는 방법 공식 문서 정독이 기본 이해하지 못한 것과 이해한 것들을 확인하는 과정이 필요 8회차Router URL과 Component를 매칭시켜준다. Hash Router는 잘 사용되지 않는다. MobX Observable, Observer 등의 용어가 학습을 매우 힘들게 한다. Primitive 타입의 변경은 알 수 없다. Singleton 패턴을 자주 사용 autorun 상태가 바뀌면 내부의 함수 호출 Action 논리적인 작업 단계 Flow 비동기 작업 MobX vs Redux Redux 개인적으로 선호한다 MobX 실수하기 쉬운 환경을 제공한다 쉽지만 블랙박스 같은 느낌이 있다 무언가 분석할 때는 가장 만만한 녀석들부터 분석한다 테스트 성공하는 테스트 반드시 성공해야 한다. 실패하는 테스트 반드시 실패해야 한다. 규모가 커질수록 복잡도가 늘어진다면 의존성 문제다 마무리원래 오프라인 30명 정도를 선발하려했 으나 코로나 때문에 500명가량을 선발했다고 한다.(애매한 중니어 경력이라 운이 좋게도 참석할 수 있었다) 김민태님의 강의는 언제나 견문을 넓히는 좋은 조언을 들을 수 있어 좋다.기술적인 이해나 접근보다는 내가 했던 고민과 앞으로 할 수 있는 고민에 대해 또 다른 시각으로 바라볼 수 있는 계기가 되어 매우 값진 시간이었고 코로나가 나아진다면 오프라인에서 또 다시 좋은 기회가 있기를 바란다. 관련 링크 https://gist.github.com/ibare/1ed63de0c09c94a7ac79713d57b80f8d https://gist.github.com/ibare/c736f63fba835c172e60aa98a996dada https://gist.github.com/ibare/c7020756170aa7ed3d1cc84f86972409 https://gist.github.com/ibare/0eb8597551070bf1ebf8e797439913a3","categories":[{"name":"programming","slug":"programming","permalink":"https://pocojang.github.io/categories/programming/"},{"name":"react","slug":"programming/react","permalink":"https://pocojang.github.io/categories/programming/react/"}],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://pocojang.github.io/tags/TypeScript/"},{"name":"React","slug":"React","permalink":"https://pocojang.github.io/tags/React/"}]},{"title":"모던 스타트업","slug":"2020-09-27-modern-startup","date":"2020-09-26T15:00:00.000Z","updated":"2023-02-12T14:14:44.059Z","comments":true,"path":"2020/09/27/2020-09-27-modern-startup/","link":"","permalink":"https://pocojang.github.io/2020/09/27/2020-09-27-modern-startup/","excerpt":"팀 생산성을 높여주는 21가지 도구와 서비스","text":"팀 생산성을 높여주는 21가지 도구와 서비스 책 정보출판사 : 한빛미디어저자 : 이기곤출간 : 2018-08-20페이지 : 300ISBN : 9791162241059가격 : 20,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=13884289: http://www.hanbit.co.kr/store/books/look.php?p_code=B1211451725 소개스타트업을 운영하며 필요한 도구와 서비스를 요약해주는 모던 스타트업을 리뷰하게 되었다. 나름 얇은 책이라 부담없이 가벼운 마음으로 읽어볼 수 있어 빠르게 훑어볼 수 있었다. 맥락 파악에 훌륭스타트업 창업 3 ~ 5년내 폐업률이 70~80%에 육박한다. 하지만 스타트업은 아직도 쏟아져 나오고 있고좋은 프로덕트 좋은 회사를 만들어보지도 못하고망하는 스타트업이 많다는 증거이다. 스타트업은 빠르게 프로덕트를 만들어 투자를 받든가 캐시 카우를 하며 증명해내야 한다. 이러한 상황에 프로젝트, 인프라, 서비스 등을 관리하지 않고 신규 개발에만 집중할 수 있을까? 그러기가 쉽지 않다 누군가는 지속적으로 관심을 가져줘야 한다.그래야 신규 개발 속도도 빨라지고 지금 하는 일을 더 잘할 수 있기 때문이다. 이 책에서는 그러한 관점에서 다양하고 넓은 범위에서 다양한 사례와 케이스를 소개해준다. 즉 이러한 고민할 시간을 꽤나 많이 줄여줄 수 있다. 도구 지향적 방향G Suite, Dropbox, Slack, GA, Jira, Github, Zeplin, AWS, Docker 등을 소개하는데팀 혹은 간단한 프로젝트를 운영하는 데 있어서 당연하게 사용하는 것들도 많이 있고이런 수많은 도구들을 빠르게 설명하고 요약해준다.물론 이건 왜 있을까? 싶은 특이한 것들도 있다. 특히 Notion 같은 경우에는 특이할 정도로 국내에 유독 인기가 많은데(물론 이 책이 작성되고 출판할 때는 이 정도 인기가 아니었다)역시나 스타트업에서 큰 인기를 끌었고 그만큼 스타트업에서 넘치는 도구가 있음에도 불구하고Needs가 존재했다는 방증 아닐까 싶다. 아무튼 결론적으로 이 책은 오로지 도구와 프로덕트를 출시하는 A to Z 기술적인 관점으로 가득하다. 때문에 다양한 팀원 간에 올 수 있는 갈등이나 성과 측정 그리고 멘탈리티적인 측면이 없기 때문에이런 부분을 기대하고 책을 읽어보려는 독자들에게는 타겟이 맞지 않다. 운영보다는 빌드업 개인적으로 가장 마음에 들었던 부분인 부록 결론 CTO가 읽기에는 굉장히 모자르고 CEO가 읽기에는 기술 지향적이며 CPO가 읽기에는 프로젝트 관점에서 그나마 낫다 싶은 느낌이다. 바꿔 말하자면 굉장히 넓은 현대 웹 생태계에서 빠르게 프로덕트를 출시하기 위해 달려나가는스타트업의 팀원 그 누구에게나 얕은 지식을 배양해줄 수 있다. 다양한 독자들의 식견에 맞춰 정보가 다르게 느껴질 수 있다. 그 다음 스테이지로 안내해줄 수 있는 좋은 길잡이가 되지 않을까? 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"}],"tags":[{"name":"start-up","slug":"start-up","permalink":"https://pocojang.github.io/tags/start-up/"}]},{"title":"하버드 첫 강의 시간관리 수업","slug":"2019-12-01-harvard-time-management","date":"2019-11-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.058Z","comments":true,"path":"2019/12/01/2019-12-01-harvard-time-management/","link":"","permalink":"https://pocojang.github.io/2019/12/01/2019-12-01-harvard-time-management/","excerpt":"하버드에서 시간을 관리하는 방법","text":"하버드에서 시간을 관리하는 방법 책을 보게된 이유어느 정도 규모있는 회사에서 스타트업으로 이직 후 수많은 시련과 좌절을 하게 되었다. 정말 빠르게 프로덕트를 내야 하는 상황에서 일정에 대한 압박은 주말의 휴식조차 앗아가 버렸다.주말임에도 불구하고 어떻게 업무를 하고 개발을 해야 빠르게 개발을 할 수 있을까 머릿속에 몇 번을 되뇌었다.결국 쉬는 것 같지도 않고 월요일을 맞이하면 푹 쉬지 못한 주말이 이어지다 보니 번아웃의 연속이었다. 그러던 어느 날 SNS를 통해 하버드 첫 강의 시간관리 수업이라는 책의 리뷰를 보게 되었고바로 서점을 향해 달려갔다. 1. 무엇이 당신의 시간을 빼앗는가?내 시간을 지키는 방법을 알아야 한다. 업무과부화가 있는 것인가? 툭하면 일을 미루고 있는 게 아닌가? 행동 버려지는 시간 계산 시간 사용 기록하기 2. 효율적인 시간관리 목표를 정하라목표가 있어야 시간을 제대로 쓴다 목표 설정 행동으로 옮기기 행동 목표를 정했다면 무조건 실천한다. 우선순위를 정하여 움직이자 파레토 법칙 이용하기 3. 나만의 시간관리표를 만들자완벽주의에 의한 나쁜 영향 피하기 효율적인 업무에 집중 완벽주의는 얻는 것보다 잃는 것이 더 많다. 행동 완벽보다는 규칙적으로 생활하자 완벽에 대한 고집을 버리고 평정심을 유지하자 4. 권한부여와 업무 위임은 더 효율적으로 시간을 이용할 수 있다업무 위임은 시간관리에서 가장 효율적인 수단이다 이미 끝낸 업무를 학습의 기회로 삼아야 한다. 영향력이 높은 일은 효율적이면서 가치가 높은 것을 선사한다. 행동 처음부터 확실한 규칙과 기대를 설정하자 업무 위임을 잘하기 위해서는 의사소통부터 잘해야 한다. 간단 명료한 설명이 필요하다. 5. 업무시간관리 장애 극복주어진 환경에서 최선을 다하자 미루는 태도는 꼭 고쳐야 하는 나쁜 습관이다. 정말 똑똑한 사람은 다른 사람의 힘을 빌려 자신의 일을 처리한다. 행동 책상 정리하기 잡무는 과감하게 덜어내기 아이젠하워 원칙 이용하기 6. 효과적으로 업무 효율을 높이는 시간관리 방법시간을 효율적으로 이용하는 사람들은 자투리 시간도 잘 활용한다. 회의조차도 효율이 중요하다. 인터넷을 이용해 많은 정보를 활용하지만 많은 시간을 잃는다. 행동 자투리 시간 활용하기 언제나 업무에 효율을 찾아보기 7. 업무와 일상생활의 균형 맞추기직장 생활로 인해 당신의 가정생활이 망가지고 있는가? 업무태도는 잠재력을 올려줄 수 있다. 일하는 게 행복한 워커홀릭은 더욱 더 주의를 해야한다. 행동 업무와 휴식을 적절히 분배하여 컨디션 유지하기 수면과 감정 컨트롤에 항상 신경 쓰기 느낀 점하버드와의 연관성이 느껴지지 않아 실망이었지만애초에 하버드가 아닌 시간이 관심사였기에 부담은 없었다. 결과적으로 업무에 대한 효율과 규칙그리고 매우 정확한 목표를 수립해야 시간관리를 할 수 있다고 느꼈고 책 내용 대부분에 거부감 없이 동의하며 술술 읽을 수 있었다.케이스별 스토리 사례들은 크게 와닿지 않았지만 그냥 이렇구나 정도로는 읽을만했다. 시간을 지키는 방법도 결국은 실천이다. 마무리나쁘지는 않았지만 조금 애매한 책이다. 옳은 말말 구구절절 모으고 그럭저럭 괜찮은 사례와 실천법을 정리했다. 또한 타이틀에 하버드 네이밍을 사용할 자격이 있는 책일까 고민하게 만든다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"}],"tags":[{"name":"시간관리","slug":"시간관리","permalink":"https://pocojang.github.io/tags/%EC%8B%9C%EA%B0%84%EA%B4%80%EB%A6%AC/"}]},{"title":"리액트를 다루는 기술","slug":"2019-11-20-technique-react-book","date":"2019-11-19T15:00:00.000Z","updated":"2023-02-12T14:14:44.058Z","comments":true,"path":"2019/11/20/2019-11-20-technique-react-book/","link":"","permalink":"https://pocojang.github.io/2019/11/20/2019-11-20-technique-react-book/","excerpt":"벨로퍼트님의 리액트를 다루는 기술","text":"벨로퍼트님의 리액트를 다루는 기술 책 정보출판사 : 길벗저자 : 김민준 (벨로퍼트)출간 : 2019-08-31페이지 : 908ISBN : 9791160508796가격 : 42,000원 자세한 정보: https://book.naver.com/bookdb/book_detail.nhn?bid=15372757: https://www.gilbut.co.kr/book/view?bookcode=BN002496 시작하며국내에서 리액트를 공부한다면 한번쯤은 들어보게되는 스타 강사 김민준(벨로퍼트)님의 책을 운좋게 수령하여 리뷰하게 되었다.(그것도 무려 개정판!) 사실 이전에 개정판을 지인에게 빌려 급한대로 읽은 적이 있었는데읽고 보니 이건 개정판 수준이 아니라 무려 확장판이 아닐까 싶을정도로 내용이 더 많아졌다. 확장판 같은 개정판 분량 증가: 688P &#x3D;&gt; 908P (가격도..) 내용 추가: Hooks API, Context API, Redux Saga, Immer, JWT.. 등등 이외에도 실습 예제 개선이 이루어졌다고 하는데 사실 큰 차이는 느끼지 못했다.오히려 책 소개에 나오는 개정판 추가된 내용에 명시되지 않은 것들 중 추가된게 꽤 많았다. 친절함독자에게 얼마나 많은 내용을 알려주고 싶은지 그 욕심이 숨겨지지 않는 책이다. 1. 100% 풀컬러 2. Flow 정의 3. 소스 코드 컬러 하이라이팅 4. 도식화 엄청난 친절함에 독자들을 위해 얼마나 노력을 했는지 책장을 넘기면서 피부로 느낄 수 있었다. 코드 하이라이팅과 100% 풀 컬러를 넘어서 매 챕터마다 Flow 정의와 도식화가 빠지지 않는다. 풍부한 예제와 사이드 프로젝트새로운 개념과 새로운 챕터에 들어갈때마다 이해를 돕는 예제를 진행하고중간 중간 구현을 통한 사이드 프로젝트를 진행한다. 이론 및 개념 &lt;&#x3D;&gt; 사용법 &lt;&#x3D;&gt; 예제 &lt;&#x3D;&gt; 구현 (사이드 프로젝트) 구현이 아닌 사이드 프로젝트라고 설명한 이유는 구현을 넘어서 책을 톨해 웹 앱을 만들어 나가기때문이다. 그냥 따라치는 타이핑 수준의 공부 방법으로는도움이 되지 않겠지만 한장 한장 꼼곰히 공부하면서 따라하다보면 큰 도움이 될 것 같다. 리액트를 넘어서단순히 리액트를 넘어서 리액트 생태계까지 습득할 수 있고리액트 생태계를 넘어서 프론트엔드 개발 생태계 영역에 많은 것을 배울 수 있다.그리고 프론트엔드 개발 영역을 넘어서도 웹과 간단한 백엔드 개발도 경험할 수 있다. 아쉬운 점 소개와는 다르게 초보 혹은 입문 수준의 실력자라면 읽기 힘들 것 같다는 느낌을 받았다. 이후에도 개정판이 또 나올게 분명해보일정도로 리액트의 변화가 예상되는 부분이 있다. 마무리100점 만점에 100점을 주고 싶은 책이다.분량이 굉장히 많아 주어진 리뷰 기간에 책을 다 읽지는 못했지만아예 개인 시간을 다 비우고서라도 책을 끝까지 읽고 싶을 정도로 근질거린다. 한때 이미 출간일이 많이 지난 리액트 번역서와 많지 않은 자료들을 보며힘든 나날을 보냈던 시절이 있었는데 이제는 이재승님의 실전 리액트 프로그래밍 이나지금 리뷰를 작성하는 리액트를 다루는 기술을 보며 국내 개발자분들이 해외 번역서 부럽지 않은 훌륭한 책을 써주셔서 너무 감사하다는 생각이 들었다. 이 서평은 출판사 길벗을 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"}],"tags":[{"name":"react","slug":"react","permalink":"https://pocojang.github.io/tags/react/"},{"name":"velopert","slug":"velopert","permalink":"https://pocojang.github.io/tags/velopert/"}]},{"title":"나는 LINE 개발자입니다","slug":"2019-10-13-line-developer","date":"2019-10-12T15:00:00.000Z","updated":"2023-02-12T14:14:44.058Z","comments":true,"path":"2019/10/13/2019-10-13-line-developer/","link":"","permalink":"https://pocojang.github.io/2019/10/13/2019-10-13-line-developer/","excerpt":"라인의 개발 고수 12인의 도전과 기회, 성장의 개발 라이프","text":"라인의 개발 고수 12인의 도전과 기회, 성장의 개발 라이프 책 정보출판사 : 한빛미디어저자 : 강윤신, 김영환, 김재석, 김정엽, 김택주, 노승헌, 박민우, 배권한, 이서연, 이승진, 이홍규, 하태호역자 서환수출간 : 2019-09-02페이지 : 252ISBN : 9791162242162가격 : 16,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=15372183: http://www.hanbit.co.kr/store/books/look.php?p_code=B3137155711 뻔해 보였지만 뻔하지 않은 이야기사실 이전에 출간되던 위키북스의 NHN은 이렇게 한다 시리즈의 시작이 아닐까 생각이 들었다. 또한 다양한 글로벌 혹은 국내 유명 기업들이 사내의 개발 문화 알리기 위해 앞다투어노력 중이고 그중에서 LINE 또한 많은 노력을 하고 있다는 것을 알기에뭔가 뻔한 내용은 아닐까생각도 들었지만 얇은 페이지수 에 흥미롭게 읽히기 시작하였다. 소속은 같지만 전혀 다른 12명의 개발자LINE에서 일하는 개발자들의 다양한 이야기와 성장과정 그리고LINE에서의 기회를 도전과 성장으로 이뤄낸 스토리를 담고 있었다. 백엔드 개발자, 오픈 소스 매니저, 테크 에반젤리스트, 블록체인 서비스, 보안 엔지니어 등등 다양한 직군의 개발자그리고 주니어부터 CTO 급까지 다양한 연차에 개발자들의 이야기를 이 얇은 페이지에 핵심만 재미있게 녹여냈다. 결론LINE 개발자라는 타이틀이 있기에 LINE이 추구하는 지향점이나 문화가 언급되지 않을 수는 없다.하지만 LINE 타이틀이 무색할 정도로 전혀 부담 없이 가볍게 읽을 수 있었으며 오히려 LINE보다는 다양한 개발자들의 스토리에 초점이 맞춰져있다보니12인의 개발자들이 어떻게 성장해왔고 어떻게 일하고 있는지 체감할 수 있었다. 이미 충분히 성공한 혹은 충분히 유명한 네임드 개발자들의 성장 스토리와 조언만 읽어보다가아직 필드에서 현재 진행 중인 다양한 직군과 연차의 개발 라이프를 겪어본다는 점,다양한 도메인과 직군 그리고 연차까지 엮어내기가 쉽지 않은데 이런 얇은 책 한권 으로 가볍게 접할 수 있어 매우 인상 깊게 읽을 수 있었다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"}],"tags":[{"name":"LINE","slug":"LINE","permalink":"https://pocojang.github.io/tags/LINE/"}]},{"title":"개발자의 공부하기","slug":"2019-08-25-learning-developer","date":"2019-08-24T15:00:00.000Z","updated":"2023-02-12T14:14:44.058Z","comments":true,"path":"2019/08/25/2019-08-25-learning-developer/","link":"","permalink":"https://pocojang.github.io/2019/08/25/2019-08-25-learning-developer/","excerpt":"두고두고 읽기 위해 요약하는 개발자의 공부하는 방법","text":"두고두고 읽기 위해 요약하는 개발자의 공부하는 방법 이 글은 코드스피츠 S68 강의 중 나온 비사이드소프트 Hika Maeng님의 조언 일부(00~25분)를 요약하고 정리한 내용입니다. 1. 개발을 잘하지 못하는 이유 공부에 충분한 시간을 투자하지 않고 구글링을 통한 Copy &amp; Paste 경력만 쌓는다. 2년.. 3년.. 5년을 공부해도 Copy &amp; Paste를 통한 얕은 코드 밖에 작성하지 못한다. 절대 높은 연봉의 개발자가 될 수 없다. 어려운 컴퓨터 학문 뒤늦게 탄생했지만 가장 빠르게 발전하고 있다. 생활 속에 굉장히 밀접한 관련을 가지고 있다. 2. 공학도와 비공학도의 이해도와 러닝 커브의 차이 어려운 학문임에도 불구하고 할 게 없어서 입문하는 경우가 많다 때문에 마음속에서 개발을 얕보고 있는 경우가 많다. 비전공 IT 입문자는 대부분 문과생 범위 위주 학습에 익숙하여 공부하는 스타일을 바꾸지 못한다. 수포자가 되는 이유와 비슷하다. 이제 와서 수학을 공부하려고 하니 기초부터 다시 해야 한다. 다른 과목은 범위만 공부하면 되는데 수학은 중학 수학부터 다시 해야 한다. 3. 유혹과 꾐 처음부터 공부에 단축 길은 없다. 눈에 보이며 따라 하기 쉬운 교육 컨텐츠만 찾는다.예) 1시간 만에 XX 앱만들기, 한달 만에 배우는 XXX, 3개월 만에 XXX 개발자로... 평생 따라 하기만 하게 된다. 따라쳐서 만들어봤자 어차피 내 것은 아니다. 4. 완벽히 이해하고 넘어가자. 1장을 이해하고 2장으로 2장을 이해하고 3장으로 넘어가야 한다.예) A가 B이고 B가 C이기 때문에 A가 C이다. 완벽히 이해될 때까지 넘어가서는 안된다. 함수를 공부할 때는 변수를 잊고 객체를 공부할 때는 함수를 잊는다. Copy &amp; Paste가 아닌 머릿속에 있는 것을 꺼내는 지식 체계를 갖춰야 한다. 계속해서 바닥 수준의 낮은 공부만 하게 되고 수준 높은 공부를 할 수가 없다. 5. IT를 컴퓨터라는 어려운 학문임을 인지하여 태도를 바꾸자 어렵다 그래서 더 노력해야 한다. 일과 휴식의 분리는 어렵다. 많은 시간을 개발 공부에 쏟아야 한다. (워라밸 챙기다 공부할 시간 놓치지 말자) 적은 시간으로 개발자가 될 수 있는 얕은 학문이 아닌 깊은 학문이다. 공부할 것은 매일 같이 쏟아지기 때문에 이를 체계적으로 학습해야 한다. 6. 컴퓨터 과학 기초부터 차근차근 체계적으로 공부해나가자 동작 원리를 파악해야 한다 하다보면 언젠가 깨우치겠지 하다가는 몇 년이 되어도 깨우칠 수 없다. 7. 책의 모든 문장과 단어를 이해할 때까지 그 책은 읽은 것이 아니다. 절대 넘어가지 말고 단어 하나하나 이해하자 넘어가서 되는 것은 하나도 없다. 다 알아야지만 이해한 것이다. 입구는 중요지 않다 한 우물을 제대로 파자 한 책을 10번 보는 것이 여러 가지 책을 읽는 것보다 낫다. 이것저것 얕게 파봐야 아무 소용 없다. 하나의 책이라도 모두 이해해가면서 완독하자 1층에서 2층으로 지식 체계를 쌓아올릴 때 여러 방이 아닌 하나의 방에서만 쌓아올라가면 된다. 8. 세계 최고의 장인(기술사)가 되자고 생각해보자 하루 8시간 일해서 이 방대한 학문의 훌륭한 개발자가 될 수 없다. 진지하고 꾸준하게 많은 시간 투자를 하자 주변의 훌륭한 동료들은 이미 나보다 많은 시간을 투자한 사람들이다. 9. 괴롭고 힘들어도 자신의 길을 구축하자 2층에 사는 개발자가 되자 회사에서 불러주기 때문에 회사를 골라갈 수 있다. 자리를 만들어줘서라도 훌륭한 개발자를 데려온다. 끊임없이 좋은 조건으로 회사를 돌아다니는 플레이어가 된다. 스타트업이 망하는 이유는 이런 핵심 개발자를 구하지 못해 서비스를 구현할 수 없기 때문이다. 10. 희망과 지옥 지옥 막대한 시간과 투자 체계성 있는 교육 많은 인내심 희망 사회적으로 유니크하다. 수요가 많다. CSS 렌더링 방식에 대한 이해를 위해 코드스피츠 강의를 보다가 동기부여를 얻게 되어 요약하게 되었고 지금 얻은 이 동기부여를 잃지 않도록 노력해야겠다.","categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"}],"tags":[{"name":"개발자","slug":"개발자","permalink":"https://pocojang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"},{"name":"공부","slug":"공부","permalink":"https://pocojang.github.io/tags/%EA%B3%B5%EB%B6%80/"}]},{"title":"프로그래밍 면접 이렇게 준비한다","slug":"2019-08-09-programming-interviews-exposed","date":"2019-08-08T15:00:00.000Z","updated":"2023-02-12T14:14:44.058Z","comments":true,"path":"2019/08/09/2019-08-09-programming-interviews-exposed/","link":"","permalink":"https://pocojang.github.io/2019/08/09/2019-08-09-programming-interviews-exposed/","excerpt":"면접에서 코딩하라면 깜짝 놀라는 당신을 위한 책! 면접을 앞둔 프로그래머를 위한 종합 안내서","text":"면접에서 코딩하라면 깜짝 놀라는 당신을 위한 책! 면접을 앞둔 프로그래머를 위한 종합 안내서 책 정보출판사 : 한빛미디어원제 : Programming Interviews Exposed저자 : 존 몽건, 노아 킨들러, 에릭 기게리역자 : 서환수출간 : 2019-07-04페이지 : 568ISBN : 9791162241998가격 : 28,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=15064639: http://www.hanbit.co.kr/store/books/look.php?p_code=B6503680425 면접 백과 사전 원제 표지 디자인 개발자는 다른 직종과는 다르게 정형화시킬 수 없을 정도로 다양한 면접 프로세스를 거칠 수 있다. 전화 면접, 화상 면접, 코딩 테스트, 알고리즘 시험, 과제 등을 통해 실력을 검증하는 자리는 기본이며협업을 위한 인성 면접 그리고 최종적으로는 처우 협의를 위한 연봉 협상까지 해야 한다. 실력이 출중한 개발자라면 가만히 있어도 여기저기서 입사 제의를 하겠지만이직에 대한 확고한 의지를 가진 개발자라면 충분한 전략을 가지고 준비를 해야 한다. 단 한 달이라도 어떻게 준비를 하느냐에 따라 나의 몸값과 미래가 달라질 수 있기 때문이다. 이 책에서는 프로필 정리 &#x3D;&gt; 회사 선택 &#x3D;&gt; 면접 &#x3D;&gt; 연봉 협상까지 아주 상세하게 구술되어 있다. 게다가 해외 서적이지만 국내 IT 환경에도 충분히 적용되는 내용이 많다. CHAPTER 2 입사 지원 절차 59 Page연봉 인상을 요구한다는 이유로 인해 손해 볼 일은 거의 없다.하지만 그 대가는 크다.30분간의 전화 통화로 연봉을 300만원정도 올릴 수 있다면한 시간 동안 600만원을 벌어들인 셈이 된다. 문제를 해결하는 능력문제 해결 능력은 개발자에게 가장 중요한 덕목 중 하나이다. 면접을 준비하는 과정도 중요하지만 개발자의 실력을 검증하는 데 있어서 자료구조와 알고리즘은 피할 수가 없다. 저자는 심층적으로 도움이 되는 예제들을 제공하며 단순히 문제를 해결하는 것에 그치지 않고문제에 접근하고 해결하는 모든 과정에 있어 큰 가르침을 준다. 개발자에게 길을 제시하는 종합 로드맵 구직 방법에 대한 방법 및 팁 자료 구조 알고리즘 컴퓨터 공학 OOP 및 디자인 패턴 기초 수학 및 연산 이 책의 전반적인 목차를 정리해보면 위와 같다. 겉보기에는 정말 구직만을 위한 책 같지만 그렇지 않다.한 개발자가 자아성찰을 하고 면접을 보며 회사를 고르고 입사를 하기까지큰 로드맵을 제시하고 있다. 한마디로 자아성찰부터 면접 그리고 입사까지 다루고 있으니 독자를 처음부터 끝까지 책임지고 케어해주는 느낌을 받는다. 결론국내에서는 4판까지 출시됐을 정도로 베스트셀러를 넘어선 스테디셀러라고 생각하고 있었지만언젠가 이직할 때 꼭 봐야지라고 생각하면서이직을 준비할 때 단 한 번도 구입해보지 못한 책이였다.(회사의 지원으로 사기에는 어려운 책의 네이밍) 현업 개발자들이 궁금한 전공자 신입 취업을 준비하는 예비 개발자 이직을 생각하거나 준비하는 개발자 알고리즘과 자료구조에 취약한 개발자 실력은 뛰어나지만 자신을 어필하는 방법이 부족한 개발자 연봉 협상이라는 것을 전혀 모르는 개발자 IT에 관심이 많은 리크루터 및 헤드헌터 개발자 채용을 위해 면접 프로세스를 만들어야 하는 다양한 직무의 실무자 등등 굳이 이직을 생각하지 않아도 모든 개발자들에게 큰 양분이 될 수 있는 책이라 앞으로도 많은 개발자들이 접하고 읽어봤으면 좋겠다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"computer science","slug":"book/programming/computer-science","permalink":"https://pocojang.github.io/categories/book/programming/computer-science/"}],"tags":[{"name":"알고리즘","slug":"알고리즘","permalink":"https://pocojang.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"프로그래밍 면접","slug":"프로그래밍-면접","permalink":"https://pocojang.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%A9%B4%EC%A0%91/"}]},{"title":"게임으로 익히는 코딩 알고리즘","slug":"2019-07-12-coding-algorithm-with-game","date":"2019-07-11T15:00:00.000Z","updated":"2023-02-12T14:14:44.058Z","comments":true,"path":"2019/07/12/2019-07-12-coding-algorithm-with-game/","link":"","permalink":"https://pocojang.github.io/2019/07/12/2019-07-12-coding-algorithm-with-game/","excerpt":"취업, 이직, 승진 준비생들을 위한 알고리즘 기본 + 코딩 테스트 트레이닝 북","text":"취업, 이직, 승진 준비생들을 위한 알고리즘 기본 + 코딩 테스트 트레이닝 북 책 정보출판사 : 한빛미디어저자 : 김영기출간 : 2019-05-06페이지 : 320ISBN : 9791162241615가격 : 22,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=14841097: http://www.hanbit.co.kr/store/books/look.php?p_code=B7463314905 특이한 알고리즘 서적 Interview 자료구조와 함께 배우는 알고리즘 Training 대회 알고리즘을 통한 인문학 알고리즘 입문 보통 알고리즘 서적은 이정도로 분류해볼 수 있다. 물론 더욱더 다양한 종류가 있지만 저 정도의 카테고리를 가진 알고리즘 서적만 해도 책장을 가득 매울 수 있다. 근데 이 책은 참 특이한 구성의 스타일을 가지고 있다. 일단 저자부터 설명하자면 다양한 게임 개발 이력을 지녔으며 코딩게임에서 상위 랭크를 기록할 정도로 알고리즘을 즐기는 게임 개발자이다. 또한 책에 나오는 다양한 문제 및 리소스도 코딩게임을 베이스로 하고 있어 저자가 코딩게임 운영자는 아닌가 착각을 했다. 또한 기본 언어는 파이썬을 채택하고 있어 요즘 파이썬을 통해 입문하는 개발자들이 많아 이를 의식한 것인가 추측을 해보게 된다. 의외로 탄탄한 구성게임이라는 소재를 통한 알고리즘 문제와 파이썬 기반의 코드 설명 이것만으로도 특이했고 다른 알고리즘 책과 달리 얇고 소박한 두께라 그저 문제 풀이로만 가득한 책 일거라 추측했지만 절대 그런 책이 아니었다. 체계적인 구성을 통해 알고리즘 풀이를 돕고 있다. 문제 설명 풀이 방법 소개 필요한 알고리즘 방법 제시 수도 코드 설명 추가 설명 및 다른 풀이법 소개 알고리즘의 개념 설명이 주 핵심이거나 문제가 뺵빽하거나 보통은 이런 책들이 대부분이지만마치 과외 선생님이 함께하는 것처럼 문제 분석부터 풀이 그리고 정리까지 함께 해준다. 마지막으로는 현업에 계신 게임 개발자분의 인터뷰를 통해 알고리즘의 중요성을 설명하고 있다. 놓치지 않은 개념문제 분석과 풀이 그리고 문제를 풀면서 등장하는 해결 방법을 통해 알고리즘의 중요 개념들을 꽤나 많이 짚고 넘어간다. 깊게 개념을 파고드는 수준은 아니지만 큐, 스택, 해시 맵, 이진 탐색, 탐욕 알고리즘, 재귀 등등 다양한 알고리즘을 놓치지 않고 담고 있다. 또한 알고리즘을 표현하는데 가장 중요한 수도코드를 거의 필수적으로 담고 있으며다른 언어로 포팅하며 문제를 풀 수 있을 정도로 간략하게 표현되어 있어파이썬이 아닌 다른 언어의 개발자들도 보는데 무리 없이 느껴진다. 결론참 애매한 포지션을 가진 알고리즘 서적이다. 기본적인 프로그래밍을 가능한 학생이나 초급 개발자를 대상으로 한다고 명시되어있는 책이지만입문용은 아니며 알고리즘의 개념이 빽빽한 것도 아니고 다양한 문제를 담고 있는 두꺼운 책도 아니라 시험 및 대회용으로 적합하지도 않다. 이런 단점에도 불구하고 책이 꽤나 재미있다. 마치 알고리즘을 가르쳐주는 과외 선생님이 처음부터 끝까지 함께하는 것 같다.특이한 구성이지만 탄탄하며 문제를 분석하는데 소홀하지 않는다. 특히나 한빛미디어 답게 풀 컬러로 높은 가독성을 자랑하고 있어 문제와 코드 그리고 그래프도 보기 좋게 잘 읽힌다. 이 한 권으로 알고리즘의 개념을 습득하거나 취업을 준비하고 시험을 보기에는 어려움이 있다. 하지만 알고리즘을 공부할 때 문제가 풀리지 않아 힘들고 지겨울 때가 많고 두께부터 압도적인 부담감을 느낄 수 있는 책이 많다 이럴 때 이 책으로 공부하면 알고리즘에 재미있게 접근하면서도 레벨업을 할 수 있는 계기를 가질 수 있을 것 같다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"computer science","slug":"book/programming/computer-science","permalink":"https://pocojang.github.io/categories/book/programming/computer-science/"}],"tags":[{"name":"알고리즘","slug":"알고리즘","permalink":"https://pocojang.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"게임으로 익히는 코딩 알고리즘","slug":"게임으로-익히는-코딩-알고리즘","permalink":"https://pocojang.github.io/tags/%EA%B2%8C%EC%9E%84%EC%9C%BC%EB%A1%9C-%EC%9D%B5%ED%9E%88%EB%8A%94-%EC%BD%94%EB%94%A9-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"}]},{"title":"GDG FRONT-ENDGAME 참관 후기","slug":"2019-06-24-gdg-front-endgame","date":"2019-06-23T15:00:00.000Z","updated":"2023-02-12T14:14:44.058Z","comments":true,"path":"2019/06/24/2019-06-24-gdg-front-endgame/","link":"","permalink":"https://pocojang.github.io/2019/06/24/2019-06-24-gdg-front-endgame/","excerpt":"FRONT-ENDGAME: 여러분의 프런트엔드를 구할 어벤져스가 찾아옵니다at 구글 스타트업 캠퍼스(구글 캠퍼스 서울) 컨퍼런스 참관기","text":"FRONT-ENDGAME: 여러분의 프런트엔드를 구할 어벤져스가 찾아옵니다at 구글 스타트업 캠퍼스(구글 캠퍼스 서울) 컨퍼런스 참관기 컨퍼런스 참가 전 조금은 오그라드는 컨퍼런스 패러디 커버 FE 관련 컨퍼런스에 항상 등장하시는 능력자분들 이 두 가지 부분이 우려되어 참가를 고민하였지만 FE 끝. 장(Endgame) 컨텍스트에 이끌려 티켓팅을 하게 되었다. 170명 가량의 많은 참가자분들 언제나 반가운 스티커들 타이트하고도 긴 세션으로 구성되어있다. 여러분이 앵귤러를 안해봤다면 살아갈 이유가 하나 더 있는 겁니다.천민호, PUBG &amp; Festa유난히 Angular에 대한 발표가 많은 컨퍼런스로 신기하다 생각했는데 시작부터 Angular 세션이었다. React Seoul 2017에서 Decorator + HOC + React &#x3D; Fantastic!!을 발표해주신 천민호님이 연사자로 등장 Angular를 도라에몽과 같다고 비유 PUBG의 프론트엔드 리드 개발자로 일하면서 Angular를 처음 접하게 되었고처음에는 거부감이 들었지만 점점 도라에몽과 같은 Angular에 빠지게 되었다는 내용이었다. 이 화면이 Angular로 제작된 웹 페이지라고한다. 웹프레임워크 선택에 대한 의문점은 결국 앱의 상태와 화면을 동기화하는 과제에서 나오는데이에 대한 설명을 정말 명쾌하고 잘 정리하게 풀어주었다. Angular vs React Angular React 관계 철저한 사육 철저한 방목 시점 우리를 사용자로 본다 우리를 개발자로 본다 동기화 방법 내가 알아서 해줄게 개발자가 명시적으로 동기화 setState() - React 다양한 선택권 선택의 연속 개발자가 모든 것을 알아서 해야 한다. Best Practice를 판단하기 어렵다. Angular의 단점 높은 진입 장벽 (하지만 점점 낮아지는 러닝 커브) Directive TypeScript Template RxJS 많은 제약사항 개발자를 사용자로 느끼게 해준다. 활동 반경을 제한한다. Angular의 장점 잘못된 길로 빠지지 않는다. 결국 Angular is Best Practice TypeScript 팀 &amp; 앱의 규모가 커질수록 큰 도움 RxJS 비동기 스트림계의 lodash 어차피 사용할 수 밖에 없다. 파편화되는 코드를 정리할 수 있다. DI (Dependency Injection) 동일한 인터페이스 동일한 함수에 적용 DI을 통해 분기문을 줄일 수 있다. Q &amp; A Q: 게임에 웹을 도입했을 때 이점?A: 사용자에게 서비스를 빠르게 서빙할 수 있다. Q: Angular 최적화에 한계가 존재하는지A: 결국 React와 비슷하다. Q: 소규모 프로젝트에서의 이점은 없는지A: Angular를 배워볼 수 있다. Q: DI 시스템만의 차별화된 점이 있는지 (HOC와 비슷한가)A: HOC와 DI는 비슷해 보이지만 비교 대상이 아니다. Q: DI로 개선 효과는?A: 분기문이 없어졌다. 느낀 점 국내에서의 Angular 시장은 이제 Vue에 점유율이 밀릴 정도로 작아지는이 시점에서 천민호님의 발표는 매우 호응이 좋았다.간결하게 잘 정돈된 내용과 적절한 비유는 오그라드는 발표 제목조차 청중을 납득시켰다. UX빼면 시체, 프론트엔드한재엽, 프론트엔드개발그룹 (FEDG a.k.a FEConf) Blog: https://jbee.io/ Github: https://github.com/JaeYeopHan 웹 프론트엔드 전반적으로 다양한 활동을 하고 계신 한재엽님의 발표였고 UX란 무엇인가를 넘은 내용이었다. 발표자료: https://speakerdeck.com/jaeyeophan/uxbbaemyeon-sice-peureonteuendeu 단순한 문서만 주고받던 WEB이 30주년이 되었다.과연 지금은 어떻게 변화하였는가 기술의 발전 SSR Page Serving ES3 &#x2F; Ajax (1999) Gmail (2004) jQuery (2006) AngularJS (2010) React (2013) ECMAScript 2015+ Babel MEAN Stack &#x3D;&gt; JAM Stack (Why)? 기술이 발전되는 이유 Rich Client 정보량 과다 모바일 대응 복잡해진 화면 문서를 뛰어넘은 매체 사용자의 환경을 개선 작은 화면에 복잡한 UI 페이지 리프레시 페이징 빠르고 풍부하고 우아한 웹 Not only UX Design https://uxplanet.org/ux-engineers-what-we-are-2b0c4d10b3a6 프론트엔드 개발자라면 당연히 챙겨야할 덕목인 4가지의 UX 개선 사항을 뽑아주었다. 성능 최적화 초기로딩 빠른 동작 부드러운 애니메이션 예상 가능한 동작 스크롤 복원 dimd 닫힘 손에 쉡게 들어오는 인터렉션 예상 가능한 인터렉션 SEO &#x2F; SMO 검색 엔진 최적화 소셜 미디어 공유 최적화 어디까지 공유 가능해야 하는가 측정과 개선 트래킹 A &#x2F; B TEST GA 결론 프론트엔드의 본질은 UX UX 디자이너와의 긴밀한 협업 디자이너의 1px, 100ms 의 소중함 라이브러리 &#x2F; 플랫폼 개발자 프로덕트 개발자 Performance UX Documentation Maintentance 느낀 점 수많은 프론트엔드 개발자들을 반성시키는 발표가 아닐까 싶다.전반적인 WEB 탄생에서부터 시작하여 왜 사용자 관점에서의 UX가 중요한지프론트엔드 개발자는 이 상황에서 무엇을 해야 하는지에 대해 적절한 경험담과 사례 그리고 방향을 제시해줬다. 프론트엔드 개발에 FRP(Functional Reactive Programming) 녹여보기서재원, 푸른중학교 Blog: http://environmentset.github.io Github: https://github.com/environmentset Interview: https://www.imaso.co.kr/archives/3668 이제는 널리 알려진 프론트엔드계의 이강인 그리고 유망주 서재원님의 FRP 발표였다. 예제코드 프로그래밍 패러다임추상화 &#x3D;&gt; 함수를 만든다. 명령형 vs 선언형선언적인 프로그래밍은 가변성과 부수효과를 사라지게 만들어준다. Reactive Programming 흐름을 정의한다 낮은 결합도 Observer 이벤트 FRP(Functional Reactive Programming)함수형과 반응형의 만남은 결국코드 재사용성을 높이며 결합도는 낮춰준다. Functional 배우기 Monad 부수효과 참조 투명성 순수 함수 HOF Reactive 배우기 Observable lifesaver FRP 배우기 Sequence Observable (stream) Operation Marble Diagram map filter scan merge withLatestFrom 느낀 점 점점 발표 스킬이 늘고 키도 커지고 있는게 느껴지는 서재원님의 발표였다.발표를 하는 것 자체만으로도 많은 개발자들에게 귀감을 주었지만FRP에 대한 소개와 특징으로 끝난 것 같아 매우 아쉬웠다. 문과생의 커리어 프런트엔드로 refactoring하기한근택, ODK Media 발표 전에는 같은 비전공자로써 큰 기대는 없없지만컨퍼런스를 함께한 스터디원분께서 한근택님 발표가 분명 재미가 있을 거라며큰 기대를 주었고 정말 기대 이상의 동기부여와 재미를 준 발표였다. 비전공자에서 인프라 엔지니어로노량진 고시생이자 게임 중독에 걸린 시절 자신의 학과에 대한 의문까지 더하게 되어 더더욱 공부를 하지 않고 허송세월을 보내고 있었다. 이때 전 여친(aka 와이프)님의 제안으로 Java 교육 수강을 시작하게 되었는데 결국 보안 교육을 통해 결국 보안 관제 담당자로 취직하게 되었다. 보안 분석, IDC 세팅, 각종 인프라 엔지니어 업무와 장애 대응으로 지치게 되었고 재미를 느끼고는 하였지만결국 잦은 서버 업무로 이직을 결심하게 되었다. AWS 인스턴스 200대 점검취업하자마자 주어진 명령이었고 굉장히 많은 시도를 해보다가Python CLI로 해결하게되었다.이 마저도 불편하여 직접 Web에 대시보드를 개발하여 해결을 하였다. 하지만 이런 능동적인 개발 이후 팀장의 잦은 요구로 이직을 결심하게 되었다. 개발 공부 재시작취업을 위한 공부를 시작하였다 (HTML &amp; CSS는 극혐 그 자체) 그 중 네트워크는 인프라 엔지니어 시절 업무를 통해 몸으로 느끼며 학습하게 되어 따로 공부할 필요가 없었다. 자료구조는 언어에 신경 쓰지 않고 책을 구매 후 원하는 언어로 포팅하며 공부하였고알고리즘은 흔한 패턴을 공부하다가 나중에는 트릭도 찾아 공부하게 되었다. 면접 &amp; 취직면접과 과제를 통해서도 성장할 수 있어 고마움을 느끼게 되었지만 점점 지치게 되었다. 결국하루에 7시간 면대면 면접과 매일 매일 문제를 보내는 어떠한 곳에 백엔드 개발자로 취직을 하게 되었다. 커피 한잔과 Front end그러던 어느 날 커피 한 잔에 팔려 React를 배우라는 지시를 받았고 동료 쥬니어 개발자와 협업하여 서비스를 출시하게 되었다. 나름 프론트엔드 개발자로 한층 성장하는 계기가 되었다. 사수 A 이야기알마라는 사수 A 개발자분이 입사하게 되었고 매일 매일 코드 리뷰를 받으며 살해의 위협을 받았다고 한다. 인정을 받다가도 잦은 실수를 하며 굉장히 많이 혼나게 되었고 결국 정신없이 혼나다 성장한 자신을 바라보게 되었다. 어느샌가 사수 A는 떠나게 되었지만 큰 배움을 받게 되었다. 프론트엔드 리드 개발자그 와중에 프론트엔드 기반이 전혀 없는 어떠한 회사에서 프론트엔드 환경을 리드를 하게 되었다. 사수 A 개발자님에게 배운 것을 토대로 코드 리뷰를 도입하고 많은 노력을 하였지만 리더가 된 이후 살이 빠질 정도로 굉장한 스트레스 받았고리더라는 이유로 의지할 곳이 없어 외로운 리더가 되었다. 사수 B 이야기이전 회사에서 다양한 배움과 도움을 주었던 사수 B님의 제안으로 현 회사로 이직하게 되었고 함께 토이 프로젝트를 진행한다. 토이 프로젝트에 최대한 신기술을 자유롭게 도입해보고그 경험과 노하우를 통해 회사의 코드에 녹여보고실제 필드에서 얻은 피드백을 또 다시 토이 프로젝트에 적용하는 식으로 학습을 하였다. 결론좋은 사람들과 일하며 많은 것을 배우자 느낀 점 정말 말을 잘하는 개발자셨다.개발자가 아닌 일반인이 봐도 재미있을 발표였고이쁘게 잘 정돈된 발표 자료는 아니었지만 필요할 때마다 등장하는 짤들은 발표를 꿀잼으로 만들어줬다.좋은 와이프, 좋은 동료 (때로는 무서운)들을 만나 훌륭한 프론트엔드 개발자가 된다는 내용이지만그 과정 속에 한근택님이 얼마나 많은 노력을 했는지와 실행력은 정말 큰 동기부여가 되었다. 프론트엔드 개발 끝장내기(endgame) feat. Angular나석주, 비바리퍼블리카이미 이전 발표 중 천민호님의 Angular 발표와 내용이 겹치게되어 어떤 차별점이 있을까를 기대하게 되었다. Angular의 특징 Template Binding Component HTML attribute 와 DOM Property 비교 Change Detection 데이터의 변경을 감지하여 View 반영하는 Angular의 메커니즘 단방향 강제화 Zone JavaScript VM 실행 컨텍스트 DOM 이벤트 추적 DI 고립된 컴포넌트들의 상태를 공유 인스턴스 활용 결론이 밖에도 Promise의 Pull &amp; Push와 RxJS를 설명하는 등직접 Angular를 사용하며 느꼈던 특징을 공유하는 자리였다. 느낀 점 이전 발표와 겹치는 내용이 많아 이전 내용과 비교를 하거나 살을 보태는 방식의 진행이 아쉬웠고이쯤 되니 GDG와의 약속으로 Angular에 대한 세션이 많았던 게 아닐까 우스꽝스러운 생각을 해보게 된다. 프로그래머로의 배움안희종, 비바리퍼블리카 Blog: https://ahnheejong.name/about Github: https://github.com/heejongahn 프론트엔드계의 브루스 배너 안희종님의 발표는 처음 보지만 그동안 워낙 훌륭한 아티클들을 다수 작성해주셔서 감명 깊게 본 적이 있다. 원래의 발표 제목은 프로그래머로서의 성장을 도왔던 태도들이지만 프로그래머로의 배움으로 변경하였다고 한다. 발표자료: https://www.slideshare.net/HeejongAhn/ss-152627139 무엇을 배울까: 변하는 세상 속에서 코드를 안 짜는 방법 &gt; 적게 짜는 코드 Rich App 생태계에 대처하는 JavaScript 요구사항을 가정하는 방법 올바른 가정을 세운다 &#x3D;&gt; 많이 해본다 &#x3D;&gt; 회고를 한다. 왜? 무엇이? 모든 사항에 의문을 가져본다. 고민해볼 만한 가치가 있다. 겸허함 글과 말을 정돈을 잘할수록 코드를 짜는 데 도움이 된다. 세상이 변해도 변하지 않는 것을 공부하자 어떻게 배울까: 이론과 실습 사이의 핑퐁, 사람들은 틀린 말을 한다 균형을 찾는 법 A 유형 B 유형 방법 문서만 읽음 기본 문법만 습득 &#x3D;&gt; 바로 코딩 결과 실제 코딩은 막힌다 시행 착오로 인한 시간 낭비 많음 A &amp; B 를 핑퐁한다 MVP 짧은 주기의 반복을 통해 만들면서 배운다 급할수록 돌아가자 쉽게 풀어진 학습 리소스 재해석을 하자 진실로부터 멀어질 수 있다. 근원에 깊이 파고들자 어려워도 하다 보면 익숙해진다. 생각하고 습관을 잡기 위해 노력하자 사람보다는 기계를 믿고 하는 일을 기계에 맡기자 왜 배울까: 나는 작지만 내가 할 수 있는 일이 있다 다양한 리소스에 압도를 당하는 느낌 초조함과 모든 것을 다 배워야 한다는 생각이 들지만 결국 불가능하다 외부의 정보량보다는 나의 에너지와 시간의 문제 Action Plan 열정적이고 훌륭한 동료를 확보하자 내가 그런 사람이 되기 위해 노력하자 배움을 주는 문턱은 생각보다 높지 않다. 다양한 길이 열린다. 느낀 점 안희종님의 발표나 자료를 접하게 될 때는 지식의 빈익빈 부익부를 느끼게 된다.자기 주도 학습을 하는 데 있어서도 사람마다 접근 방식과 Action Plan에 큰 차이를 보인다.결국 이번 세션도 역시나 큰 반성과 깊은 뉘우침을 받게 되었다. 리액트 꽃길만 걷기김민준(Velopert), 라프텔 Blog: https://velopert.com Github: https://github.com/velopert Facebook: https://facebook.com/velopert Youtube: https://www.youtube.com/channel/UCmMgRlN-3GKQ_CH7cOtLdvg Book: https://book.naver.com/bookdb/book_detail.nhn?bid=13799583 ETC: https://velog.io 국내 React 홍보대사이자 대표라고 할 수 있는 벨로퍼트님의 세션으로 React를 사용하고 공부하며 겪은 시행착오와 역사를 공유하는 자리였다. 발표자료: https://drive.google.com/file/d/18MJDVzre8DYnEx9OITrYZOC_cVUeaSdV/view?usp=sharing 전반적인 내용 고생하지 않고 React를 배우는 길에 대한 고민 겪었던 실제 어려움 잘못된 방향들 배웠던 꿀팁 온전한 리액트에 대한 이야기 스타일 전처리기 sass, less 다양한 문법과 재사용 방법 post css 전처리기들을 흉내 낼 수 있다. 디렉토리 구조에 대한 고민 스타일만 몰아넣기 인덱싱 어려움 컴포넌트화 동기화 어려움 컴포넌트와 동떨어져 관리 어려움 마크업 팀이 있다면 도움 될 수도 컴포넌트에 넣어주기 무난하고 많이 사용됨 폴더 및 index.js 만드는 어려운 생산성 CSS module class name 관리 어려움 CSS in JS &#x3D;&gt; Style Components 안 좋았던 단점이 모두 수정되며 장점이 되고 있다 &#x3D;&gt; V5 종착점이 되었다. UI 프레임워크 사용은 지양하자 절대 필수 요소가 아니다. 커스터마이징이 어렵고 걷어내기도 어렵다. 직접 작성하는 것을 어렵다고 생각하지 말자 함수형 컴포넌트v16.8 이후 클래스 컴포넌트에서만 가능했던 것들이 함수형 컴포넌트에서 가능해졌다. 다양한 Hooks와 LifeCycle API 흉내내기 그리고 Context API + Hook을 통해 Redu x만큼의 효과를 낼 수가 있다.(단점으로는 미들웨어를 포기해야 할 수 있다.) 이제 더 이상 클래스 컴포넌트를 사용해야 할 이유가 사라지고 있다. StoreReduxv16.8 버전이 다가온다 해서 굳이 Redux를 걷어낼 이유는 없다. Redux 상태를 관리하는 데 있어서 항상 큰 고민을 동반하게 된다. 결론과 정답은 없지만 스토어에 어떤 상태를 넣어야 할지 고민하고 정의해본다. 로컬 상태로 할 수 있다면 굳이 스토어에 다 넣지는 말자 Container &amp; Presentational 꼭 따라야 할 패턴은 아니다. Container 컴포넌트가 굉장히 거대해지는 상황이 많으니 조심하자 1 Container &lt;&#x3D;&gt; 1 Presentational 일 이유는 없다. MobxHooks 지원 여부에 따라 사용법이 많이 바뀌고 있으니 새롭게 배우게 된다면 몇 달 후에 배워보자. SSR결국 서비스를 운영한다면 필수인 부분이다. Next Router 생산성이 좋다 프로젝트 설계를 직접 구현 모든 걸 다 해준다 데이터 로딩에 제약 사항이 없다 제약 사항이 많다 올바를 이해와 가이드가 필요하다 기타 데이터 요청 상태 관리에는 스토어가 도움이 될 수 있다. Immutable.js 보다는 immer.js 상태를 너무 깊게 가져가지 말자 배열 업데이트시 keyed-by-id를 사용하자 (라이브러리도 있다) TS, TDD는 고민하지 말고 일단 빠르게 적용하자 느낀 점 진겸님의 패스트캠퍼스 100만원짜리 강의라는 말이 와닿을 정도로 굉장히 좋은 발표였다.사실 React를 하다 보면 문제가 뭔지도 모르고 이상한 길을 마치 맞다고 착각하는 경우도 있고Best Practice를 찾는 데에만 며칠이 걸릴때도 있다.물론 Velopert님의 요약된 발표가 React 로드맵의 표본 및 정답이라고 할 수는 없다.하지만 Best Practice에 가까운 훌륭한 자료와 정리였다. Q &amp; A 풀스택에 대하여 어떻게 생각하는지? 시간이 들이면 가능한지? 장점이 있는지? A: 서재원 시간을 들이면 모든 것이 가능하다. 공부도 그랬다. A: 나석주 충분히 가능하다. A: 안희종 풀스택이 아니라 가능한지는 모르겠다. 어떤 한 분야를 깊이 파는 게 필요한 조직도 있고 넓은 분야를 필요로 하는 분야도 있다 본인의 포지션을 정해서 나아가면 된다 A: 진겸 스타트업을 가면 결국 서버를 어쩔 수 없이 짜는 경우가 있다. A: 김민준 풀스택 개발자가 있을 수는 있지만 멋있다고 생각되지는 않는다. 한 곳에서의 정점보다 두 곳에서의 정점은 어렵다. 풀스택을 나눠 협업하는 것이 더 멋지다고 생각한다. 굳이 모두 다 잘할 필요는 없다고 생각한다. 둘 다 공부는 해도 한곳에 집중하는 것이 더 좋다. 둘 다 해야 우리가 원하는 것을 얻을 수 있다. A: 한근택 제사상에 피자가 올라가도 되는지 급의 논란 질문이다. 풀스택을 어디까지 볼 것이냐가 중요하다. 둘 다 해야 우리가 원하는 것을 얻을 수 있다. 굳이 모두 다 잘할 필요는 없다고 생각한다. 두 명분의 일을 한 명의 임금으로 해결해야하는 일 같다. 트렌드가 빠르게 변하는데 양쪽을 모두 따라갈 수 없다. A: 한재엽 노 코멘트 프레임워크 리서치시 Angular의 평가가 매우 낮다 어떻게 생각하는지 A: 나석주 입문이 어려워서 그런 것 같다. 문제 해결이 어려워지게 된다. A: 진겸 시대를 앞서간 것 같다. 학습 비용이 리액트에 비해 크다. 안희종님 Fear of missing out 경험과 해결 방법이 궁금해요Fear of missing out A: 안희종 팔로워를 줄이게 되었다 어차피 좋은 정보는 들어오게 되어있다. 본인의 능력에 대한 피드백을 빠르게 자주 받아보자 면접을 보며 부딪히고 피드백을 받아보는 것도 팁이다. 본인을 평가받아보는 환경에 자신을 던져보자 액션 플랜을 짜보자 서재원님 개발은 언제 시작하셨나요? A: 서재원 초등학교 5학년 게임을 하다가 시작하게 되었다. UX 회의시 의견이 불일치할 때 대처 방법 A: 진겸 Best Practice는 없다. 사용자에게 좋은 경험을 제공하는지를 확인하자 조율이 가능한 경우와 아닌 경우가 있다. 역량과 상황에 따라 달라질 수 있다. 최대한 사용자 측 입장에 대해 많이 생각해보자 실력 상승이 된다. A: 김민준 데이터로 분석할 수 있는 UX 면 좋다. A&#x2F;B 테스트 수용 A: 한재엽 안된다고만 하지 말고 안되는 이유를 생각해보자 일정 및 역량 MVP를 도입하여 디자이너와 협의 프론트엔드 전망이 아직도 좋다고 생각이 되나요? 보험이 되는 서버 언어를 추천해주세요 A: 김민준 개발을 잘한다면 전망이 좋다. 못 따라온다면 프론트엔드에 어울리지 않을 수 있다. 보험이 되는 공부 방법은 별로 같다. 자아 성찰을 하자 어떤 언어를 공부하느냐는 중요하지 않다. 개발을 잘 해내는 게 더 중요하다. 절대 언어가 중요한 게 아니다. A: 나석준 한 가지 기술만 고집하지 않는 변화에 대응할 수 있는 자세가 필요한 것 같다. 카멜레온 같은 개발자가 되자 개발 문화에 대한 책 중 인상 깊었던 문구 A: 한근택 보이스카웃 원칙 들어가서 나올 때는 더 깨끗하게 남이 짠 코드더라도 정돈을 시키고 나오자 A: 한재엽 깨진 유리창 법칙 유리창에 한 군데가 깨지면 전체적인 분위기를 망친다. 안 쓰는 코드가 있거나 잘못된 주석이 있거나 하나라도 잘못된 것이 있으면 잘못된 프로덕트로 보일 수 있다 A: 서재원 설레발 주도 개발 신기술을 배우고 습득하여 유행에 따라 적용해보며 삽질하고 욕을 하게 된다. 뭐가 중요한 것인지 파악해야 한다. A: 진겸 외주를 하자 일단 질러놓자 어떻게든 하게 되어있다. 스스로 목표 없이는 잘 안 하게 되어 있다. 어쩔 수 없는 마감을 만들어버리자 유지보수하기 어렵게 코딩하는 방법이라는 책을 본 적이 있는지유지보수하기 어렵게 코딩하는 방법 A: 한근택 제목만 보고 읽지 않았다. 한재엽님 호스팅과 도메인은 무엇을 사용하나요? A: 한재엽 도메인: GoDaddy 호스팅: netlify 현재 아무런 프레임워크 없이 뭔가 도입해야 하는데 뷰와 리액트 고민이 됩니다. A: 한재엽 훌륭한 강의 및 자료가 많은 리액트를 추천 생태계가 크다. 공식 문서가 번역되고 있다. A: 나석주 Angular도 번역이 있다. 컴퓨터 전공 중 FE 공부를 한다니 교수님이 그걸 왜 하냐고 혼이 났다. 그냥 재밌어서라고 했더니 그건 전공자가 하는 게 아니라고 혼났다 어떻게 대답을 해야 하나 A: 한재엽 비전공자이지만 어딘가에 생각이 머물러있는 교수님인 것 같다. 이미 멈춰진 옛날이 FE를 생각하는 것 같다. 무시를 하는 것도 좋지만 반박을 하자면 재밌어서라는 이유가 크다….. A: 안희종 사람들은 틀린다. 전공자도 많이 하고 있다. FE는 많이 복잡해지고 있다. FE 라이브러리나 프레임워크에 적용된 법칙과 구조는 이미 백엔드에도 있는 것들이다 마음에 담아두지 말자 비전공자인데 프로그래밍을 배운지 6개월이 되었다. CS 기초가 꼭 필요한지 어떻게 준비하는지 A: 한재엽 본인 깃헙에 CS 기초 정리 자료가 있다 깊이 공부한 적은 없고 필요할 때만 공부했다. 모르는 지식들만 찾아서 공부하게 되었다. 좋은 자료는 이미 굉장히 많다. 알고리즘 공부가 너무 어렵다 얼마나 활용하고 얼마나 노력하는지 A: 진겸 결과적으로는 도움이 되는 부분이다. 결과에 집착하자 A: 나석주 프로그램 서빙으로 문제를 해결해나가는 능력이 결국 중요하다. 마치며 전체 사진 출처(@양성민님) 역대급으로 만족스러웠다.다양한 인사이트와 깊은 반성 그리고 엄청난 동기부여를 받았던 컨퍼런스였다.더 이상 무슨 말이 필요할까","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"gdg","slug":"gdg","permalink":"https://pocojang.github.io/tags/gdg/"},{"name":"front-endgame","slug":"front-endgame","permalink":"https://pocojang.github.io/tags/front-endgame/"},{"name":"천민호","slug":"천민호","permalink":"https://pocojang.github.io/tags/%EC%B2%9C%EB%AF%BC%ED%98%B8/"},{"name":"진겸","slug":"진겸","permalink":"https://pocojang.github.io/tags/%EC%A7%84%EA%B2%B8/"},{"name":"한재엽","slug":"한재엽","permalink":"https://pocojang.github.io/tags/%ED%95%9C%EC%9E%AC%EC%97%BD/"},{"name":"서재원","slug":"서재원","permalink":"https://pocojang.github.io/tags/%EC%84%9C%EC%9E%AC%EC%9B%90/"},{"name":"나석주","slug":"나석주","permalink":"https://pocojang.github.io/tags/%EB%82%98%EC%84%9D%EC%A3%BC/"},{"name":"한근택","slug":"한근택","permalink":"https://pocojang.github.io/tags/%ED%95%9C%EA%B7%BC%ED%83%9D/"},{"name":"velopert","slug":"velopert","permalink":"https://pocojang.github.io/tags/velopert/"},{"name":"벨로퍼트","slug":"벨로퍼트","permalink":"https://pocojang.github.io/tags/%EB%B2%A8%EB%A1%9C%ED%8D%BC%ED%8A%B8/"},{"name":"김민준","slug":"김민준","permalink":"https://pocojang.github.io/tags/%EA%B9%80%EB%AF%BC%EC%A4%80/"}]},{"title":"모던 웹을 위한 HTML5+CSS3 바이블(3판)","slug":"2019-06-09-modern-web-html5-css3","date":"2019-06-08T15:00:00.000Z","updated":"2023-02-12T14:14:44.057Z","comments":true,"path":"2019/06/09/2019-06-09-modern-web-html5-css3/","link":"","permalink":"https://pocojang.github.io/2019/06/09/2019-06-09-modern-web-html5-css3/","excerpt":"웹 표준을 적용한 480개의 코드로 배우는 웹 페이지 제작의 모든 것 모던 웹을 위한 HTML5+CSS3 바이블 리뷰!","text":"웹 표준을 적용한 480개의 코드로 배우는 웹 페이지 제작의 모든 것 모던 웹을 위한 HTML5+CSS3 바이블 리뷰! 책 정보출판사 : 한빛저자 : 윤인성출간 : 2019-06-09페이지 : 632ISBN : 9791162241585가격 : 32,000원 자세한 정보: https://book.naver.com/bookdb/book_detail.nhn?bid=14840760: http://www.hanbit.co.kr/store/books/look.php?p_code=B8371709349 소개 한빛 출판에 윤인성 저자님 모던 웹 시리즈 사실 위 조합의 책은 따로 구매하거나 읽어본 적이 없었다. 모던 웹을 위한 HTML5+CSS3 바이블 모던 웹을 위한 JavaScript + jQuery 입문 모던 웹을 위한 Node.js 프로그래밍 모던 웹을 위한 HTML5 프로그래밍 굉장히 많은 모던 웹 시리즈가 있는데 FE 개발자가 볼만한 책은 딱 이정도로 보인다. 이번 나는 리뷰어다 덕분에 처음으로 모던 웹 시리즈를 접해볼 수 있었고 결국 모던 웹 시리즈 첫 인상에 비해 굉장히 좋은 책이라는 감명을 받았다. 레퍼런스가 요약된 바이블일단 책 두께에 앞도 당하는 것 마냥 굉장히 두껍고 많은 분량을 볼 수 있다. 마치 레퍼런스와 같은 구성 사실 레퍼런스는 MDN 문서를 참고하는게 좋은 방향이라고 생각하지만 초보자들이나 입문자에게는 이질감이 들 수 있다.거기다가 코뿔소 같은 책을 보더라도 너무 딱딱한 느낌을 받을 수 있지만 이 책은 HTML 태그와 CSS attribute들에 대해 굉장히 쉽게 잘 설명해놓았다. 실무에 최적화레퍼런스 내용만을 다루는 것이 아닌다양한 웹 페이지 레이아웃을 다루는 부분이 인상적이었다. 우리나라의 웹페이지는 복잡하고 Too Much 레이아웃 형태들을 가지고 있다. 특히 일반 웹 페이지, 모바일, 태블릿, 소셜 커머스 등의 레이아웃을 다루는 점은 굉장히 인상적이었다. 동적인 UI &#x2F; UX보다는 정말 우리나라의 퍼블리셔와 FE 개발자들이 실무에서 접하기 흔한 레이아웃을 다룬다는 점이다. 꼼꼼하고 보기 좋은 풀 컬러 책베타 리더를 하며 항상 출판사에 피드백하는 부분은 코드 가독성이다. 깔끔한 코드 가독성 독자를 배려한다는 느낌의 감동을 받을 정도로 깔끔한 가독성이다.거기다가 모든 페이지가 100% 풀 컬러다. 저자가 얼마나 꼼꼼하게책을 준비했는지 몸소 느낄 수 있다. 결론아쉬운 점은 모던 웹 시리즈인데 모던한 CSS 부분은 놓치는 게 아닌가 싶었다. Flex 및 Grid Layout에 대해 더 다뤄봤으면 좋았을 것 같고less보다는 sass(scss)를 다뤘으면 더 좋았을 것 같다. 요약하자면 웹 표준, 웹 접근성보다는레퍼런스 + 우리나라 실무에 가까운 레이아웃의 구성으로 된 책이다. 또한정말 깔끔한 가독성과 저자의 꼼꼼함으로입문자부터 CSS를 전혀 모르는 개발자들까지 보기 좋게 구성되어 있기 때문에 회사든 집이든 책장에 꽂아놓고 두고두고 보기에도 굉장히 좋을 것 같다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"css","slug":"book/programming/css","permalink":"https://pocojang.github.io/categories/book/programming/css/"}],"tags":[{"name":"모던 웹을 위한 HTML5+CSS3 바이블","slug":"모던-웹을-위한-HTML5-CSS3-바이블","permalink":"https://pocojang.github.io/tags/%EB%AA%A8%EB%8D%98-%EC%9B%B9%EC%9D%84-%EC%9C%84%ED%95%9C-HTML5-CSS3-%EB%B0%94%EC%9D%B4%EB%B8%94/"},{"name":"HTML5","slug":"HTML5","permalink":"https://pocojang.github.io/tags/HTML5/"},{"name":"CSS3","slug":"CSS3","permalink":"https://pocojang.github.io/tags/CSS3/"}]},{"title":"Vanilla JS 30","slug":"2019-04-27-javascipt30-8","date":"2019-04-26T15:00:00.000Z","updated":"2023-02-12T14:14:44.057Z","comments":true,"path":"2019/04/27/2019-04-27-javascipt30-8/","link":"","permalink":"https://pocojang.github.io/2019/04/27/2019-04-27-javascipt30-8/","excerpt":"30 Day Vanilla JS Coding Challenge Study - 8주차 Geolocation based Speedometer and Compass Follow Along Links Speech Synthesis","text":"30 Day Vanilla JS Coding Challenge Study - 8주차 Geolocation based Speedometer and Compass Follow Along Links Speech Synthesis 21. Geolocation based Speedometer and Compass영상: https://youtu.be/X7Cbtra0C6I Geolocation 기반의 속도계 &amp; 나침반 1234567891011const arrow = document.querySelector(&#x27;.arrow&#x27;);const speed = document.querySelector(&#x27;.speed-value&#x27;);navigator.geolocation.watchPosition((data) =&gt; &#123; // DOM에 속도계 반영 speed.textContent = data.coords.speed; // CSS에 접근하여 나침반 시각화 arrow.style.transform = `rotate($&#123;data.coords.heading&#125;deg)`;&#125;, (err) =&gt; &#123; console.error(err);&#125;); 22. Follow Along Links영상: https://youtu.be/POP_qri7RA8 getBoundingClientRect()를 활용한 마우스 오버 링크 스타일링 123456789101112131415161718192021const triggers = document.querySelectorAll(&#x27;a&#x27;);const highlight = document.createElement(&#x27;span&#x27;);highlight.classList.add(&#x27;highlight&#x27;);document.body.appendChild(highlight);function highlightLink() &#123; // viewport에서의 상대적인 위치를 반환 const linkCoords = this.getBoundingClientRect(); const coords = &#123; width: linkCoords.width, height: linkCoords.height, top: linkCoords.top + window.scrollY, left: linkCoords.left + window.scrollX &#125;; highlight.style.width = `$&#123;coords.width&#125;px`; highlight.style.height = `$&#123;coords.height&#125;px`; highlight.style.transform = `translate($&#123;coords.left&#125;px, $&#123;coords.top&#125;px)`;&#125;triggers.forEach(a =&gt; a.addEventListener(&#x27;mouseenter&#x27;, highlightLink)); 23. Speech Synthesis영상: https://youtu.be/saCpKH_xdgs SpeechSynthesisUtterance API를 활용한 다국어 TTS 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 스피치 인스턴스 생성const msg = new SpeechSynthesisUtterance();let voices = [];const voicesDropdown = document.querySelector(&#x27;[name=&quot;voice&quot;]&#x27;);const options = document.querySelectorAll(&#x27;[type=&quot;range&quot;], [name=&quot;text&quot;]&#x27;);const speakButton = document.querySelector(&#x27;#speak&#x27;);const stopButton = document.querySelector(&#x27;#stop&#x27;);msg.text = document.querySelector(&#x27;[name=&quot;text&quot;]&#x27;).value;function populateVoices() &#123; // 디바이스의 모든 음성 객체 리스트 반환 voices = this.getVoices(); voicesDropdown.innerHTML = voices .filter(voice =&gt; voice.lang.includes(&#x27;en&#x27;)) .map(voice =&gt; `&lt;option value=&quot;$&#123;voice.name&#125;&quot;&gt;$&#123;voice.name&#125; ($&#123;voice.lang&#125;)&lt;/option&gt;`) .join(&#x27;&#x27;);&#125;function setVoice() &#123; msg.voice = voices.find(voice =&gt; voice.name === this.value); toggle();&#125;function toggle(startOver = true) &#123; // 말을 멈추거나 취소한다 speechSynthesis.cancel(); if (startOver) &#123; // 발언을 추가한다 speechSynthesis.speak(msg); &#125;&#125;function setOption() &#123; console.log(this.name, this.value); msg[this.name] = this.value; toggle();&#125;// getVoices() 메서드 반환될 SpeechSynthesisVoice 리스트 변경시speechSynthesis.addEventListener(&#x27;voiceschanged&#x27;, populateVoices);voicesDropdown.addEventListener(&#x27;change&#x27;, setVoice);options.forEach(option =&gt; option.addEventListener(&#x27;change&#x27;, setOption));speakButton.addEventListener(&#x27;click&#x27;, toggle);stopButton.addEventListener(&#x27;click&#x27;, () =&gt; toggle(false));","categories":[{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"}],"tags":[{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"}]},{"title":"실습과 그림으로 배우는 리눅스 구조","slug":"2019-04-14-linux-example-photo-book","date":"2019-04-13T15:00:00.000Z","updated":"2023-02-12T14:14:44.057Z","comments":true,"path":"2019/04/14/2019-04-14-linux-example-photo-book/","link":"","permalink":"https://pocojang.github.io/2019/04/14/2019-04-14-linux-example-photo-book/","excerpt":"개발자가 알아야 하는 OS와 하드웨어의 기초","text":"개발자가 알아야 하는 OS와 하드웨어의 기초 책 정보출판사 : 한빛미디어저자 : 다케우치 사토루역자 : 신준희출간 : 2019.02.20페이지 : 304ISBN : 9791162241523가격 : 24,000원 자세한 정보: https://book.naver.com/bookdb/book_detail.nhn?bid=14524977: http://www.hanbit.co.kr/store/books/look.php?p_code=B2453522793 소개컴퓨터 공학 기초와 개발자의 레벨업을 돕는 데에 초점이 있다는 소개가 주이며 특히 출판사에서는 실습과 그림을 강조한 점이 눈에 띈다 하지만 책을 보기 전에 느낀 개인적인 강점은보통의 두껍고 부담스러운 리눅스 책들에 비해 얇고 가볍다는 것이었다. 이해를 돕는 도식화책 자체는 구성부터 실습 예제까지 굉장히 친절한 편이다. 특히 그림이라는 표현보다는 도식화라는 표현이 더 어울릴 법하다고 생각하는데(왜 그림이라고 표현했는지는 모르겠다) 스케줄러와 메모리 그리고 시스템 콜 등은 정말 상세하게 도식화되어있다. 책 분량의 절반은 도식화라고 볼 수 있을 정도로 친절한 책이다. 컴퓨터 공학 기초부터 데브옵스 입문까지사실 책을 보기 전에 받은 첫 느낌은 그저 리눅스에 한정된 책이고그에 해당하는 두께를 가졌구나였다. 하지만 책 분량에 비해 컴퓨터 공학 기초에 대해서도 상당히 많이 다루고 있었고 다양한 케이스와 실습을 다루고 있기에 도움이 데브옵스 입문에도 도움이 될 것 같다. 물론 쌩 입문자가 볼 수는 없는 수준이지만 최소한의 컴퓨터 공학 기초가 있거나현업에서 일하는 비전공 개발자들에게 디딤돌이 될만한 책이라 생각이 든다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"computer science","slug":"book/programming/computer-science","permalink":"https://pocojang.github.io/categories/book/programming/computer-science/"}],"tags":[{"name":"리눅스","slug":"리눅스","permalink":"https://pocojang.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/"}]},{"title":"Vanilla JS 30","slug":"2019-04-14-javascipt30-7","date":"2019-04-13T15:00:00.000Z","updated":"2023-02-12T14:14:44.057Z","comments":true,"path":"2019/04/14/2019-04-14-javascipt30-7/","link":"","permalink":"https://pocojang.github.io/2019/04/14/2019-04-14-javascipt30-7/","excerpt":"30 Day Vanilla JS Coding Challenge Study - 7주차 How JavaScript’s Array Reduce Works Unreal Webcam Fun with getUserMedia() and HTML5 Canvas Speech Recognition","text":"30 Day Vanilla JS Coding Challenge Study - 7주차 How JavaScript’s Array Reduce Works Unreal Webcam Fun with getUserMedia() and HTML5 Canvas Speech Recognition 18. How JavaScript’s Array Reduce Works영상: https://youtu.be/SadWPo2KZWg reduce 메서드의 활용 방법 1234567891011121314151617181920// data-* 를 이용해 셀렉팅 후 배열 메서드 활용을 위해 Array.from() 사용const timeNodes = Array.from(document.querySelectorAll(&#x27;[data-time]&#x27;));// map을 통해 데이터를 가공 후 reduce를 통해 누적값 활용const seconds = timeNodes .map(node =&gt; node.dataset.time) .map(timeCode =&gt; &#123; const [mins, secs] = timeCode.split(&#x27;:&#x27;).map(parseFloat); return (mins * 60) + secs; &#125;) .reduce((total, vidSeconds) =&gt; total + vidSeconds); let secondsLeft = seconds; const hours = Math.floor(secondsLeft / 3600); secondsLeft = secondsLeft % 3600; const mins = Math.floor(secondsLeft / 60); secondsLeft = secondsLeft % 60; console.log(hours, mins, secondsLeft); 19. Unreal Webcam Fun with getUserMedia() and HTML5 Canvas영상: https://youtu.be/ElWFcBlVk-o getUserMedia()와 HTML5 캔버스를 활용 1234567891011121314// getUserMedia()를 통한 접근function getVideo() &#123; navigator.mediaDevices.getUserMedia(&#123; video: true, audio: false &#125;) .then(localMediaStream =&gt; &#123; video.srcObject = localMediaStream; video.play(); &#125;) .catch(err =&gt; &#123; console.error(`OH NO!!!`, err); &#125;);&#125;// canplay 이벤트 타입은 비디오를 재생할 수 있을 때 트리거 된다video.addEventListener(&#x27;canplay&#x27;, paintToCanvas); 이외에 로직은 RGB 값 및 캔버스 조작과 takePhoto() 함수를 통한 로직 20. Speech Recognition영상: https://youtu.be/0mJC0A72Fnw Web Speech API를 활용한 음성인식 12345678910111213141516171819202122232425262728293031window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;const recognition = new SpeechRecognition();// 중간결과 반환 여부 (기본값은 false)recognition.interimResults = true;recognition.lang = &#x27;en-US&#x27;;let p = document.createElement(&#x27;p&#x27;);const words = document.querySelector(&#x27;.words&#x27;);words.appendChild(p);recognition.addEventListener(&#x27;result&#x27;, e =&gt; &#123; const transcript = Array.from(e.results) .map(result =&gt; result[0]) .map(result =&gt; result.transcript) .join(&#x27;&#x27;); // 음성 인식 중 지정된 단어는 &#x27;💩&#x27;으로 대체 const poopScript = transcript.replace(/poop|poo|shit|dump/gi, &#x27;💩&#x27;); p.textContent = poopScript; if (e.results[0].isFinal) &#123; p = document.createElement(&#x27;p&#x27;); words.appendChild(p); &#125;&#125;);// 음성 인식이 끝나거나 종료되었을때recognition.addEventListener(&#x27;end&#x27;, recognition.start);recognition.start();","categories":[{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"}],"tags":[{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"}]},{"title":"Vanilla JS 30","slug":"2019-04-07-javascipt30-6","date":"2019-04-06T15:00:00.000Z","updated":"2023-02-12T14:14:44.057Z","comments":true,"path":"2019/04/07/2019-04-07-javascipt30-6/","link":"","permalink":"https://pocojang.github.io/2019/04/07/2019-04-07-javascipt30-6/","excerpt":"30 Day Vanilla JS Coding Challenge Study - 6주차 LocalStorage and Event Delegation CSS Text Shadow Mouse Move Effect Sorting Band Names without articles","text":"30 Day Vanilla JS Coding Challenge Study - 6주차 LocalStorage and Event Delegation CSS Text Shadow Mouse Move Effect Sorting Band Names without articles 15. LocalStorage and Event Delegation영상: https://youtu.be/YL1F4dCUlLc 로컬 스토리지와 이벤트 위임 리스트의 &lt;ul&gt; 태그에 이벤트를 등록하여 자식요소인 다수의 &lt;li&gt; 태그에 이벤트를 한번에 등록한다. 이외에 특별한 부분은 존재하지 않았으며 &lt;form&gt; 태그에 당연히 e.preventDefault()를 사용한 점과reset()을 활용한 부분을 다시 한번 상기시킬 수 있었다. 16. CSS Text Shadow Mouse Move Effect영상: https://youtu.be/zaz9gLI-Xac Text Shadow 효과 활용하기 1234567891011121314151617const &#123; offsetWidth: width, offsetHeight: height &#125; = hero;let &#123; offsetX: x, offsetY: y &#125; = e;if (this !== e.target) &#123; x = x + e.target.offsetLeft; y = y + e.target.offsetTop;&#125;const xWalk = Math.round((x / width * walk) - (walk / 2));const yWalk = Math.round((y / height * walk) - (walk / 2));text.style.textShadow = ` $&#123;xWalk&#125;px $&#123;yWalk&#125;px 0 rgba(255,0,255,0.7), $&#123;xWalk * -1&#125;px $&#123;yWalk&#125;px 0 rgba(0,255,255,0.7), $&#123;yWalk&#125;px $&#123;xWalk * -1&#125;px 0 rgba(0,255,0,0.7), $&#123;yWalk * -1&#125;px $&#123;xWalk&#125;px 0 rgba(0,0,255,0.7)`; mousemove 이벤트 타입을 사용하여 텍스트의 &#96;textShadow 스타일링을 수정한다. 17. Sorting Band Names without articles영상: https://youtu.be/PEEo-2mRQ7A 1234567const bands = [&#x27;The Plot in You&#x27;, &#x27;The Devil Wears Prada&#x27;, &#x27;Pierce the Veil&#x27;, &#x27;Norma Jean&#x27;, &#x27;The Bled&#x27;, &#x27;Say Anything&#x27;, &#x27;The Midway State&#x27;, &#x27;We Came as Romans&#x27;, &#x27;Counterparts&#x27;, &#x27;Oh, Sleeper&#x27;, &#x27;A Skylit Drive&#x27;, &#x27;Anywhere But Here&#x27;, &#x27;An Old Dog&#x27;];function strip(bandName) &#123; return bandName.replace(/^(a |the |an )/i, &#x27;&#x27;).trim();&#125;const sortedBands = bands.sort((a, b) =&gt; strip(a) &gt; strip(b) ? 1 : -1); sort() 메서드를 활용한 정렬과 정규표현식 활용 방법으로 딱히 특별한 내용은 없었다.","categories":[{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"}],"tags":[{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"}]},{"title":"Vanilla JS 30","slug":"2019-03-31-javascipt30-5","date":"2019-03-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.057Z","comments":true,"path":"2019/03/31/2019-03-31-javascipt30-5/","link":"","permalink":"https://pocojang.github.io/2019/03/31/2019-03-31-javascipt30-5/","excerpt":"30 Day Vanilla JS Coding Challenge Study - 5주차 JavaScript KONAMI CODE! Vanilla JavaScript Slide In on Scroll JavaScript Fundamentals: Reference VS Copy","text":"30 Day Vanilla JS Coding Challenge Study - 5주차 JavaScript KONAMI CODE! Vanilla JavaScript Slide In on Scroll JavaScript Fundamentals: Reference VS Copy 12. JavaScript KONAMI CODE!영상: https://youtu.be/_A5eVOIqGLU 키 입력 감지 1234567891011121314const pressed = [];const secretCode = &#x27;wesbos&#x27;;window.addEventListener(&#x27;keyup&#x27;, (e) =&gt; &#123; pressed.push(e.key); // 입력된 키의 배열을 최신순으로 최대 6개 유지시킨다 pressed.splice(-secretCode.length - 1, pressed.length - secretCode.length); // 미리 정의된 secretCode와 입력된 키 배열을 대조하여 UI에 변화를 준다. if (pressed.join(&#x27;&#x27;).includes(secretCode)) &#123; console.log(&#x27;DING DING!&#x27;); cornify_add(); &#125;&#125;); 13. Vanilla JavaScript Slide In on Scroll영상: https://youtu.be/uzRsENVD3W8 스크롤 이벤트 활용하기 1234567891011121314151617181920212223242526272829303132333435363738// 성능 최적화를 위한 함수function debounce(func, wait = 20, immediate = true) &#123; var timeout; return function() &#123; // 윈도우 객체 var context = this; // 스크롤 이벤트 var args = arguments; var later = function() &#123; timeout = null; if (!immediate) func.apply(context, args); &#125;; var callNow = immediate &amp;&amp; !timeout; clearTimeout(timeout); timeout = setTimeout(later, wait); if (callNow) func.apply(context, args); &#125;;&#125;;function checkSlide() &#123; sliderImages.forEach(sliderImage =&gt; &#123; const slideInAt = (window.scrollY + window.innerHeight) - sliderImage.height / 2; const imageBottom = sliderImage.offsetTop + sliderImage.height; const isHalfShown = slideInAt &gt; sliderImage.offsetTop; const isNotScrolledPast = window.scrollY &lt; imageBottom; // css 트랜스폼 translateX 속성 변경으로 스크롤을 통한 가로 슬라이드 효과를 준다. if (isHalfShown &amp;&amp; isNotScrolledPast) &#123; sliderImage.classList.add(&#x27;active&#x27;); &#125; else &#123; sliderImage.classList.remove(&#x27;active&#x27;); &#125; &#125;);&#125;// 성능 최적화를 위해 debounce()에 함수를 위임한다.window.addEventListener(&#x27;scroll&#x27;, debounce(checkSlide)); 14. JavaScript Fundamentals: Reference VS Copy영상: https://youtu.be/YnfwDQ5XYF4 JavaScript의 객체와 배열 그리고 참조 vs 복사 배열1234567891011121314// 원본 배열const players = [&#x27;Wes&#x27;, &#x27;Sarah&#x27;, &#x27;Ryan&#x27;, &#x27;Poppy&#x27;];// 배열 복사를 예상const team = players;// 문제 발생team[3] = &#x27;Lux&#x27;;// 대안const team2 = players.slice();const team3 = [].concat(players);const team4 = [...players];const team5 = Array.from(players); 객체123456789101112131415// 원본 객체const person = &#123; name: &#x27;Wes Bos&#x27;, age: 80&#125;;// 객체 복사를 예상const captain = person;// 문제 발생captain.number = 99;// 대안const cap2 = Object.assign(&#123;&#125;, person, &#123; number: 99, age: 12 &#125;);const cap3 = &#123;...person&#125;; 객체 (1 depth 초과)123456789101112131415161718192021// 원본 객체const wes = &#123; name: &#x27;Wes&#x27;, age: 100, social: &#123; twitter: &#x27;@wesbos&#x27;, facebook: &#x27;wesbos.developer&#x27; &#125;&#125;;// 객체 복사를 예상const dev = Object.assign(&#123;&#125;, wes);// 문제 발생dev.social.twitter = &#x27;@coolman&#x27;;// 대안// lodash의 cloneDeep 사용// JSON 활용const dev2 = JSON.parse(JSON.stringify(wes));","categories":[{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"}],"tags":[{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"}]},{"title":"Vanilla JS 30","slug":"2019-03-24-javascipt30-4","date":"2019-03-23T15:00:00.000Z","updated":"2023-02-12T14:14:44.056Z","comments":true,"path":"2019/03/24/2019-03-24-javascipt30-4/","link":"","permalink":"https://pocojang.github.io/2019/03/24/2019-03-24-javascipt30-4/","excerpt":"30 Day Vanilla JS Coding Challenge Study - 4주차 14 Must Know Chrome Dev Tools Tricks JS Checkbox Challenge! Custom HTML5 Video Player","text":"30 Day Vanilla JS Coding Challenge Study - 4주차 14 Must Know Chrome Dev Tools Tricks JS Checkbox Challenge! Custom HTML5 Video Player 9. 14 Must Know Chrome Dev Tools Tricks영상: https://youtu.be/xkzDaKwinA8 크롬 개발자 도구의 콘솔를 활용하는 팁 123456789101112131415161718192021222324252627282930// 보간법console.log(&#x27;Hello I am a %s string!&#x27;, &#x27;💩&#x27;);// 스타일링console.log(&#x27;%c I am some great text&#x27;, &#x27;font-size:50px; background:red; text-shadow: 10px 10px 0 blue&#x27;);const p = document.querySelector(&#x27;p&#x27;);// 테스팅console.assert(p.classList.contains(&#x27;ouch&#x27;), &#x27;That is wrong!&#x27;);// 콘솔 그룹화dogs.forEach(dog =&gt; &#123; console.groupCollapsed(`$&#123;dog.name&#125;`); console.log(`This is $&#123;dog.name&#125;`); console.log(`$&#123;dog.name&#125; is $&#123;dog.age&#125; years old`); console.log(`$&#123;dog.name&#125; is $&#123;dog.age * 7&#125; dog years old`); console.groupEnd(`$&#123;dog.name&#125;`);&#125;);// 타이머console.time(&#x27;fetching data&#x27;);fetch(&#x27;https://api.github.com/users/wesbos&#x27;) .then(data =&gt; data.json()) .then(data =&gt; &#123; console.timeEnd(&#x27;fetching data&#x27;); console.log(data); &#125;);// 테이블 표기console.table(dogs); 콘솔이 이렇게 다양함에도 불구하고 개인적으로console.log()와 console.dir()로 대부분 해결하고는 했다. 때문에 앞으로 의식적으로라도 활용하기 좋을 것 같은 것들만 정리했다. 10. JS Checkbox Challenge!영상: https://youtu.be/RIPYsKx1iiU shift 키로 전체 선택 가능한 체크박스 리스트 1234567891011121314151617181920212223242526272829const checkboxes = document.querySelectorAll(&#x27;.inbox input[type=&quot;checkbox&quot;]&#x27;);// 마지막으로 선택된 체크박스let lastChecked;function handleCheck(e) &#123; let inBetween = false; // 쉬프트 키 이벤트 발생 &amp; 체크박스 true 트리거 if (e.shiftKey &amp;&amp; this.checked) &#123; checkboxes.forEach((checkbox) =&gt; &#123; if (checkbox === this || checkbox === lastChecked) &#123; inBetween = !inBetween; &#125; if (inBetween) &#123; checkbox.checked = true; &#125; &#125;); &#125; lastChecked = this;&#125;checkboxes.forEach((checkbox) =&gt; checkbox.addEventListener(&#x27;click&#x27;, handleCheck));&#125; Flag 변수 inBetween &amp; lastChecked를 활용한다 this의 잦은 활용과 불필요해보이는 if문이 있어 리팩토링해볼만 할 부분으로 보인다. checkboxes에 이벤트 등록 방법을 달리할 수 있을 것 같다. 11. Custom HTML5 Video Player영상: https://youtu.be/yx-HYerClEA HTML5 API를 활용한 비디오 플레이어 핸들링 방법을 다룬다. 123456789101112131415161718192021222324252627282930313233// 비디오 플레이 토글function togglePlay() &#123; const method = video.paused ? &#x27;play&#x27; : &#x27;pause&#x27;; video[method]();&#125;// 비디오 플레이 버튼 아이콘 변경function updateButton() &#123; const icon = this.paused ? &#x27;►&#x27; : &#x27;❚ ❚&#x27;; toggle.textContent = icon;&#125;// 스킵 버튼 클릭시 비디오 현재 플레이 시간에 반영function skip() &#123; video.currentTime += parseFloat(this.dataset.skip);&#125;// 3가지 레인지 영역에 대한 핸들링을 한번에 처리function handleRangeUpdate() &#123; video[this.name] = this.value;&#125;// timeupdate 이벤트 발생시 진행바의 스타일링 수정function handleProgress() &#123; const percent = (video.currentTime / video.duration) * 100; progressBar.style.flexBasis = `$&#123;percent&#125;%`;&#125;// 비디오 재생 진행바에 대한 마우스 이벤트(클릭/다운/업/무브)를 처리한다function scrub(e) &#123; const scrubTime = (e.offsetX / progress.offsetWidth) * video.duration; video.currentTime = scrubTime;&#125; video API의 play, pause, timeupdate 이벤트 타입 활용도와 강력함을 알 수 있었다. 이밖에도 활용도 높은 API가 있기 때문에 HTML5 지원 환경에서 작업시HTML5 API만으로 괜찮은 비디오 플레이어를 개발할 수 있을 것 같다.","categories":[{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"}],"tags":[{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"}]},{"title":"Vanilla JS 30","slug":"2019-03-17-javascipt30-3","date":"2019-03-16T15:00:00.000Z","updated":"2023-02-12T14:14:44.056Z","comments":true,"path":"2019/03/17/2019-03-17-javascipt30-3/","link":"","permalink":"https://pocojang.github.io/2019/03/17/2019-03-17-javascipt30-3/","excerpt":"30 Day Vanilla JS Coding Challenge Study - 3주차 Ajax Type Ahead with fetch() Array Cardio Day 2 Let’s build something fun with HTML5 Canvas","text":"30 Day Vanilla JS Coding Challenge Study - 3주차 Ajax Type Ahead with fetch() Array Cardio Day 2 Let’s build something fun with HTML5 Canvas 6. Ajax Type Ahead with fetch()영상: https://youtu.be/y4gZMJKAeWs 미리 준비된 JSON Data를 Fetch API를 사용하여 받아온 후 정규표현식을 통해 조작한다. 123fetch(endpoint) .then(blob =&gt; blob.json()) .then(data =&gt; cities.push(...data)); body.json()를 사용하여 JSON을 파싱하는데 JSON.parse()와 다른 부분이 흥미롭다body.json()의 경우 비동기이며 Promise 객체를 반환한다. 참고자료: body.json() vs JSON.parse() 123function numberWithCommas(x) &#123; return x.toString().replace(/\\B(?=(\\d&#123;3&#125;)+(?!\\d))/g, &#x27;,&#x27;);&#125; 3자리 단위로 콤마를 찍어주는 정규표현식 12345678// Case 1const regex = new RegExp(wordToMatch, &#x27;gi&#x27;);return place.city.match(regex) || place.state.match(regex)// Case 2const regex = new RegExp(this.value, &#x27;gi&#x27;);const cityName = place.city.replace(regex, `&lt;span class=&quot;hl&quot;&gt;$&#123;this.value&#125;&lt;/span&gt;`);const stateName = place.state.replace(regex, `&lt;span class=&quot;hl&quot;&gt;$&#123;this.value&#125;&lt;/span&gt;`); 정규표현식 메서드를 사용하기 위한 방법 7. Array Cardio Day 2영상: https://youtu.be/QNmRfyNg1lw JavaScript Array 강화 훈련2 이전에 나왔던 4강의 JavaScript Array Cardio Practice - Day 1과 별 다를게 없었다. 강의 속 사용된 Array Method Array.prototype.some Array.prototype.every Array.prototype.find Array.prototype.findIndex 8. Let’s build something fun with HTML5 Canvas영상: https://youtu.be/8ZGAzJ0drl0 HTML5 Canvas를 활용한 그림판 1&lt;canvas id=&quot;draw&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt; 캔버스 DOM 요소 생성 12const canvas = document.querySelector(&#x27;#draw&#x27;);const ctx = canvas.getContext(&#x27;2d&#x27;); 캔버스 생성시 렌더링 타입을 getContext()를 통해 초기화해줘야한다. 1234567891011121314151617// 윤곽선 색상ctx.strokeStyle = &#x27;#BADA55&#x27;;// 모서리 스타일ctx.lineJoin = &#x27;round&#x27;;// 선의 끝점 스타일ctx.lineCap = &#x27;round&#x27;;ctx.lineWidth = 100;// 도형이 겹쳐질때의 방식ctx.globalCompositeOperation = &#x27;multiply&#x27;;// 도형을 그릴때의 시작 경로ctx.beginPath();// 지정된 좌표로 이동ctx.moveTo(lastX, lastY);// 지정된 위치까지 선을 그린다ctx.lineTo(e.offsetX, e.offsetY);// 현재 or 지정된 경로로 윤곽선을 그린다.ctx.stroke(); 전체적인 로직은 마우스 이벤트를 감지한 후 캔버스 객체를 활용하여 그림을 그리는 방식이다.","categories":[{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"}],"tags":[{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"}]},{"title":"Vanilla JS 30","slug":"2019-03-10-javascipt30-2","date":"2019-03-09T15:00:00.000Z","updated":"2023-02-12T14:14:44.056Z","comments":true,"path":"2019/03/10/2019-03-10-javascipt30-2/","link":"","permalink":"https://pocojang.github.io/2019/03/10/2019-03-10-javascipt30-2/","excerpt":"30 Day Vanilla JS Coding Challenge Study - 2주차 Woah! CSS Variables?! JavaScript Array Cardio Practice - Day 1 Flexbox + JavaScript Image Gallery","text":"30 Day Vanilla JS Coding Challenge Study - 2주차 Woah! CSS Variables?! JavaScript Array Cardio Practice - Day 1 Flexbox + JavaScript Image Gallery 3. Woah! CSS Variables?!영상: https://youtu.be/AHLNzv13c2I 사용자 정의 CSS 속성 사용하기 (변수) 이번 섹션에서 JavaScript는 특별한 부분이 딱히 보이지 않았으며 CSS에 흥미로운 점이 있었다. 123456789101112131415:root &#123; --base: #ffc600; --spacing: 10px; --blur: 10px;&#125;img &#123; padding: var(--spacing); background: var(--base); filter: blur(var(--blur));&#125;.hl &#123; color: var(--base);&#125; 가상 클래스 :root를 통하여 변수를 선언할 수 있다 -- 프리픽스를 통해 변수를 사용할 수 있다 getPropertyValue와 setProperty를 사용하여 JS로도 접근이 가능하다 자세한 정보: https://wit.nts-corp.com/2017/06/27/4731 4. JavaScript Array Cardio Practice - Day 1영상: https://youtu.be/HB1ZC7czKRs JavaScript Array 강화 훈련 이번 섹션에서는 다양한 Array 기본 내장 메서드를 활용하는 섹션이기때문에 딱히 어려움은 없었다. 강의 속 사용된 Array Method Array.prototype.map Array.prototype.filter Array.prototype.sort Array.prototype.reduce 5. Flexbox + JavaScript Image Gallery영상: https://youtu.be/9eif30i26jg Flexbox를 활용한 이미지 갤러리 Flexbox를 통해 레이아웃된 이 이미지 갤러리에 트랜지션(transitionend) 효과를 트리거하여 동작하는 구동 방식이다. Safari에서의 transitionend 이벤트 프로퍼티명은 flex Chrome에서의 transitionend 이벤트 프로퍼티명은 flex-grow 12345678910111213141516const panels = document.querySelectorAll(&#x27;.panel&#x27;);function toggleOpen() &#123; console.log(&#x27;Hello&#x27;); this.classList.toggle(&#x27;open&#x27;);&#125;function toggleActive(e) &#123; console.log(e.propertyName); if (e.propertyName.includes(&#x27;flex&#x27;)) &#123; this.classList.toggle(&#x27;open-active&#x27;); &#125;&#125;panels.forEach(panel =&gt; panel.addEventListener(&#x27;click&#x27;, toggleOpen));panels.forEach(panel =&gt; panel.addEventListener(&#x27;transitionend&#x27;, toggleActive)); classList.toggle()은 jQuery의 toggleClass()과 같은 동작을 한다.","categories":[{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"}],"tags":[{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"}]},{"title":"Vanilla JS 30","slug":"2019-03-03-javascipt30-1","date":"2019-03-02T15:00:00.000Z","updated":"2023-02-12T14:14:44.056Z","comments":true,"path":"2019/03/03/2019-03-03-javascipt30-1/","link":"","permalink":"https://pocojang.github.io/2019/03/03/2019-03-03-javascipt30-1/","excerpt":"30 Day Vanilla JS Coding Challenge Study - 1주차 JavaScript Drum Kit CSS + JS Clock","text":"30 Day Vanilla JS Coding Challenge Study - 1주차 JavaScript Drum Kit CSS + JS Clock 1. JavaScript Drum Kit영상: https://youtu.be/VuN8qwZoego 백그라운드에서 입력받으면 키를 통해 이미 지정된 로컬 경로의 이미지가 실행되는 방식이다.(CSS 효과도 있다) 1234&lt;audio data-key=&quot;65&quot; src=&quot;sounds/clap.wav&quot;&gt;&lt;/audio&gt;&lt;audio data-key=&quot;83&quot; src=&quot;sounds/hihat.wav&quot;&gt;&lt;/audio&gt;.. HTML5 &lt;audio&gt; 요소가 사용되었다. 입력받을 키코드를 미리 data-*를 통해 커스텀 어트리뷰트로 정의하였다. 12const audio = document.querySelector(`audio[data-key=&quot;$&#123;e.keyCode&#125;&quot;]`);const key = document.querySelector(`div[data-key=&quot;$&#123;e.keyCode&#125;&quot;]`); data-* 셀렉팅 방법 12audio.currentTime = 0;audio.play(); HTML &lt;audio&gt; API 활용12const keys = Array.from(document.querySelectorAll(&#x27;.key&#x27;));keys.forEach((key) =&gt; key.addEventListener(&#x27;transitionend&#x27;, removeTransition)); 굳이 Array.from를 사용하지 않고 for of...만 활용하는 것이 더 좋을 것 같다. 2. CSS + JS Clock영상: https://youtu.be/xu87YWbr4X0 CSS의 이용한 transform을 이용한 JS Clock 123456789101112131415function setDate() &#123; const now = new Date(); const seconds = now.getSeconds(); const mins = now.getMinutes(); const hour = now.getHours(); const secondsDegrees = (seconds / 60) * 360 + 90; const minsDegrees = (mins / 60) * 360 + (seconds / 60) * 6 + 90; const hourDegrees = (hour / 12) * 360 + (mins / 60) * 30 + 90; secondHand.style.transform = `rotate($&#123;secondsDegrees&#125;deg)`; minsHand.style.transform = `rotate($&#123;minsDegrees&#125;deg)`; hourHand.style.transform = `rotate($&#123;hourDegrees&#125;deg)`;&#125; 시분초가 한번에 핸들링 되는 setDate() 함수를 1000밀리세컨드마다 setInterval()을 통해 호출하고 있다. 시분초의 DOM을 미리 정의하고 셀렉팅하여 CSS의 transform : rotate의 각도를 1000밀리세컨드마다 변경해준다. 특별한 로직이 없지만 CSS만으로도 얼마나 많은 효과를 줄 수 있는지 다시 한번 깨닫는다","categories":[{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"}],"tags":[{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"}]},{"title":"모던 자바스크립트","slug":"2019-02-22-understanding-ecmascript-6","date":"2019-02-21T15:00:00.000Z","updated":"2023-02-12T14:14:44.056Z","comments":true,"path":"2019/02/22/2019-02-22-understanding-ecmascript-6/","link":"","permalink":"https://pocojang.github.io/2019/02/22/2019-02-22-understanding-ecmascript-6/","excerpt":"예제로 배우는 ECMAScript 6 핵심 기능! 모던 자바스크립트 리뷰!","text":"예제로 배우는 ECMAScript 6 핵심 기능! 모던 자바스크립트 리뷰! 책 정보원제 : Understanding Ecmascript 6출판사 : 인사이트저자 : 니콜라스 자카스역자 : 김두형, 정재훈출간 : 2017-11-08페이지 : 388ISBN : 9788966262113가격 : 28,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=12723816: https://leanpub.com/understandinges6 읽기 전에 뭔가 고전적인 표지 일반적이고 끌림 없는 제목 예제로만 가득할 것 같은 느낌의 부제 이러한 첫인상에도 불구하고 니콜라스 자카스의 책은 언제나 옳다라는 생각으로 책을 고르게 되었다(또한 ES6에 대한 사전 지식이 있어 책이 꼭 필요한 상태는 아니였다) 결국 JavaScript를 위한 책처음 책을 마주했을 때는 예제를 통해 ES6를 훑어보는 책이구나 정도였다. 하지만 이 책의 진가는 깊이와 전개에 있었다. &#x3D;&gt; JavaScript에서의 개념&#x3D;&gt; ES6 이전의 문제점 및 코드&#x3D;&gt; 해당 Feature가 생겨난 이유와 코드&#x3D;&gt; Best Practice 책은 위와 같은 흐름으로 진행된다. JavaScript 기본 지식이 없다면 읽을 수 없으며이미 ES2015+ Feature에 대해서도 익숙한 개발자도 기본기와 개념을 다질 수 있는 책이다. 결론JavaScript는 계속 공부 하면 되는 거고 ES2015+부터는 검색해서 찾아 쓰면 되겠지 라는 접근법으로 ES6에 다가갔던 나의 부족함 얕은 깊이를 체감할 수 있는 책이었다. 또한 저자가 저자의 책 다운 책을 써줘서 감사했고 역자의 적절한 번역으로 편하게 읽을 수 있어 좋았다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"javascript","slug":"book/programming/javascript","permalink":"https://pocojang.github.io/categories/book/programming/javascript/"}],"tags":[{"name":"예제로 배우는 ECMAScript 6 핵심 기능","slug":"예제로-배우는-ECMAScript-6-핵심-기능","permalink":"https://pocojang.github.io/tags/%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-ECMAScript-6-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EB%8A%A5/"},{"name":"ES6","slug":"ES6","permalink":"https://pocojang.github.io/tags/ES6/"},{"name":"ES2015","slug":"ES2015","permalink":"https://pocojang.github.io/tags/ES2015/"}]},{"title":"자바스크립트를 깨우치다","slug":"2019-02-15-enlightenment-js","date":"2019-02-14T15:00:00.000Z","updated":"2023-02-12T14:14:44.056Z","comments":true,"path":"2019/02/15/2019-02-15-enlightenment-js/","link":"","permalink":"https://pocojang.github.io/2019/02/15/2019-02-15-enlightenment-js/","excerpt":"객체로 풀어보는 JavaScript의 원리! 자바스크립트를 깨우치다","text":"객체로 풀어보는 JavaScript의 원리! 자바스크립트를 깨우치다 책 정보출판사 : 비제이퍼블릭저자 : 코디 린들리역자 : 김태곤출간 : 2013.07.22페이지 : 183ISBN : 9788994774435가격 : 18,500 원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=7262575 소개믿음이 가는 오라일리의 서적 그리고 존경하는 역자 김태곤님하지만 너무 오래된 출간일 이 책을 구매하고자 하기에는 뭔가 부족했지만 결국 기초를 다지기 위해 훑어보기에는 충분히 얇은 분량또한 중고 서적으로 저렴한 가격 결국 책 구매 후 일주일도 되지 않아 빠르게 읽어볼 수 있었다. JavaScript를 훑어보다책은 목차대로 훌훌 넘어가면서도 가이드와 관점을 제시하며 독자를 올바른 방향으로 인도한다. 제목 그대로 책을 보며 오!하며 깨우치는 순간이 있기도 하고오!하며 잊었던 개념들을 다시 한번 상기할 수도 있었다. 이제는 놓아줘야 할 때너무나 오래되었다. 책이 출간되었던 13년도 그랬지만 현시점에서조차 JavaScript 생태계는 무한하게 성장하며 변해가고 있다.이 책은 출간 시점을 기준으로 초중급 개발자를 타겟으로 하고 있다고 소개되어있지만 요즘 Front-end 신입 구직자들이 굉장히 뛰어나기 때문에 이 정도의 책이라면 어렵지 않게 읽을 수 있을 거라는 생각이 든다. 또한 ES3의 요약본이라고도 할 수 있는 책이기에 ES5조차 다루지 않는다는 것도 아쉬운 부분이다.(또한 비동기를 다루지 않는다) 결론JavaScript 입문 서적을 추천할 때 종종 보이는 인사이드 자바스크립트와 유사하지만 쉬운 버전의 책이라고 봐도 무방하다.(인사이드 자바스크립트는 결코 입문 수준의 책이 아니다) JavaScript의 기초를 다시 한번 다지고 싶을 때 적은 분량을 원할 때 레거시한 JavaScript를 봐도 좋을 때 인사이드 자바스크립트를 봐야 하는데 너무 어려워서 보기 힘들 때 위의 상황에 빠르게 JavaScript 개념을 정리할 수 있는 책이라고 할 수 있다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"javascript","slug":"book/programming/javascript","permalink":"https://pocojang.github.io/categories/book/programming/javascript/"}],"tags":[{"name":"자바스크립트를 깨우치다","slug":"자바스크립트를-깨우치다","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EA%B9%A8%EC%9A%B0%EC%B9%98%EB%8B%A4/"}]},{"title":"객체지향 자바스크립트의 원리","slug":"2018-12-23-ths-principles-of-oop-js","date":"2018-12-22T15:00:00.000Z","updated":"2023-02-12T14:14:44.056Z","comments":true,"path":"2018/12/23/2018-12-23-ths-principles-of-oop-js/","link":"","permalink":"https://pocojang.github.io/2018/12/23/2018-12-23-ths-principles-of-oop-js/","excerpt":"객체지향 자바스크립트의 원리","text":"객체지향 자바스크립트의 원리 책 정보출판사 : 비제이퍼블릭저자 : 니콜라스 C. 자카스역자 : 김태곤출간 : 2015.03.26페이지 : 131ISBN : 9788994774923가격 : 16,500 원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=8819616 소개정확히 말하자면 객체에 집중적으로 파고들고 학습하는 책은 아니다. 사실 그런 면을 기대하고 본 책이지만 그렇지 못해 실망한 부분도 없지 않아 있었다. 제목과는 다르게 책은 일반적인 JS 서적과 비슷한 흐름으로 이어지지만 객체 입장에서 먼저 생각하는 내용이 많다. 또한 객체를 깨우치기보다는 자바스크립트로 객체를 어떻게 다루는지에 대해ES5로 잘풀어내는 책이다. 얇지만 강력한이 책을 선택한데에는 이유는 여러가지가 있었다. 니콜라스 자카스 김태곤님 얇다 한참 공부가 잘안되고 집중이 안될때 공부는 해야겠고 결국 슬림한 분량으로 내 마음을 사로잡았다. 하지만 내용은 그렇게 얇지 않다.군더더기 없는 내용과 핵심만 설명하며 ES5를 충분히 활용한다. 이 책을 처음 본 독자는 이렇게 얇은 책에 이런 많은 내용을?! 생각하게 될 것이다. 당연히 김태곤님의 번역은 안심을 하고 보게된다. 항상 좋은 책을 번역해주시는 것에 감사함을 느끼는!! 깊이의 아쉬움충분한 설명 좋은 예제 좋은 두께를 보이는 책이다. 입문이 아닌 기초 서적이라고 봐도 무방할 것 같은 이 책은 제목 그대로 객체를 주로 다루긴 하지만 실제로는 JavaScript의 기초와 기본을 넘나들며 간결하게 설명하고 풀이해준다. 하지만 이 책만을 가지고 JavaScript의 객체를 굉장히 심도깊게 연구하며 습득하기에는 부족함이 많은 편이다. 결론 보고 또 보고 싶을정도로 얇고 가볍지만 강력한 책으로 JavaScript를어느정도 습득한 초보 개발자들에게 한단계 올라갈 수 있는 디딤돌 같은 책이라고 할 수 있을 것 같다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"javascript","slug":"book/programming/javascript","permalink":"https://pocojang.github.io/categories/book/programming/javascript/"}],"tags":[{"name":"객체지향 자바스크립트의 원리","slug":"객체지향-자바스크립트의-원리","permalink":"https://pocojang.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%9B%90%EB%A6%AC/"},{"name":"객체지향 자바스크립트","slug":"객체지향-자바스크립트","permalink":"https://pocojang.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"},{"name":"자바스크립트 oop","slug":"자바스크립트-oop","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-oop/"}]},{"title":"(번역) 멋진 ES6 - var, let 그리고 const를 깊이 살펴보다","slug":"2018-11-25-var-let-and-const","date":"2018-11-24T15:00:00.000Z","updated":"2023-02-12T14:14:44.056Z","comments":true,"path":"2018/11/25/2018-11-25-var-let-and-const/","link":"","permalink":"https://pocojang.github.io/2018/11/25/2018-11-25-var-let-and-const/","excerpt":"이 글에서 ES6의 몇 가지 멋진 것들에 대해 탐구할 것입니다.(고전적인 var에 상반된 let, const에 대해) 시작합시다!","text":"이 글에서 ES6의 몇 가지 멋진 것들에 대해 탐구할 것입니다.(고전적인 var에 상반된 let, const에 대해) 시작합시다! JavaScript 변수는 데이터의 값을 저장하는 컨테이너(그릇, 용기)입니다. 일반적으로 JavaScript에서 새로운 변수를 어떻게 만들까요?좋아요. 저는 이 질문이 바보 같은 질문이라는 걸 압니다. (우리는 모두 “var“ 를 사용합니다) Var12var firstVar; // firstVar 의 기본값을 선언하세요 - undefinedvar secondVar = 2; // secondVar 변수를 선언하고 2를 할당하세요. 누군가를 위해 설명하자면 var는 영어로 “변수”를 의미합니다 (확실히 😆). 많은 현대 언어와 마찬가지로 JavaScript는 유연함을 제공하므로 변수를 선언할 때 특정 타입을 결정할 필요가 없습니다. 정수형? 문자열? 객체? 함수? … — 모두 var 하나면 딱 다음과 같은 상황을 만나기 전까지는 어렵지 않습니다. 12345678var increment = 1;if (increment === 1) &#123; var increment; // 기본값을 사용하여 increment를 다시 선언합니다. // 무엇이든 해보세요.&#125;console.log(increment); // 무엇이 출력될까요? 도대체 무슨 일이 벌어지고 있는 걸까요? 우선 호이스팅에 대해 언급할 필요가 있습니다. 호이스팅 면밀하게 관찰하기 호이스팅은 모든 변수 및 함수 선언을 코드가 작성된 위치와 관계없이 실행 컨텍스트의 컴파일 단계 중에 먼저 메모리에 저장되는 JavaScript의 기본 동작을 말합니다. 좀 더 일반적으로 설명하자면 모든 선언을 현재 스코프의 맨 위 로 이동시키는 JavaScript의 동작입니다. (물리적인 코드 변경은 전혀 없으며) 다른 모든 작업보다 먼저 처리됩니다. 위의 예제를 살펴보면 컴파일 단계에서 코드는 다음과 같이 이해할 수 있습니다. 123456789var increment;var increment;increment = 1;if (increment === 1)&#123; ...&#125;console.log(increment); // 1 또 다른 예제: 123456789var x = 0;y = 1;console.log(sumOf(x, y));var y;function sumOf(a, b) &#123; return a + b;&#125; 다음과 같이 처리됩니다: 1234567891011var x;var y;function sumOf(a, b) &#123; return a + b;&#125;x = 0;y = 1;console.log(sumOf(x,y)); 주의사항JavaScript의 호이스팅은 선언이 아닌 할당에만 적용됩니다.모든 값 할당은 코드에 작성 또는 위치하는 곳과 같은 위치에서 처리며 다음 결과를 얻습니다. 1234console.log(x); x = 3; var x = 1; console.log(x); 1, 3 출력을 예상할 수 있지만 출력 결과는 undefined, 1 입니다. 또한 위에서 언급한 실행 컨텍스트는 (JavaScript 문서에 따르면) 선언된 var 변수의 스코프입니다.그렇다면 var 변수 선언 &amp; 할당에 어떤 영향을 미칠까요? 실행 컨텍스트는 무엇일까요?실행 컨텍스트는 Javascript 코드가 실행 &#x2F; 평가되는 환경입니다. 다음 중 하나가 될 수 있습니다. 전역 — 기본 환경 함수 — 함수 내부 환경 Eval — eval 함수 내부 환경 따라서 여기서 var 변수의 스코프는 함수 내부 또는 전역 컨텍스트에 있습니다. 다른 모든 블록 컨텍스트 - {} 중괄호, 문, 표현식 등의 내부 코드 블록을 의미합니다…-위에서 정의한 3가지 유형이 아닌 경우 언급된 변수의 스코프에는 영향을 미치지 않습니다. 결과적으로 코드 문 블록, 표현식 (if…else … 문, 반복문 등) 에서 변수를 선언하는 것은 컴파일러 &#x2F; 작성 단계의 맨 위에 선언하는 것으로 이해할 수 있습니다. 12345678function testMe() &#123; while(true) &#123; var x = 2; break; &#125; console.log(x); // while 문 내부에 x가 선언되어 있음에도 불구하고 2 가 출력됩니다&#125; 이게 바로 var입니다.보시다시피 이 var 문은 개발자에게 필요한 모든 유연성을 제공합니다 (하지만 남용해서는 안 됩니다!). 그렇다면 왜 ES6에서는 두 개의 문(let 과 const)을 더 도입하려고 애쓸까요?자 이제 알아봅시다. Letvar와 유사하게 변수를 선언하고 값을 할당할 수 있습니다(선택적으로).그러나 var와 달리 변수 선언이 블록 스코프 내부의 값으로만 선언됩니다. 이것은 변수가 표현식 또는 문, 블록 (&#123;&#125;) 내부에서만 선언되고 존재하도록 제한되며 일반적인 실행 컨텍스트 외에 하위 블록에서도 사용할 수 있음을 의미합니다. (둘러싸인 함수 등) 따라서 위 예제의x는 대부분의 언어와 마찬가지로 while 블록 스코프 내에서 제한되지 않지만 var를 let로 바꾸면 결과가 변경됩니다 1234567function testMe() &#123; while(true) &#123; let x = 2; break; &#125; console.log(x); //ReferenceError: x는 정의되지 않았습니다.&#125; 네. undefined가 아닌 null이 아닌 2가 아닌 대신 ReferenceError입니다. 이렇게 하면 변수의 지역성 이 보장되므로 이전에 같은 이름으로 선언된 변수를 실수로 변경하지 않으므로 안심할 수 있습니다. 이 상황에서와 같이 : 12345var x = 1;&#123; let x = 3;&#125;console.log(x); // 여전히 1 Yippie (hippie와 New Left의 중간을 자처하는 미국의 젊은이), 🐛가 숨겨질 기회가 줄어듭니다! 잠깐! 더 있습니다. 블록 스코프로 제한되기 때문에 마침내 클로저의 도움 없이 private 멤버를 구현할 수 있습니다. 123456789101112var Person;&#123; let name; Person = function(_name)&#123; name = _name; &#125;; Person.prototype.getName = () =&gt; name;&#125;var person = new Person(&#x27;Maya&#x27;);console.log(name); // 아무것도 출력되지 않습니다console.log(person.getName()); // Maya var와 다른 중요한 차이점은 변수 호이스팅이 let에는 적용되지 않는다는 점입니다.즉 컴파일 단계에서 let 선언은 현재 위치에 그대로 유지되고 다른 코드에서 먼저 처리되지 않습니다.(일명 var처럼 컨텍스트의 맨 위로 이동하지 않습니다.) 따라서 이 예제를 실행할 때 12345x = 5;y = 2;let y; var x; y에 ReferenceError를 다시 나타내지만 x에는 그렇지 않습니다. 마지막으로 let을 전역 컨텍스트에서 사용할 때 var와는 달리 전역 객체 대한 프로퍼티를 생성하지 않습니다.우연이라도 전역 객체를 어지럽히지 않습니다!!! 🚀 1234567var x = 5;let y = 4;console.log(this.x); // 5console.log(window.x); // 5console.log(this.y); // undefinedconsole.log(window.y); // undefined var와 달리 let 변수를 다시 선언하면 SyntaxError가 발생합니다. x에 대한 SyntaxError 따라서 let를 사용할 때 var 선언의 일반적인 방법보다 더 많은 제한 &#x2F; 한계(더 좋게 말하면)가 있을 것입니다. const는 어떨까요? Const예를 들어 템플릿, 기본 메시지 등과 같은 데이터 변수가 있습니다.(상수로 사용하기 위함) JavaScript를 사용하여 애플리케이션 전체에서 이러한 데이터가 변경되지 않도록 하려면 어떻게 해야 할까요? ES6 이전 한 가지 방법 - 작성하는 것에 주의하세요(또는 다른 개발자가 상수에 사용하는 네이밍 컨벤션을 알아채고 이해하도록 기도하라). ES6 이후 (하나님 감사합니다) 우리는 const를 가집니다. const - let과 동일하게 지역 블록 스코프 변수를 선언하고 초기화할 수 있습니다.따라서 let에는 다음과 같은 모든 제한이 있습니다: 선언된 변수는 일반적인 실행 컨텍스트 외에 표현식, 문 코드의 {} 블록 내부에서만 사용할 수 있습니다. const에 호이스팅이 적용되지 않습니다. 전역 컨텍스트에서 사용될 때 전역 객체에 프로퍼티가 생성되지 않습니다. 선언된 변수를 다시 선언할 수 없습니다. 또한 누구나 추측할 수 있듯이 const는 상수를 뜻합니다: 선언된 변수는 값으로 초기화해야 합니다. 1const myConstants; // SyntaxError: const 선언에 초기화 누락 선언된 변수는 한 번의 값으로만 할당할 수 있습니다. 재할당 없음(상수 값에 대한) 하지만 한 가지 단점은 할당된 값 자체가 객체(객체, 배열 등)의 형태일 경우에도 여전히 수정할 수 있다는 것입니다. 예: 1234567891011const myConstant = &#123;name: &quot;Constant&quot;&#125;;myConstant = &#123;name: &quot;new Constant&quot;&#125;; // 오류myConstant.name = &quot;new Constant&quot;; // 좋아요console.log(myConstant.name); // 새로운 상수const arr = [1, 2];arr = [2,3]; // 오류arr[0] = 2; // 좋아요console.log(arr); //[2,2] 확실하고 이해하기 쉽지 않습니까? 일반적으로 이 새로운 문이 가져다주는 장점을 알아차렸을 것입니다.그러니 요약해 봅시다. let 그리고 const의 장점 오염 방지 - 불필요한 프로퍼티를 지닌 전역 객체 숨겨진 🐛 피하기 - 실수로 상수 값을 수정하거나 서로 다른 범위 블록에 있지만 동일한 이름으로 선언된 잘못된 변수를 업데이트 등 불필요한 호이스팅 피하기 더 많은 제한을 추가하여 보다 안정적이고 체계적이며 읽기 쉬운 코드(var로 선언된 변수가 const가 되어야 할 경우를 알 수 있습니까??). 결론실제로 let과 const가 var에 비해 얼마나 많은 장점을 가지고 var를 대체하기 위한 것이 아니라 더 많은 강제 사항을 JavaScript에 제공하고 개발자의 코드 리뷰와 읽기에 드는 시간을 절약하는 데 도움이 됩니다. 기억하세요 - 저의 조언은 항상 그렇듯이 먼저 필요한 것을 분석한 다음 작은 변수조차도 적절한 선언문을 선택하라는 것입니다.많은 작고 하찮은 것들에 대해 처음부터 주의를 기울이지 않는다면 언젠가는 커다랗고 무서운 악몽으로 이어질 수 있습니다. 결국 깨끗하고 안전한 코드를 작성하는 것을 좋아하지 않는 사람이 있을까요? 😃 이 아티클(ES6 cool stuffs —var, let and const in depth)은 원작자 MayaShavin의 동의를 얻어 번역되었습니다.","categories":[{"name":"programming","slug":"programming","permalink":"https://pocojang.github.io/categories/programming/"},{"name":"javascript","slug":"programming/javascript","permalink":"https://pocojang.github.io/categories/programming/javascript/"}],"tags":[{"name":"번역","slug":"번역","permalink":"https://pocojang.github.io/tags/%EB%B2%88%EC%97%AD/"},{"name":"es6","slug":"es6","permalink":"https://pocojang.github.io/tags/es6/"},{"name":"var","slug":"var","permalink":"https://pocojang.github.io/tags/var/"},{"name":"let","slug":"let","permalink":"https://pocojang.github.io/tags/let/"},{"name":"const","slug":"const","permalink":"https://pocojang.github.io/tags/const/"}]},{"title":"신입 프론트엔드 개발자들의 구직을 위한 소소한 팁","slug":"2018-11-11-new-fed-begginer-tip","date":"2018-11-10T15:00:00.000Z","updated":"2023-02-12T14:14:44.055Z","comments":true,"path":"2018/11/11/2018-11-11-new-fed-begginer-tip/","link":"","permalink":"https://pocojang.github.io/2018/11/11/2018-11-11-new-fed-begginer-tip/","excerpt":"(우아한형제들과는 관계가 없습니다) 프론트엔드 개발자로 취업하려면 어떻게 해야 할까?그때는 어떤 때일까, 프론트엔드 꿈나무들의 고통과 외침","text":"(우아한형제들과는 관계가 없습니다) 프론트엔드 개발자로 취업하려면 어떻게 해야 할까?그때는 어떤 때일까, 프론트엔드 꿈나무들의 고통과 외침 언제부터인지 다양한 루트로 신입 프론트엔드 구직에 대한 질문을 받고 있습니다. 질문을 받고 멘토링을 하며 느낀 점은 제가(현재 2년차를 마무리하고 있는 부족한 실력의 주니어 개발자인 시점)과연 이런 질문을 받아도 될까? 였지만결국 그로부터 한 달에 한 분 정도 구직에 대한 멘토링을 하고 있습니다. 루트는 다양하지만 질문을 주는 그들의 꿈과 희망은 일치했었습니다.(물론 눈에 보이는 것이 전부는 아닙니다. 즉: 꿈과 희망은 일치하지만 욕망이 다른 경우도 있습니다.) 부족했던 제가 취직했던 과정과 변해가는 프론트엔드 구직 시장 그리고 멘토링을 하며 느꼈던 모든 것을 종합해보며신입 프론트엔드 구직을 하고자 하는 구직자분들에게 조금이나마 보탬이 되고자 이렇게 아티클을 작성합니다. 자아성찰하기프론트엔드 개발자가 되고 싶은 사람들은 다양합니다. 하지만 하나의 타겟에 다양한 지원군을 포함하고 있습니다. SI 주니어 백엔드 개발자 경력 퍼블리셔 (가장 많은 분포도) 디자이너 대학생 이 밖에도 더 많은 케이스가 존재하지만 대부분은 위와 같은 케이스입니다. 하지만 대부분 프론트엔드 개발자를 모르거나 구체적으로 알고 있지 못합니다. 리액트나 뷰하면 프론트엔드 개발자 아닌가요…? HTML + CSS에서 JavaScript 좀 잘하면 되는 거 아닌가요…? 어쩌면 위와 같은 말도 달리 생각해보면 완전히 틀린 말은 아닙니다.하지만 더 많은 것을 알고 있어야만 프론트엔드 개발자가 될 수 있습니다. 결국 프론트엔드 개발자가 되고 싶다면 질문을 해야 합니다(자기 자신에게) 왜 프론트엔드 개발자가 되고 싶은 건지 프론트엔드 개발자는 무엇이고 어떤 일을 하는 건지 자격요건과 우대사항으로 자아성찰하기 원티드 신입 FE 채용 필터링: https://www.wanted.co.kr/wdlist/518/669?years=0 위의 링크를 보며 자격 요건보다 부족한 점이 있다면 현실적으로 파악한 후 리스트 업하여 스터디 플랜을 만들어야합니다. 결국은 자신의 상태를 그 누구보다 잘 알고 진단하느냐가 중요합니다. 좋은 회사의 기준좋은 회사의 기준은 절대적일 수도 있지만 상대적일 수도 있는 부분입니다. 워라밸 연봉 사용할 수 있는 스킬 및 회사에서 지향하는 개발 사람 복지 회사에서의 나의 존재감 자유도 다양한 가치관과 조건이 존재하기 때문입니다 하지만 안타깝게도 구직자의 수준에 따라 갈리는 경우도 있습니다. 가령 예를 들어 설명해보겠습니다 A라는 회사를 두고1번 구직자: 내 실력에 A 회사 정도면 최고의 회사야! 라고 생각할 수 있겠지만2번 구직자: 아.. 내 실력에 A 회사는 너무 하향 지원인데 조금 더 공부하면서 구직을 노려보자 사실 위와 같은 상황은 경력자에게도 마찬가지입니다. 좋은 회사를 추천해달라는 질문을 많이 받고는 하는데 그전에 본인의 역량을 파악해야 합니다. 자격요건은 되어야 이력서를 넣을 수 있고우대사항이 되어야 면접을 보러 갈 수는 있겠구나 생각하는 것도 적당합니다. 이를 판단하는 방법은 일단 이력서를 넣고 실패해보며 피드백을 받는 것이 가장 확실하고 빠른 방법입니다. 디테일의 중요성빠른 입사 지원은 지양합시다 기본적인 CS나 알고리즘 테스트를 통한 실력을 중점으로 하는 입사 프로세스로 지원하는 경우가 아닐 때는이력서에 많은 시간을 할애할 것입니다. 이때 가장 주의해야 할 점과 알아두면 좋은 점은 결국 버릴 건 버리는 심플함과 센스 있는 디테일입니다. 심플함 불필요한 자격증은 기입하지 않기 운전면허를 넣는 경우도 봤습니다. TMI(Too Much Information) &amp; TMT(Too Much Talker) 버리기 너무 많은 내용은 담지 않는 것이 좋습니다. 관계없는 내용은 더더욱 담지 않는 것이 좋습니다. 문단 정리하기 타이틀, 서브타이틀, 컨텐츠 등으로 문단을 정확히 나눕니다. 강조할 건 강조합니다. (예: 강조, 강조, 강조, 강조) 디테일 HWP…DOC…PPT…가 아닌 PDF PDF는 첨부가 아닌 클라우드를 활용한 링크 공유를 합시다 (단축 URL은 센스) 누구든 어디서나 몰래 볼 수 있는 정적 페이지 만들기 핸드폰으로 이력서를 읽는 인사 담당자분도 봤습니다. 깃헙 페이지나 파이어베이스를 사용하셔도 좋습니다. 이미 만들어진 html resume template를 활용해도 좋습니다. 회사 이름이라도 넣자 이력서 or 자기소개서에 회사에 관한 내용이나 연관성이 전혀 없다면 실력이 충분하더라도 감점 요소입니다. 이력서 양식에 지원 회사 시그니처 컬러 or 지원 회사의 시그니처 폰트를 적용하는 센스 전략 세우기“적을 알고 나를 알면 백 번을 싸워도 위험하지 않다” 손자병법의 한 구절 말 그대로 취업은 나를 알고 회사를 알아가는 과정입니다. 이미 준비된 실력이라면 당장 쟁쟁한 회사의 테스트를 뚫고 합격할 수 있겠지만아쉽게도 신입 개발자들을 위한 자리보다는 높은 연차의 개발자들을 원하는 곳이 대부분… 다른 포지션의 개발자 또한 마찬가지겠지만 FE 직군의 경우 더욱 양극화되어있으며국비지원 수강생과 기타 유료 학원 수강생들을 포함하면 분기별로 최소 100명 이상의 신입 FE 취준생이 쏟아질 것으로 예상됩니다.(개인적인 추측) 당연히 뛰어난 실력을 갖춰야 이런 경쟁 속에서 수월해지겠지만 더 유연하게 대처할 필요가 있습니다.그나마 신입 구직자일때 개발 실력외에 다른 강점을 보여줄 수 있기때문이죠. 탑 - 다운 ? 다운 - 탑? 지원하고 떨어지고 반복하다 보면 자신의 수준을 자각할 수 있습니다. 저 같은 경우는 위와 같은 시트로 구직 현황을 관리하고는 했었는데 굉장히 큰 도움이 되었습니다.또한 본인이 판단하는 가치와 예상 합격률을 잘 고민하여 등급을 나눠보는 것이 좋습니다. 그렇게 나눈 등급을 통하여 탑(합격률 낮음) - 다운(합격률 높음) 순으로 지원하시는 것을 추천합니다. 탑 - 다운 장점 취업이 급할 때 유리하다. 자신의 수준을 빠르게 캐치할 수 있다. 단점 면접을 통한 실력 향상을 누리지 못할 수 있다. 면접 및 서류 광탈로 멘탈이 터지거나 자존감이 떨어질 수 있다. 다운 - 탑 장점 장기적인 구직 레이스에 적합하다. 당장은 취업이 어려운 회사에 차후 적합한 핏과 면접 경험을 살려 지원할 수 있다. 단점 공백 기간이 길어질 수 있다. 잦은 이직을 하게 될 수도 있다. 꼭 신입 구직이 아니더라도 1 ~ 2년 차와 상시 모집 정도는 지원해보는 것이 좋습니다.1차 2차 3차 면접 프로세스가 길어질수록 프로세스가 유효한 시점을 살려 즉각 자신에게 부족한 점을 보충해야 합니다. 활동량을 높인다다양한 컨퍼런스 및 채용 행사를 통해 회사의 정보와 얻을 수 있습니다. 운 좋은 경우는 CTO 또는 인사 담당자와 1 대 1로 Q&amp;A 시간을 가지는 경우도 있으니 다양한 활동에 참여하는 것을 권장합니다. 네트워크를 이용하자다양한 스터디와 실제 친분을 통하여 적절한 정도의 정보를 얻어보는 것도 방법입니다. 운 좋은 입사는 없다간혹 운 좋게 자신의 실력에 비해 빠르게 구직에 성공할 수 있습니다. 의심해 볼 수 있는 포인트 퇴사율이 높은 회사 FE에 대한 이해도가 굉장히 낮아 보이는 면접관이 대부분일 때 빨리 들어와서 빨리 좀 도와달라는 모습을 보일 때 개발 자체를 전혀 모르는 사람들이 면접관일 때 취업 시 내가 1인 개발자인 회사 정보처리기사가 우대 사항인 경우 이 밖에도 다양한 방법과 경험을 살려 자신에게 맞는 구직 플랜과 꾸준한 학습 &amp; 프로젝트 진행을게을리하지 않는다면 험난한 구직 시장에서도 굉장한 성장을 이룰 수 있습니다. 면접도 공부다면접은 정말 피드백이 확실한 공부 방법입니다. 간혹 마음에 드는 회사가 아니라며 서류 합격 이후 면접에 불참하는 경우가 있는데그런 경우에도 필히 면접에 참가하여 자신의 실력을 갈고닦는 것이 좋습니다. 면접을 통해 공부하는 방법은 여러 가지가 있습니다. 면접 이후 필히 면접 문제를 회사별로 정리한다. 가능하다면 본인이 떨어진 이유를 피드백 받도록 한다. (피드백이 없다면 요청하는 것도 방법) 각종 자료를 통해 이미 정리된 면접 문제를 보는 것도 좋지만 면접 문제를 따로 정리한다. 면접관의 표정이 안 좋을 때와 좋을 때를 기억하여 어떤 포인트에서 자신의 장점과 단점이 났는지 정리한다. 구직 중에도 뭔가 꾸준히 한다. (예: TIL, 알고리즘 문제 풀기, 사이드 프로젝트 등) 위와 같은 정리를 통해 나온 자신의 단점을 파악하여 보완하는 시간을 가진다. 다양한 면접과 구직을 통해 공부해야 하지 말아야 할 것이 보인다면 망설임 없이 그것에는 시간을 할애하지 않는다. 도움 되는 멘토를 찾아 현실적인 조언을 받아 그것을 실행한다. 정리위와 같은 내용을 정리하자면 결국 개발자 구직이라는 것입니다.때문에 당연하게도 CS 기본 소양과 알고리즘이 탄탄하다면 더 좋은 결과를 얻을 수 있습니다. 하지만 누군가에게는 합격을 누군가에게는 가난하고 힘든 기간이 될 수 있으니 적당한 긴장 즉각적인 피드백을 통한 단점 보충 꾸준함 다양한 활동 위의 세 가지를 잊지 않는다면 좋은 결과와 좋은 성장을 이룰 수 있습니다. 마지막으로 입사 지원 대비 서류 합격률이 10%도 되지 않는다면 이력서를 완전히 다시 작성하는 것도 좋습니다. 요즘 뛰어난 신입 개발자분들과 학생 개발자분들 보며 굉장한 자극과 영감을 받고는 합니다.하지만 이와 다르게 상대적으로 실력이 부족한 구직자분들에게는 구직 기간이 스트레스가 될 수 있습니다.그럴 때일수록 오히려 구직 과정을 역이용해 스트레스가 아닌 성장을 하는 계기를 가졌으면 좋겠습니다.","categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"}],"tags":[{"name":"신입 프론트엔드","slug":"신입-프론트엔드","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C/"},{"name":"신입 개발자","slug":"신입-개발자","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9E%85-%EA%B0%9C%EB%B0%9C%EC%9E%90/"},{"name":"신입 프론트엔드 개발자","slug":"신입-프론트엔드-개발자","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90/"}]},{"title":"VS 코드 콘솔에서 TypeScript 실행하기","slug":"2018-04-29-run-simple-ts","date":"2018-04-28T15:00:00.000Z","updated":"2023-02-12T14:14:44.054Z","comments":true,"path":"2018/04/29/2018-04-29-run-simple-ts/","link":"","permalink":"https://pocojang.github.io/2018/04/29/2018-04-29-run-simple-ts/","excerpt":"타입스크립트 개발 환경없이 작성하기","text":"타입스크립트 개발 환경없이 작성하기 타입스크립트를 작성하다 보면 간단히 콘솔로 코드를 찍어보고 싶을 때도 있고 컴파일 없이 작업하고 싶은데 그렇지 못해 답답할 때가 있습니다 자바스크립트는 개발자 도구에서 간편하게 작성해볼 수 있으니 접근성이 이 엄청나기 때문에 비교가 될 수 있죠. 이러한 부분 때문에 포기하시는 분들을 위한 자료를 준비했습니다. Front-end Playground 활용하기기본 설정으로 타입스크립트를 제공하는 웹서비스를 이용할 수 있습니다. CodePen 설정 &gt; JavaScript Preprocessor &gt; TypeScript 너무나 유명한 서비스인만큼 이미 되어있는 템플릿으로 간단히 사용 가능합니다. JS Bin JavaScript 탭 선택 &gt; JavaScrip 클릭 &gt; TypeScript 선택 마찬가지로 몇번의 클릭만으로 사용가능합니다. JSFiddle JavaScript 클릭 &gt; TypeScript 선택 마찬가지로 몇번의 클릭만으로 사용가능합니다. TypeScript Playground 별도의 설정과 도구없이 JS코드로 바로 컴파일 되어 비교할 수 있기 때문에 학습에는 가장 좋다고 생각이 듭니다. 타입스크립트의 코드가 자바스크립트의 어떤 코드로 변환되는지 항상 볼 수 있기에 흥미로우며 Run 버튼을 활용하여 브라우저에서 실행해볼 수 있습니다. VS 코드가 내장되어 VS 코드에 익숙한 사용자분들은 IntelliSense와 단축키를 그대로 사용할 수 있습니다. CodeSandbox Create Sandbox 클릭 &gt; New Sandbox &gt; Vanilla 선택 기본적인 Parcel 번들러 프로젝트가 생성됩니다 &gt; Add Dependency 클릭 TypeScript 검색 &gt; 검색된 TypeScript 설치 index.js를 .ts로 변경 (index.html내에 삽입된 스크립트도 마찬가지) 설정이 완료된 후 바로 TS 코드를 작성할 수 있습니다 VS code의 IntelliSense 간단한 플레이그라운드 그 이상으로 다양한 기능을 지원합니다. 또한 위에 이미 설명한 서비스들 보다 간편하지는 못하고 무겁다는 단점이 있지만 Github 연동, 로컬 파일 연동, Live(유료), npm 가능, 번들러 및 실제 파일 관리 가능 엄청난 확장성이 존재합니다. 한마디로 모듈화 및 파일을 나누고 싶을때 온라인에서 간단히 사용할 수 있습니다(이럴 거면 그냥 로컬이 낫다고 판단될 수도…) VS 코드가 내장되어 VS 코드에 익숙한 사용자분들은 IntelliSense와 단축키를 그대로 사용할 수 있습니다. 에디터 활용하기VS code이번에는 에디터로 넘어와 VS code에서 간단한 콘솔 출력을 방법을 알아보겠습니다. Code Runner 확장 플러그인 설치 ts-node 설치 1$ npm i -g ts-node // 전역 설치를 하시면 됩니다 (-g 또는 -global) 마우스 우클릭 &gt; Run Code 클릭 또는 단축키 Ctrl + Alt + n(기본 단축키가 다른 플러그인과 겹치는 경우가 많습니다) 위와 같은 출력 결과를 간단하게 볼 수 있습니다. 주의사항간혹 설정에 문제가 있는 경우 아래와 같은 옵션을 확인해주시면 됩니다 123&quot;code-runner.executorMap&quot; : &#123; &quot;typescript&quot;: &quot;ts-node&quot;&#125; 모던 자바스크립트를 접하며 혼란스러운 것들 중 하나는 환경설정일 것입니다.물론 알고 넘어가야 하지만 입문자의 경우 이런 다양한 방법을 통해 학습하시는 것도초반에 러닝 커브를 이겨내는 데 큰 도움이 될 수 있을 것 입니다.","categories":[{"name":"programming","slug":"programming","permalink":"https://pocojang.github.io/categories/programming/"},{"name":"typescript","slug":"programming/typescript","permalink":"https://pocojang.github.io/categories/programming/typescript/"}],"tags":[{"name":"intellij","slug":"intellij","permalink":"https://pocojang.github.io/tags/intellij/"},{"name":"visual studio code","slug":"visual-studio-code","permalink":"https://pocojang.github.io/tags/visual-studio-code/"},{"name":"CodePen","slug":"CodePen","permalink":"https://pocojang.github.io/tags/CodePen/"},{"name":"JS Bin","slug":"JS-Bin","permalink":"https://pocojang.github.io/tags/JS-Bin/"},{"name":"JSFiddle","slug":"JSFiddle","permalink":"https://pocojang.github.io/tags/JSFiddle/"},{"name":"CodeSandbox","slug":"CodeSandbox","permalink":"https://pocojang.github.io/tags/CodeSandbox/"},{"name":"typescript","slug":"typescript","permalink":"https://pocojang.github.io/tags/typescript/"},{"name":"run console","slug":"run-console","permalink":"https://pocojang.github.io/tags/run-console/"}]},{"title":"이것이 자바다","slug":"2018-04-12-this-is-java","date":"2018-04-11T15:00:00.000Z","updated":"2023-02-12T14:14:44.054Z","comments":true,"path":"2018/04/12/2018-04-12-this-is-java/","link":"","permalink":"https://pocojang.github.io/2018/04/12/2018-04-12-this-is-java/","excerpt":"신용권의 Java 프로그래밍 정복! 이것이 자바다","text":"신용권의 Java 프로그래밍 정복! 이것이 자바다 책 정보출판사 : 한빛미디어저자 : 신용권출간 : 2015.01.06페이지 : 1224ISBN : 9788968481475가격 : 30,000 원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=8589375http://www.hanbit.co.kr/store/books/look.php?p_code=B1460673937 이것이 자바다 카페http://cafe.naver.com/thisisjava 3강까지만 제공되는 샘플 영상https://www.youtube.com/playlist?list=PLVsNizTWUw7FPokuK8Cmlt72DQEt7hKZu 소개이전에 국비 지원으로 Java 교육을 5개월가량 받을 때를 제외하고 Java와는 남남처럼 지내고 있었는데 한빛미디어의 은총으로 오랜만에 Java 기본서를 펴보게 되었다. 처음 이것이 자바다를 받아봤을 때는 이미 Java 기본서를 여러 번 접해봤기때문에 뭐 별거 있겠어? 싶었다. JavaScript 같은 경우에는 워낙 다양한 스타일과 종류가 있고 언어 자체가느슨하기 때문에 저자의 스타일에 따라 코드 내용이 다르기도 하지만 Java같은 경우에는 컨셉과 목차 스타일 그리고 코드를 풀어나가는 느낌과 개념 설명 말고는 큰 차이를 알기는 어려웠다. (물론 책마다 완성도는 큰 차이가 있다) 입문부터 깊이까지 초보자부터 숙련자까지큰 기대는 없었다. 워낙 Java 기본서는 책의 가짓수만 해도 어마어마하고 그나마 유명한 책 중 난 정말 JAVA를 공부한 적이 없다구요, 헤드퍼스트 Java, Java의 정석을 읽은 적이 있다(꼼꼼하게 공부하지 못했는지 기억이 잘나지 않는다….) 난 정말 JAVA를 공부한 적이 없다구요: 개념 설명이 쉽게 되어 읽기 좋고 가장 Java를 깨우치는 도움이 되었던 책이지만 구성이 좀 부실했다. (대신 동영상 제공) 헤드퍼스트 Java: 재미있는 책이다. 구성도 마음에 들고 책 설명처럼 뇌를 자극하는 느낌이지만…. 너무 산만하고 레거시하다는 생각도 들었다. Java의 정석: 정말 정적이고 딱딱하다는 느낌을 받았다. 개념에 충실한 정말 교과서 같은 기본서다. 지루해서 읽다가 포기했던 기억이 있다. 현업에서 Java를 하고 있지도 않고 시간이 부족해서 동영상도 보지 못했고 한빛미디어와의 약속이 있기때문에 이것이 자바다는 중요 개념과 궁금한 내용 위주로 읽어 나갔다. 챕터를 마치고 꼭 확인을 한다 이것이 자바다를 보고 느낀 건 정말 완전체 같다는 느낌이였다.1000페이지가 넘는 분량인데 뭐하나 빠지는 게 없고 입문하기에 어렵지도 않으며 나름 딥하기까지하다. 또한 개념 설명은 꼭 짚고 넘어가며 연습문제도 있고 코드 설명이 너무나 친절하다. 영상을 보지는 못했지만 함께한다면 효과는 더 크지 않을까 싶다. Java 개념다른 언어들도 마찬가지이겠지만 Java를 통해 얻을 수 있는 것들이 굉장히 많다. OOP, 인터페이스, 클래스, 다형성 등등 코딩만으로는 해결되지 않는 이러한 개념에 대한 이해가 Java 학습에 있어서 큰 허들이 될 수 있다. 이것이 자바다에서 인상적인 부분은 정말 꼼꼼하게 개념 요소들을 챙긴다.놓치는 게 없다고 볼 수 있을 정도였다. API사실 이 책에 API까지 있을거라고는 생각도 못했고 기본 API정도 밖에는 나오지 않지만 API를 이렇게 쉽게 설명해주는구나…. 감동이였다. API 설명 후기정말 독자를 세심하게 챙긴다는 것을 알 수 있다. 독자를 세심하게 챙기며개념은 꼼꼼하게 놓치지 않고설명은 도식화하여 이해시키려 노력한다. 누군가 Java 책을 추천해달라고 하면 입문일 때는 이 책 언제는 저 책상황에 따라 나눠서 추천했었겠지만 이제는 이것이 자바다 한 권으로 기본을 확실하게 넘어가라고 권하고 싶다. 카페에 가보니 직딩들을 위한 목차가 있었다. 프로그래밍에 처음 입문해도 Java를 처음 배워도 Java를 깊이 있게 보고 싶어도 이것이 자바다 하나로 해결 가능하지 않을까 생각이 들었다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"java","slug":"book/programming/java","permalink":"https://pocojang.github.io/categories/book/programming/java/"}],"tags":[{"name":"자바 입문 책","slug":"자바-입문-책","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8-%EC%B1%85/"},{"name":"이것이 자바다","slug":"이것이-자바다","permalink":"https://pocojang.github.io/tags/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EC%9E%90%EB%B0%94%EB%8B%A4/"},{"name":"신용권","slug":"신용권","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9A%A9%EA%B6%8C/"}]},{"title":"Hello Coding 프로그래밍","slug":"2018-02-18-hello-coding-programming","date":"2018-02-17T15:00:00.000Z","updated":"2023-02-12T14:14:44.054Z","comments":true,"path":"2018/02/18/2018-02-18-hello-coding-programming/","link":"","permalink":"https://pocojang.github.io/2018/02/18/2018-02-18-hello-coding-programming/","excerpt":"개념부터 처음 배우는 프로그래밍! Hello Coding 프로그래밍 리뷰","text":"개념부터 처음 배우는 프로그래밍! Hello Coding 프로그래밍 리뷰 책 정보출판사 : 한빛미디어저자 : Pope Kim출간 : 2018.01.02페이지 : 352ISBN : 9791162240342가격 : 19,800원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=12877969: http://www.hanbit.co.kr/store/books/look.php?p_code=B6832340619 소개포프TV로 유명한 유튜버 김포프님의 입문 서적이다. (책에 대한 포프님의 설명)때문에 포프님이 좋아하는 C#을 기본으로 한 책이며 수준은 입문 수준이다 목차부터 심상치 않다 기존의 틀과는 다른 입문 서적보통의 프로그래밍 입문 서적이라면 하나의 언어를 처음부터 끝까지 가르쳐주거나언어에 얽매이지 않고 전체적인 개발의 모든 것을 담기 위한 서적이거나스크래치부터 설명하는 책이거나 보통은 이런 방향이다. 하지만 이 책의 경우에는 개발에 입문하고자 C#을 사용하는 느낌이라고 볼 수 있다.프로그래밍의 개념을 설명하는 방식이 다른 책들과 확연히 다르다는 느낌을 알 수 있었다. 그저 프로그래밍 입문에만 초점을 맞춘 것이 아닌 코드를 어떻게 짜야 하는지 무엇을 주의해야 하는지 의식에 흐름과 방향성까지 놓치지않고 제시해주는 점은 긍정적인 부분이었다. 그런 이유로 그런 건지는 잘 모르겠지만 위의 목차만 봐도 어떠한 언어를 배울 때 주로 볼 수 있는 입문 서적의 목차와는 다르다..일반적인 입문 서적이라면 언어의 개론 &#x3D;&gt; 변수 &#x3D;&gt; 흐름 제어 &#x3D;&gt; 반복문 &#x3D;&gt; 함수 &#x3D;&gt; 좀 더 딥하게 를 상상할 수 있다. 친절한 구성 이해를 돕기 위한 도식화와 그림 그리고 폰트 어느 하나 부족함을 느낄 수 없다.포프님의 책이기 때문에 어렵겠지? 이해에 초점을 두지는 않겠지? 생각했으나 큰 오산이었으며한빛답게 정말 친절하고 꼼꼼한 편집으로 책을 즐겁고 편안하게 볼 수 있었다. 기초를 단련하기 위한 문제들 문제는 각 챕터마다 꾸준히 등장하며 기초 문제 &amp; 심화 문제로 이루어져 있다.프로그래밍에 완전히 처음 입문하는 사람들에게는 후반부로 갈수록 점점 어려움을 느낄 수 있지만확실히 실력 향상과 습득에 도움이 된다는 것을 느낄 수 있다. 후기 결국 각 챕터를 완독하고 문제를 풀며 실습을 하게 되고 간단한 게임을 만들게 된다 포프님이 의도한 책의 방향이 이거구나 싶었다 완전히 프로그래밍에 처음 입문하는 사람들에게는 약간 어려울 수는 있으나기존의 프로그래밍 언어적인 개념에 접근한 입문 서적이 아닌 프로그래밍에 대한 개념과 생각에 접근하도록 유도하는 서적이라고 볼 수 있다. 또한 책과 각 챕터마다 나오는 문제를 통해 직접 체험하고 습득하는 재미도 느낄 수 있으며C#을 처음 접하는 사람들도 부담없이 코딩할 수 있는 정말 친절한 구성을 가지고 있다. 한빛미디어에서 Hello Coding 시리즈를 통해 다양한 입문자들의 학습을 돕겠다는 취지가 느껴진다.앞으로도 이와 같은 방향의 책이 많이 출간되었으면 좋겠다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"}],"tags":[{"name":"Hello Coding 프로그래밍","slug":"Hello-Coding-프로그래밍","permalink":"https://pocojang.github.io/tags/Hello-Coding-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"},{"name":"c# 입문 책","slug":"c-입문-책","permalink":"https://pocojang.github.io/tags/c-%EC%9E%85%EB%AC%B8-%EC%B1%85/"},{"name":"김포프","slug":"김포프","permalink":"https://pocojang.github.io/tags/%EA%B9%80%ED%8F%AC%ED%94%84/"}]},{"title":"프로그래머의 길, 멘토에게 묻다","slug":"2017-12-30-apprenticeship-patterns","date":"2017-12-29T15:00:00.000Z","updated":"2023-02-12T14:14:44.054Z","comments":true,"path":"2017/12/30/2017-12-30-apprenticeship-patterns/","link":"","permalink":"https://pocojang.github.io/2017/12/30/2017-12-30-apprenticeship-patterns/","excerpt":"소프트웨어 개발 분야 새내기를 위한 프로그래머 가이드! 프로그래머의 길, 멘토에게 묻다 리뷰","text":"소프트웨어 개발 분야 새내기를 위한 프로그래머 가이드! 프로그래머의 길, 멘토에게 묻다 리뷰 책 정보출판사 : 인사이트저자 : 데이브 후버, 애디웨일 오시나이역자 : 강중빈출간 : 2010.07.26페이지 : 288ISBN : 9788991268807가격 : 14,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=6332442: http://www.insightbook.co.kr/book/individual/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EA%B8%B8-%EB%A9%98%ED%86%A0%EC%97%90%EA%B2%8C-%EB%AC%BB%EB%8B%A4 소개많은 사람들이 추천해주는 책으로 유명하기에 구입을 하게 되었다.물론 최근 들었던 이종립님의 발표를 듣고 꼭 읽어봐야겠다 싶었고 출퇴근길을 이용해 읽기 좋은 부담 없는 두께였다. 숙련된 소프트웨어 개발자가 되기위한 길에 아낌없는 조언을 받는 느낌이었다 이 책의 설명 그대로 개발자로 가는 험난한 여정의 지침서 그 자체였다. 어떤 행동을 하면 좋을지 어떻게 배우면 좋은지 어떤 마음가짐을 가지고 있으면 좋은지구체적인 사례과 해결책을 제시해준다. 책의 구성은 패턴 위주로 제공된다. 패턴을 제공한다 (약간의 명언도 포함) 사례와 문제점을 예시로 보여줌 해결방안과 대책을 구체적으로 제시 연관된 패턴 지겨울 정도로 반복되는 정석적인 패턴이지만 놓칠 내용하나 없이 살이 되는 느낌이었다. 국내에서도 도움되는 다양한 사례와 해결책이런 책들을 보면 간혹 국내에서 성장하는 개발자들과는 너무나 동떨어진 이야기도 많고비현실적인 이야기도 많다.하지만 이 책 같은 경우에는 벌써 출간된 지 10년의 세월은 흘렀고외국에서의 사례와 해결책이지만 기가 막히게 도움되는 내용이 많았다. 프로그래밍을 관두고 싶을 때실무경험이 부족할 때열정이 질식되는 환경에 있을 때길을 잃었을 때학습이 더디어졌을 때등등 수많은 패턴과 그에 대한 통한 사례와 해결책을 통해 선배 개발자들의 통찰과 이해를 체험할 수 있다. 개발자의 인생을 살펴보다시작하는 개발자부터 은퇴를 앞둔 개발자까지 다양한 개발자들의 삶을 체험할 수 있다.3년 후 5년 후 10년 후 자신이 어떤 개발자가 되어있을까 멀리 내다보도록 해준다. 후기쓸데없는 걱정이 많고 고민 많은 개발자에게 도움이 되는 책이다.특히 이제 시작하는 신입이나 쥬니어 개발자에게 큰 도움이 되겠지만이미 많은 세월을 보낸 개발자에게도 이 책은 자기 자신을 되돌아보는 성찰의 시간을 주지 않을까 싶다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"}],"tags":[{"name":"프로그래머의 길 멘토에게 묻다","slug":"프로그래머의-길-멘토에게-묻다","permalink":"https://pocojang.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EA%B8%B8-%EB%A9%98%ED%86%A0%EC%97%90%EA%B2%8C-%EB%AC%BB%EB%8B%A4/"},{"name":"개발자 로드맵","slug":"개발자-로드맵","permalink":"https://pocojang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%A1%9C%EB%93%9C%EB%A7%B5/"},{"name":"개발자 인생","slug":"개발자-인생","permalink":"https://pocojang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9D%B8%EC%83%9D/"}]},{"title":"에디터 or IDE 터미널 명령어로 실행하기","slug":"2017-12-24-open-ide-tip","date":"2017-12-23T15:00:00.000Z","updated":"2023-02-12T14:14:44.054Z","comments":true,"path":"2017/12/24/2017-12-24-open-ide-tip/","link":"","permalink":"https://pocojang.github.io/2017/12/24/2017-12-24-open-ide-tip/","excerpt":"간단한 설정 한번이면 터미널을 통해 에디터를 실행할 수 있습니다.","text":"간단한 설정 한번이면 터미널을 통해 에디터를 실행할 수 있습니다. 저장소를 새로 만든다던지 git clone을 한다던지 현재 터미널에 있으면서원하는 경로로 에디터를 실행한다는 것이 귀찮을 때가 많습니다. 이런 경우에 정말 너무도 간단하게 명령어 단 몇 글자면 해당 경로에서IDE를 즉시 실행할 수가 있습니다!! (단. MacOS 환경에서의 팁입니다.) Visual Studio Code 명령어로 실행하기 CMD + SHIFT + P 입력 후 위와 같은 검색을 통해 셸 명령: PATH에 &#39;code&#39; 명령 설치를 합니다. 실행을 원하는 경로에서 명령어를 통해 실행합니다 1code . // 주의: code와 . 사이에 공백이 필요합니다. 실행화면 IntelliJ 명령어로 실행하기 IntelliJ 메뉴에서 Tools &gt; Create Command-line Launcher... 를 실행합니다 기본 경로를 제공합니다. 특별한 이유가 없는 이상 여기서 OK만 하면 설정은 끝입니다. 실행을 원하는 경로에서 명령어를 통해 실행합니다. 1idea . // 주의: idea와 . 사이에 공백이 필요합니다. 실행화면 (노트북이 느려서…구동에 시간이 소요됩니다) 참고 : Running VS Code on MacRunning VS Code on Windows","categories":[{"name":"programming","slug":"programming","permalink":"https://pocojang.github.io/categories/programming/"},{"name":"tip","slug":"programming/tip","permalink":"https://pocojang.github.io/categories/programming/tip/"}],"tags":[{"name":"터미널 에디터 실행","slug":"터미널-에디터-실행","permalink":"https://pocojang.github.io/tags/%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%94%94%ED%84%B0-%EC%8B%A4%ED%96%89/"},{"name":"run terminal","slug":"run-terminal","permalink":"https://pocojang.github.io/tags/run-terminal/"},{"name":"intellij","slug":"intellij","permalink":"https://pocojang.github.io/tags/intellij/"},{"name":"vscode","slug":"vscode","permalink":"https://pocojang.github.io/tags/vscode/"}]},{"title":"Adieu 2017 & 내가 신입 개발자들의 멘토인 이유","slug":"2017-12-21-adieu-2017","date":"2017-12-20T15:00:00.000Z","updated":"2023-02-12T14:14:44.053Z","comments":true,"path":"2017/12/21/2017-12-21-adieu-2017/","link":"","permalink":"https://pocojang.github.io/2017/12/21/2017-12-21-adieu-2017/","excerpt":"2017년을 회고하며 2018년을 약속하기 &amp; 좋은 개발자 되기","text":"2017년을 회고하며 2018년을 약속하기 &amp; 좋은 개발자 되기 내가 신입 개발자들의 멘토인 이유 도대체 무엇을 했는 가 2017년 배운 것 2017년 실패한 이유 실패는 성공의 어머니 Solution 마치며.. 내가 신입 개발자들의 멘토인 이유2017년 개발자로 첫발을 내디딘 첫해를 돌아봤고얼마나 잘못된 개발자가 되었는지 회고를 통해 알 수 있었다 분명 7월이 시작될 때만 해도 돌아다니는 이 짤방을 보고 불안감을 느꼈지만 개선하지 못한 잘못이 크다. 뒤늦은 11월쯤부터 서서히 정신을 차리기 시작했지만 결국 너무나 늦어버렸다. 이 포스팅을 통해 2017년의 나를 분석하고 나 자신을 멘토로 다시 한걸음 나아가길 기원한다. 도대체 무엇을 했는 가 스터디 (18회) 수많은 스터디에 참여했다. Angular2+, React, Vue, JavaScript, CSS, Git, 비사이드 소프트의 코드스피츠 등등.. 돈을 지불하는 강의형 스터디부터 그룹 스터디까지 수없이 참여했지만 헛된 노력이 많았고 정말 내 것으로 소화해낸 건 많지 않았다. 중간에 파토난 스터디도 꽤 있었고 많지는 않지만 개인 사정상 불참했던 스터디도 있었다. 물론 큰 배움을 얻은 스터디도 있었지만 몇몇 스터디는 내 것으로 소화해내지 못했다. 이에 대한 내용은 밑에서 분석할 예정이다. ​ Seminar &amp; Conference (14회) 정말 많이 느끼고 배웠다. 사실 불필요한 부분도 있고 겹치는 내용도 많고 부실한 내용이 있을 때도 있지만 동기부여와 인생의 터닝 포인트라고 느낄 정도의 감명을 받을 때도 있었다. 앞으로도 꾸준히 참가할 생각이다(과도한 참가는 줄이자) ​ 독서 (7권) 한빛 미디어에서 리뷰를 진행한 덕에 강제로 읽은 책도 있고 개인적인 독서는 JavaScript 기본서 위주였다. 도중에 읽기를 포기한 책도 있지만 처음부터 끝까지 완주한 책은 1년 동안 겨우 7권이다. 이 또한 실속 없이 읽어 무엇이 남았을까 싶다 ​ 첫 취업 그리고 이직 개발자의 취업 그리고 취준생 개발자.. 참 준비할 것도 많고 해야할 것도 많다. 이 시기만큼은 스스로 굉장히 많이 터득하고 배웠다. ​ 블로그 2016년 하반기 Java 국비지원을 받으며 TIL을 작성하는 블로그를 만들었다. (현재 4번째 블로그 이사로 TIL은 다른 곳에 있는 상태) 정말 시간을 많이 쏟기도하고 큰 노력을 기울였다. 나를 되돌아보는 데 도움은 되었지만 아쉬운 건 (과거의 글을 보면서 글을 왜 이렇게 못쓸까 느낀다) 기술적인 글을 작성한 부분이 거의 없다는 것이다.(개발 실력에 대한 자존감이 바닥이였다) 앞으로는 개발 기술에 대한 내용을 다뤄보도록 해야겠다. 2017년 배운 것2017년 망했지만 실패를 분석하기 전에 그래도 배운 것(잘한 것) 을 되짚어본다. 철저한 일정관리 회사를 다니며 사이버대학을 다니다 보니 일정관리만큼은 철저하게 해야 한다. 구글 캘린더 &amp; 구글 keep(Spot Todo 관리) &amp; 회사 맥 &amp; 개인 맥 &amp; 개인 데스크탑 &amp; 스마트폰 모두 연동하여 일정 별로 (1시간 전 ~ 2시간 전 ~ 3시간 전 ~ 하루 전) 알람을 해놓고 생활했다. 너무 변태스럽지만 머리를 언제 잘랐지 궁금해서 시작했던 게 결국 언제 머리를 잘랐는 지까지 캘린더에 저장하는 습관도 생겼고 이제는 달력을 수시로 확인하고 일정 관리를 하지 않으면 불안할 때도 있다. ​ 실제 구직할 때 작성하던 시트 : 실제로는 떨어진 회사가 대부분이고 회사의 내용도 담겨있어서 공개할 수 있는 부분이 많지 않다 구직활동 개발자 구직 활동을 통해 다양한 배움이 있었다. 개인 명함만 들어 면접 시 명함 교환하기 자기소개 페이지를 만들어 도메인 달기 (사실 허접한 static HTML 이력서 2페이지였다) 면접 후 면접 질문 모으고 정리하기 결과를 통해 면접 실패와 성공을 분석 시트를 작성하여 어느 회사에 지원했어 어느 회사에 떨어졌고 어떤 이력서를 제출했는지 정리 지원할 회사를 분석하고 1회사 1이력서 공식 유지 (절대로 같은 회사에 같은 내용을 작성하지 않았다) TIL 블로그 만들기 구직활동에 요령이 생겼고 자신을 돌아보는 계기도 되었다.​ 습관 만들기 예전부터 사소한 습관조차 만들지 못했으나 2017년 습관 만들기에 돌입했고 결국 내 것으로 만들었다. 회사 출근시 계단으로 출근하기 하루에 팔굽혀펴기 30개 하기 회사에서 업무시 1시간에 한번 몸풀기 (스마트폰 알람의 도움을 받는다) 집 앞 버스 정류장이 아닌 2정거장 전의 버스정류장까지 걸어서 버스타기 (운동) 정말 아무것도 아닌 것 같지만 습관을 만들 수 있다는 자신감을 가지게 되었다. 습관의 재발견 :우리는 그동안 “목표는 크게, 높게, 멋있게 잡아야 한다!”는 것을 강요당해 왔다.그래서 늘 버거운 목표에 힘겨워 하다 포기하고, 또 포기하고 언젠가부터는 계획조차 세우지 않게 되었다. 다양한 Tool 사용 개인 성향 때문인지 항상 다양한 도구의 활용법에 관심이 많다. 인텔리J의 모든 단축키를 거의 다 외운다던가 웬만한 플러그인은 전부 설치해서 실행해보고 그 밖에도 다양한 도구들을 활용하고 접하게 되었고 커스텀하여 고쳐 쓰는 것도 좋아한다. 사소하지만 lint 같은 도구들도 정말 깊하게 파면서까지 연구해본다. (개발을 이렇게 했어야 하는 데 아쉬운 부분이긴 하다.) 다양한 커뮤니티 활동과 정보 수집 우리나라의 웬만한 모든 커뮤니티에는 가입한 상태이기 때문에 다양한 정보를 빠르게 접할 수 있다. 심지어 모든 정보를 나를 통해 받는 친구들도 있다. 물론 너무 많은 정보 속에 갈피를 못잡게 된 계기도 생길 수 있다. (사실 커뮤니티 활동이라 적었지만 낯가림이 심한 눈팅족이다) 출처 : http://dontkry.com Front-end 생태계의 이해 Front-end 개발자는 알아야 될 범위가 굉장히 넓고 그 생태계를 이해하는 건 굉장히 중요하다. 사실 지금에 와서 돌이켜본다면 16년 12월부터 Front-end 구직을 시작하여 취업하기까지 Front-end 개발자가 될 만큼 실력도 없었고 Front-end 생태계조차 이해하지 못했다. 물론 지금도 완벽한 수준은 아니지만 Why에 접근하여 생각할 수 있는 것 같다. Front-end 생태계를 얼마나 이해하는지 확인할 수 있는 글 : 2016년에 자바스크립트를 배우는 기분 2017년 실패한 이유왜 실패했는지 변명이 아닌 Why에 접근해본다. 갑작스러운 Front-end 구직 비전공에 5개월을 Java에 spring은 세팅하는 수준정도만 배운 흔히 오키에서 국좀이라고 불리우는 국좀 출신 개발자이다. 공부할 때는 TIL도 쓰고 열심히 공부했었지만 수료를 앞두고 프로젝트를 진행하며 Java보다는 CSS에 재미가 들었다. 그리고 Si에 대한 안 좋은 소문들과 글을 보며 내심 고민에 빠지게 되었고 Front-end 개발자가 되어 스타트업에서 시작한다는 말도 안되는 목표를 세우게 되었다. 국내의 퍼블리셔와 Front-end 개발자의 사이도 착각하게 된 것이다.​당신은 JavaScript에 대해 얼마나 알고 있는가?SPA가 뭔지도 모르고 JavaScript와 jQuery의 차이도 갓 알게 된 12월 Front-end 구직을 시작했다. 뒤늦게 AngularJS 책을 여러 권 사서 공부했으나 기본기가 없으니 겉핥기수준이었고 하지만 운 좋게 취업에 성공했다(학원 강사님 말고는 주변에 말려주는 사람이 없었다.) 결국… 기본 실력 없이 기초 수준의 Java만 배우고 Front-end 개발자로 취직 시간관리 실패 일정관리에는 성공했으나 시간관리는 실패했다. 말도 안 되는 소리이긴 하다.한마디로 말하면 일정은 지켰으나 공부에 대한 시간 계획 및 실천은 없던 것이다 오전에는 느긋하게 일하다가 뒤늦게 야근하면 되지 생각한다. 과도한 스터디로 이동시간을 소비한다. (집은 수원 &#x3D;&gt; 스터디 및 회사는 서울) 출퇴근에 소요되는 시간이 하루에 3시간 이상이지만 버리기만했 다. 멘탈관리 실패 사내에서 React로 된 서비스를 진행했으나 서비스 실패로 결국 폐지를 하게 되었다. 때문에 회사에서 불필요한 개발자가 된 것만 같은 기분이 들었고 사내에 다른 프로젝트는 합류하기엔 기술적으로 거리가 있기 때문에 참여할 수 없는 프로젝트였고.. 결국 몇 개월간 회사에서 뭘했는 지 모르겠다는 생각까지 든다 ​또한 개인적인 문제로 생애 가장 힘든 시기를 마주하게 되었고 결국 한계에 도달하였다. 일을 하며 아무것도 할 수 없는 스트레스까지 받았을 정도였고 이 시기가 너무 길어 개인적으로 공부도 손 놓고 아무것도 할 수 없는 지경에 이르렀다. ​ 사내에 전담으로 맡은 서비스가 폐지된 후 슬럼프에 빠지다. 개인적인 사연으로 인한 스트레스 극복 실패 (돈을 빌려주거나 갚을 때 차용증은 선택이 아닌 필수입니다) ​ 연휴를 놓치다 5월 그리고 10월 굉장한 연휴를 맞이했고 공부할 시간과 기회도 충분했으나 빈둥빈둥 놀기만 했고 그렇다고 멋진 휴가를 다녀온 것도 아니다. 개인적으로는 이것이 가장 안타깝다. 황금연휴에 공부할 기회를 버리다. ​ 공부 방법의 문제 정말 수 없이 많은 문제가 있었다. 만약 2017년 회고를 하지 않는다면 2018년에 다시 일어날 기회조차 없이 망했을 것이다. **러닝 커브 극복 실패** 문제 해결이 필요할 때 깊은 생각은 피하고 외면할 때가 많았다. 대충 라이브러리로 해결하는 식의 문제 해결이나 어떠한 부분에 대한 지식이 부족할 때 추가적인 학습의 러닝 커브를 이겨내지 못하고 포기한 것이다. **잘못된 독서** 독서를 하며 졸거나 코드 타이핑을 넘기거나 독서 중 헷갈리거나 모르는 부분이 있을 때 깊이 파고들기보다는 그러려니 하고 넘기고는 했다. 물론 그러려니 넘기는 경우 책을 2번이고 3번 다시 읽어 소화하는 방식도 있었지만 2번 이상 읽은 적도 없고 간단한 요약의 독후감만 작성하고 독서를 끝냈다. 의식적 무지 무엇을 모르는지 어떤 부분이 부족한지는 알지만 제대로 된 공부를 시작하여 끝을 본 적이 많지 않다. 프로젝트를 통해 만든 것이 없다 수많은 프로젝트와 스터디를 했음에도 불구하고 결과물을 낸 적이 없다. 물론 거의 끝까지 만든 프로젝트도 있었지만.. 결과물을 내는 스터디는 거의 시작부터 망했다. 부담스러운 프로젝트는 스터디원들에게 부작용으로 작용할 때가 있다. 또한 개인적인 토이 프로젝트도 없었으며 겨우 인터넷에 돌아다니는 예제를 따라 만드는 수준이 전부였다. 겉핥기 학습 아는 것 많으나 정작 할 줄 아는 건 없다. 지식의 분포도를 따져 봤을 때 다 얇게 퍼져있기만 하고 어느 하나 깊게 파고들지 못한 부분이 아쉽다. Why가 아닌 How 회사에서 업무를 할때 개인적인 개발이나 공부를 할 때 Why가 아닌 How로 접근하게 되었다. 이런 부분은 지식에 착각을 일으킨다. 결국 알고 있는 것이 아니기 때문이다. 설명서를 보고 만든 것과 직접 만든 것은 큰 차이가 있듯이 어떻게 했는 지만 알고 동작 원리나 구동 원리는 전혀 모르는 것이다. 유행 따라가기 Angular, React, Vue &#x3D;&gt; Front-end 춘추천국 시대이다. 결국 JavaScript구나 Front-end 개발자도 결국 개발자구나.. 라는 걸 깨달을 때까지 누군가 입이 닳도록 설명해봐야 깨닫기는 힘들다. 고용자에게 Front-end 개발자는 축구에 포지션이 있듯이 결국 포지션일 뿐이라고 생각할 수도 있다. 결국 기본이 가장 중요하다는 것을 알고 있었으면서도 부정하고 있었다. 취업 의식 Front-end 분야는 러닝 커브가 빠르게 올라가고 있다. 분명 16년 12월 구직활동을 할때는 AngularJS가 가장 중요한 자격요건이였으나 3~4월 다시 이직을 준비할 때는 React로 간단한 Todo App 정도는 만들 줄 알아야 지원할 수 있는 수준이었다.(현재는 그 이상으로 러닝 커브가 올라왔다) 공부하고 싶고 개발하고 싶어야 하는 데 취업을 위해 어떤 공부를 해야 되는지부터 생각했고 그 와중에 공부하는 것들에 대한 연관 관계가 말도 안 되게 뒤죽박죽 혼재되었다. 마지막. 스터디 실패 다양한 스터디에 참여했으나 정말 도움이 되어 내 것이 된 스터디는 15% 정도에 불과하다. 실제로 스터디를 다니면서 인터넷 쇼핑을 하거나 딴짓을 하는 분들도 많이 봤다. 물론 나는 그 정도는 아니었지만 집중을 못하거나 복습을 못할때가 있었는 데 이런 경우 스터디는 안 하는 것보다 못한 것 같은 결과를 초래 할 수있다. 실패는 성공의 어머니 Solution이제부터는 실패를 통해 2018년을 계획해본다. 국비지원을 다니던 시절 말로만 노력하는 동기가 입이 닳도록 하는 말이었다.실패는 성공의 어머니! 수료할 때까지 꼭 제 손으로 게시판을 만들겠습니다 적어도 2017년의 나는 그 동기와 다를 바가 없으니 그 동기의 말이 떠오르게 되었다. 기본 실력 없이 기초수준의 Java만 배우고 Front-end 개발자로 취직 11월부터 Harvard CS50 공부를 시작했으며 일단 커넥트재단의 CS50 X edwith를 거의 완강한 상태이다. 앞으로는 운영체제, 알고리즘, 자료구조, 네트워크, 데이터베이스를 공부할 생각이며 18년 1&#x2F;4분기까지 정보처리기사와 영문 Harvard CS50에 집중하며 알고리즘을 볼 생각이다. Outsider : 언어와 프레임워크가 바뀌어도 바뀌지 않을 지식을 공부하자 자바지기 박재성 : 기초레벨 포기하고 공부했다. 초반에는 통했지만 결국은 기초다. 내가 좋아하고 경쟁력 있는 것 그것만 몇 년을 하자. 오전에는 느긋하게 일하다가 뒤늦게 야근하면 되지 생각한다 시간을 버리지 않고 시간별로 무엇을 했는지 기록하는 수단을 찾는다. (완벽한 공부법을 참고할 예정이다) 칼럼니스트 임백준 : 에너지가 바닥난 사람을 컴퓨터 앞에 앉혀두면 그가 할 수 있는 일은 “잠자코 앉아있기”말고 아무것도 없다. 키보드 위에서 영혼이 담기지 않은 손가락 놀림만 분주하다. 과도한 스터디로 이동시간을 소비한다 불필요한 스터디는 절대 하지 않는다. 스터디에 참여하게 되면 노력 없이 나의 지식이 될 것이라고 착각하지 않고 복습과 예습을 통해 적극적으로 참여한다. 또한 원격 스터디도 제대로 한다면 오프라인 스터디보다 더 좋은 결과를 낼 수 있다. 출퇴근에 소요되는 시간이 하루에 3시간 이상이지만 버리기만 했다 개발자라는 직업을 가지고 서울에서 일하지 않는 것은 힘든 부분이다. 그렇다면 수면시간과 출퇴근 시간을 조율해야 하는 데 이런 시간에 쓸데없이 스마트폰보는 시간은 줄인다. 졸릴 땐 잔다. 졸리지 않다 &#x3D;&gt; 스마트폰을 절대 보지 않는다 &#x3D;&gt; 독서를 한다. 우아한 형제들 이종립내가 자고 싶은 시간이 아니라 몸이 자고 싶은 시간에 잔다 사내에 전담으로 맡은 서비스가 폐지된 후 슬럼프에 빠지다 어떻게든 훌훌 털어내고 회사와 협의 후 빠르게 다른 프로젝트를 준비하도록 한다. 넥슨 박종천 VP 한가지 회사가 아닌 어느 회사를 갈 수 있는 역량에 초점을 맞춘다&#x3D;&gt; 능력이 없을 때 생기는 기회는 저주다. 결국 무너지게 된다. 사내에서 자기 발전을 위한 방법을 찾는다.&#x3D;&gt; 내 능력을 키울 수 있는 방법을 찾는다. 개인적인 사연으로 인한 스트레스 극복 실패 이런 경우에는 질질 끌지 않고 어떻게든 자체적인 휴식기를 마련하여 휴식을 가지는 것이 좋을 것 같다. 우아한 형제들 이종립힘들 땐 친구 또는 가족과 가벼운 전화통화를 한다. 황금연휴에 공부할 기회를 버리다 강제성을 부여해서 황금 연휴에 맞는 사이즈의 토이 프로젝트를 선정해서 준비한다. 이상한 모임 by minieetea : 사실 사이드 프로젝트라고 하기에는 투잡에 가까우리만큼 빡빡한 스펙과 일정이었다. 매일 퇴근하고 집으로 달려가 새벽 3-4시까지 작업하고 4시간 남짓을 자며 출근하길 1달. 주말에는 아침에 일어나 새벽 5시까지도 달리는 일이 허다했다. 심지어 해외는 시차가 2시간이나 빨라 한국 새벽반이 눈감을 때쯤 호주 아침반 개발이 시작되어 24시간 개발이 돌아가는 날도 허다했다. 고생했다는 것을 자랑하기보단, 작은 성공의 열매를 맛보았다 얘기하고 싶다. 토이 프로젝트를 완성하려면 얼마나 걸릴까? 잘못된 독서 출퇴근 시간에는 인문학 느낌의 개발 서적을 읽고 있다. 자칫 지루하면 스마트폰의 유혹을 이기지 못하기 때문에 코드보단 인문학 느낌의 책을 선택했다. 또한 읽은 책은 개인 Wiki에 기록할 준비를 해놨다. 우아한 형제들 이종립 : 하루에 3가지 종류(집에서, 지하철에서, 회사에서)의 책을 조금씩 읽고 요약한다 일주일에 35페이지만 읽어도 훌륭한 책을 두 달마다 읽을 수 있다. 의식적 무지 무엇을 모르는지 알면서 공부를 안 하는 저주이지만 다행히도 무엇을 모르는지 알기때문에 모르는 부분에 대한 것을 언제 어디서나 수시로 기록할 수 있는 무지 노트를 작성하고 짬이 날 때마다 무지 노트의 항목들을 클리어하거나 깊이 공부해서 모아놓고 괜찮은 내용은 블로그에 작성해 지식을 나눈다. 프로그래머의 길 멘토에게 묻다 : 무지를 드러내라 무지에 맞섬으로 지식을 습득해나가는 모습을 보여줘라 프로젝트를 통해 만든 것이 없다 분기, 반기, 연간 프로젝트를 계획해서 진행한다. 감당할 수 있는 범위의 프로젝트만 계획하며 Plan B를 계획한다. 작더라도 호기심을 자극하는 재미있는 프로젝트를 진행하자 Velopert : “매일 12시마다 한 시간씩만 투자해서 사이드 프로젝트를 진행하자!” 이 약속을 지키기 위해서, 매일매일 개발 하는 걸, 유튜브에서 라이브 스트리밍을 해서 기록을 남기기로 했다 가상화폐 모의 투자 &#x2F; 거래소 개발기 겉핥기 학습 &amp; 유행 따라가기 사전에 겉핥기로 봐야 되는 부분과 깊게 고뇌하며 공부해야 할 것이 무엇인지 판단하자 만약 공부해야 될 부분이 변하지 않는 지식이라면 절대 겉핥기 식으로 보지 않도록 한다. 같은 걸 여러 번 만들어서 실력을 쌓는다 괴롭더라도 러닝 커브를 극복하고 이겨내며 다음 단계로 넘어가는 방법을 모색해보자 토비의 스프링 이일민 : 내가 무엇을 포기할지 먼저 정하자. 새로운 기술이 너무 많아 이것저것 다 하면 아무것도 못한다. Why가 아닌 How 프로그래머의 길 멘토에게 묻다를 보면 동기부여가 되는 일을 기억해서 계속 상기시키는 걸 추천한다. 러닝 커브를 만나는 나는 도망치는 걸 선호하는 것 같으니 어떻게든 도전하여 쟁취하는 습관과 마인드를 갖두도록 해야겠다. Okky by fender어떻게보다 왜가 궁금했다면 일단 무슨 오류가 왜 발생했는지 읽어라도 보았을 테고,혼자 해결을 못해서 검색으로 답을 찾더라도 왜 그렇게 하면 문제가 해결이 되는지 이해할 수 있을 것입니다.개발자의 실력은 그렇게 느는 것인데, 그 과정을 통째로 생략하고 그냥 이렇게 생긴 메시지가 나오면 어떻게 하는지 찾아 외우겠다는 식으로 접근해선 경력이 아무리 쌓여도 이른바 통밥만 늘지 개발 실력은 제자리걸음이 됩니다. 취업 의식 불안해서 취업만을 생각하는 공부를 하지 않도록 한다. 흔들리지 않고 꾸준히만 공부 해나간다면 트렌드에 흔들리지 않을 수 있을 것이다 넥슨 박종천 VP : 새가 부러질 수도 있는 나뭇가지에 앉아 있는 것은 나뭇가지가 부러질 것을 두려워하지 않는 것이 아니라 부러져도 날 수 있는 날개가 있기 때문이다. 소프트웨어를 쉽게 개발하는 것이 중요한 것이 아니다. 그 이면에 있는 기술력이 중요하다. 지금부터 착실히 내실을 다지고 그것을 잘 배우며 다른 사람과 충돌하지 않고 착하게 지낼 수 있다면 그것은 그 사람만의 경쟁력이 될 수 있다 스터디 실패 불필요한 스터디는 하지 않는다. 스터디를 한다고 그 지식이 모두 내 것이 될 것이라고 착각하지 않는다. 감당할 수 있는 시간의 스터디만 한다. 나의 부주의로 다른 스터디원에게 피해를 주지 않는다. 이제는 스터디를 주도해서 열고 함께 공부하는 법도 배우도록 할 생각이다 자바지기 박재성 : 사람을 구하는 방향을 바꾸자. 나보다 잘난 사람보다는 나와 성향이 비슷한 사람을 찾자. 나와 성향이 맞는 사람을 찾으려면 나를 드러내야 한다. 맞으면 계속 같이 가는 거고, 아니면 그만 보면 된다. 요약이상한모임의 주제는 회고였고 그 덕분에 2017년 개발자로서의 첫걸음을 분석할 수 있었다.이 회고가 나에게는 너무 큰 도움이 되었고 누군가에게도 도움이 되었으면 좋겠다 세상은 넓고 천재는 많다. 똑똑한 개발자도 많고 나보다 더 노력하는 개발자도 많다.부족한 점을 깔끔히 인정하고 적절한 자존감을 유지해야 꾸준한 학습을 할 수 있다.2018년에는 2017년보다 더 성장해서 개발자 다운 개발자가 되고 싶다.","categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"}],"tags":[{"name":"신입 개발자 멘토","slug":"신입-개발자-멘토","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9E%85-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%A9%98%ED%86%A0/"},{"name":"2017 개발자 회고","slug":"2017-개발자-회고","permalink":"https://pocojang.github.io/tags/2017-%EA%B0%9C%EB%B0%9C%EC%9E%90-%ED%9A%8C%EA%B3%A0/"}]},{"title":"Vuetiful Korea 세 번째 밋업","slug":"2017-12-01-vuetiful-ko-third-meetup","date":"2017-11-30T15:00:00.000Z","updated":"2023-02-12T14:14:44.053Z","comments":true,"path":"2017/12/01/2017-12-01-vuetiful-ko-third-meetup/","link":"","permalink":"https://pocojang.github.io/2017/12/01/2017-12-01-vuetiful-ko-third-meetup/","excerpt":"Vuetiful Korea 세 번째 밋업 참가 후기!","text":"Vuetiful Korea 세 번째 밋업 참가 후기! 마루180 Virtual dom to render (우경화 @뉴링크) DOM and Virtual DOMDocument 내부의 태그에 대한 정의와 api를 규격화 한 모델.andDOM을 본따 만든 JavaScript Object. Virtual Dom prevents bad performanceVirtual DOM도 결국 DOM에 patch가 되어야 하니 DOM을 직접 제어하는 코드보다 빠를 수 없다. SnabbDom가장 신기했던 부분이었다.기존에 React &amp; Vue에서 제공하는 VirtualDOM을 더 강력하게 만든다.코드는 그렇게 어려워 보이지 않았으며 Hook과 patch function을 활용한 방법이 재미있었다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// 선택된 모듈과 함께 patch function 초기화const snabbdom = require(&#x27;snabbdom/snabbdom.js&#x27;);const patch = snabbdom.init([ // 토글 class require(&#x27;snabbdom/modules/class&#x27;).default, // DOM 요소 프로퍼티 설정 require(&#x27;snabbdom/modules/props&#x27;).default, // 애니메이션을 지원하는 요소 스타일 핸들링 require(&#x27;snabbdom/modules/style&#x27;).default, // 이벤트 리스너 연결 require(&#x27;snabbdom/modules/eventlisteners&#x27;).default]);let oldv = document.getElementById(&#x27;static_dom&#x27;);let vnode = h(&#x27;div#static_dom&#x27;, &#123; class: [ &#x27;classed&#x27;], style: &#123; color: &#x27;#f00&#x27;, textDecoration: ‘underline’ &#125;, on: &#123; click: changeToButton &#125; &#125;, &#x27;but changed by virtual dom&#x27;);setTimeout(function () &#123; oldv = patch(oldv, vnode); &#125;, 3000)var obj = &#123; tag: &#x27;button&#x27;, data: &#123; type: &#x27;button&#x27;, class: &#123; &#x27;btn&#x27;: true, &#x27;btn-green&#x27;: true &#125;, on: &#123; click: function () &#123;window.open(&#x27;https://kr.vuejs.org/v2/guide/render-function.html&#x27;,&#x27;_blank&#x27;);&#125; &#125;&#125;, children: &#x27;To Vue Blog&#x27; &#125;let oldv = document.getElementById(‘dom’)function createVNode () &#123; return h(this.tag, this.data, this.children)&#125;function updateObj (oldv, data) &#123; return patch(oldv, createVNode.call(data)&#125;oldv = updateObj(obj)// obj 내부의 데이터에 setter로 updateObj를 호출 data에 따라 값이 바뀌는 원시 Vue 완성 // Static DOM =&gt; BUT! changed by Virtual DOM Vue render functionvnode는 유일무이해야함 12345678render: function (h) &#123; var vm = this // this는 현재의 component를 가리킴 var myHi = h(&#x27;p&#x27;, &#x27;hi&#x27;) return h( &#x27;div&#x27; , … //tag&#123; … //data object class, staticClass, style, &#125;⁰,[myHi, Object.assign(&#123;&#125;, myHi)¹]) //children&#125; patch functionVNode의 변화만 보기 때문에 요소에는 관심이 없다.OLD VNode &amp; NEW VNode로 나뉘게 된다.리렌더링 &#x3D;&gt; 라이브러리에서 적용한 상태값들이 사라질 수 있음 1234567// vnode 생성 핼퍼 함수var h = require(&#x27;snabbdom/h&#x27;).default;var container = document.getElementById(&#x27;container&#x27;);// patch function 사용patch(oldVnode, newVnode); 리렌더링이 &#x3D;&gt; 라이브러리에서 적용한 상태값들이 사라질 수 있음 Vue process실데이이터는 get, set으로 쓰임watch에 설정된 경우에만 컴포넌트의 렌더링 관여하는 Watcher 객체 생성 keep alive를 주로 활용하였다는 데 Life Cycle과 관련이 있는 걸로 보인다. 마지막 한마디 =&gt; Vue is JavaScript결과를 아는 것 &lt; 왜 그렇게 되는 것인지 이해 &#x3D;&#x3D;&#x3D; Vue를 더 잘 쓸 수 있는 방법 우경화님의 예제 : https://kellywoo.github.io/vnodeSnabbDom : https://github.com/snabbdom/snabbdom발표자료 : https://docs.google.com/presentation/d/1CicMIDXECBg_5Y7TnAf-iF4uXW7PrDoUfAM6hpBCulI/edit?usp=sharing Vue.js로 Unit Test하기 (박성호 @마이리얼트립) TDD를 도입하게 된 계기웹과 앱을 통신하는 복잡한 과정을 개선하기 위해 테스트를 도입하기로 결정 테스트 도구 선택다양한 선택 중 VueCLI의 Karma &amp; Mocha를 선택 테스트의 종류TDD라고 다 같은 테스트가 아니다.테스트의 종류는 다양하기 때문에 다 하는 게 좋다. 컴포넌트 테스트VueCLI의 초기화면 테스트를 예를 들어 보여준 후 간단한 Todo 앱의 컴포넌트 테스트를 보여주었다Vue.nextTick을 활용할 것을 추천했다. 발표자료 : https://docs.google.com/presentation/d/1nOcis4xOElGXpuOTq2mSHQVxIWXzgkaIXKppXpbT5w0/edit?usp=sharing PWA 시작하기 (최준석 @NHN 벅스) 지루한 pwa 설명모든 브라우저 &amp;&amp; 모든 디바이스오프라인 작동 가능 &amp; 앱과 유사하다업데이트 프로세스 &#x3D;&gt; 최신 상태 유지HTTPS 제공설치 가능레진코믹스나 AWS는 사용 중 application shell캐시 사용 &#x3D;&gt; 빠른 로딩 속도컨텐츠 동적 이용정말 사용해야 하는 기본적인 구성(데이터, 리소스)만 넣어야 한다 참조 : https://developers.google.com/web/fundamentals/architecture/app-shell?hl=ko 서비스 워커브라우저가 백그라운드에서 실행하는 스크립트설치푸시 알림백그라운드 동기화 참조 : https://developers.google.com/web/fundamentals/primers/service-workers/?hl=ko 사용하면서 어려웠던 부분 SWPrecacheWebpackPlugin기본적인 설정 내용에 따라 추가 Service Worker를 자동으로 생성 기본으로 앱 코드 안에 서비스워커를 등록시켜주는 register &amp; Service Worker 파일 필요 vue-pwa-template의 dev버전에 register 부분은 없다. Production register &#x3D;&gt; Service Worker를 자동 생성 (설정필요) 튜토리얼대로만 하면 될 정도로 간단하다고 한다. 발표자료 : http://jicjjang.github.io/2017/11/30/vue-pwa-start 스폰서 광고 많은 프론트엔드 개발자의 지원을 기다리고 있다고 한다.(Vuetiful Korea 세 번째 밋업의 간식 후원) OX 퀴즈 (Bob Lee) 전체적으로 문제가 너무 어려웠다… Q&amp;A Q : PWA 개발 후 패키징은 뭐로 하나요? cordova? 같은 걸까요? 요즘 핫한게 뭐가 있는지 궁금합니다.A : 앱스토어 배포가 필요 없다. 레진코믹스를 예로 설명 Q : PWA의 Push는 firebase를 이용하신 건가요?A : Yes! Q : react native처럼 vue로도 native app을 만들수 있는 뭔가가 있다고 들었는데,용어가 기억이 안납니다. 아시는 분 언급좀 부탁드려요!이승민 : Weex! Q : Vue가 Angular에 비해 낫다고 생각하는 점을 설명해주세요이선협 : 당연히 좋다.TypeScript와 Angular는 어렵고 인기 또한 깃헙 Star까지 Vue가 높다 ​Q : 저희도 Vue.js 하는 사람 뽑아요..A : 웍스모바일에서 뽑는다고 한다 ​Q : 서비스에 PWA 적용하니 정말 좋나요? 실서비스 사례도 궁금해요최준석 : pwa 발표자입니다. 실서비스에서 안써봤습니다 흑흑 회사에서 vue 안씁니다… Vue 한국 사용자 모임 Github : https://github.com/vuejs-kr Facebook : https://www.facebook.com/groups/1152461054807344 블로그 : http://vuejs.kr Slack : https://vuejs-korea.signup.team","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"Vuetiful Korea","slug":"Vuetiful-Korea","permalink":"https://pocojang.github.io/tags/Vuetiful-Korea/"},{"name":"Vuetiful Korea 세 번째 밋업","slug":"Vuetiful-Korea-세-번째-밋업","permalink":"https://pocojang.github.io/tags/Vuetiful-Korea-%EC%84%B8-%EB%B2%88%EC%A7%B8-%EB%B0%8B%EC%97%85/"},{"name":"Vue 한국 사용자 모임","slug":"Vue-한국-사용자-모임","permalink":"https://pocojang.github.io/tags/Vue-%ED%95%9C%EA%B5%AD-%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%AA%A8%EC%9E%84/"}]},{"title":"TypeScript에 UglifyJs 적용하기","slug":"2017-11-30-ts-uglify","date":"2017-11-29T15:00:00.000Z","updated":"2023-02-12T14:14:44.053Z","comments":true,"path":"2017/11/30/2017-11-30-ts-uglify/","link":"","permalink":"https://pocojang.github.io/2017/11/30/2017-11-30-ts-uglify/","excerpt":"TypeScript에 Babel 없이 UglifyJs 적용","text":"TypeScript에 Babel 없이 UglifyJs 적용 Vue에 TypeScript를 적용하던 중 당황스러운 버그에 종착했다.분명히 다양한 Boilerplate를 참고했음에도 불구하고 webpack에서의 빌드는 정상적이지만 Vue App이 브라우저에 올라갈 때 오류가 뜨는 것이다. 1234Failed to compile.bundle.js from UglifyJsUnexpected token: name (urlParts) [bundle.js:12412,4] 12ERROR in bundle.js from UglifyJsUnexpected token: name (urlParts) 확인해보니 UglifyJS는 ES6를 지원하지 않는다고 한다. TS &#x3D;&gt; JS 변환된 파일을 Babel로 ES5로 변환한 후에 적용하면 된다는 데… TypeScript는 컴파일 옵션을 통해 컴파일 타겟을 ES5로 설정 가능하기 때문에 굳이 Babel을 사용할 필요가 없다. 이 점이 굉장히 찜찜하여 더 검색을 해본 결과 기본적으로 webpack에서 제공해주는 UglifyJS 플러그인이 아니라 설치를 해서 옵션을 주면 가능하다는 것 별도의 플러그인을 설치 1npm i -D uglifyjs-webpack-plugin webpack.config.js 123456789var UglifyJSPlugin = require(&#x27;uglifyjs-webpack-plugin&#x27;);plugins: [ new UglifyJSPlugin(&#123; uglifyOptions: &#123; // 옵션 적용 &#125; &#125;)] 허무하게 해결이 되긴 했지만 외국에서는 TypeScript with Babel 문제 의견이 분분하다.TypeScript를 적용할 때 다양한 자료를 참고한다면 최대한 최신 자료를 참고해야 하며이슈 목록을 체크해 사전에 삽질을 방지해야 한다.","categories":[{"name":"programming","slug":"programming","permalink":"https://pocojang.github.io/categories/programming/"},{"name":"typescript","slug":"programming/typescript","permalink":"https://pocojang.github.io/categories/programming/typescript/"}],"tags":[{"name":"TypeScript from UglifyJs","slug":"TypeScript-from-UglifyJs","permalink":"https://pocojang.github.io/tags/TypeScript-from-UglifyJs/"},{"name":"TypeScript","slug":"TypeScript","permalink":"https://pocojang.github.io/tags/TypeScript/"},{"name":"UglifyJs","slug":"UglifyJs","permalink":"https://pocojang.github.io/tags/UglifyJs/"}]},{"title":"GDG DEVFEST 2017 @Seoul Univ GCP","slug":"2017-11-19-gdg-dev-fest","date":"2017-11-18T15:00:00.000Z","updated":"2023-02-12T14:14:44.053Z","comments":true,"path":"2017/11/19/2017-11-19-gdg-dev-fest/","link":"","permalink":"https://pocojang.github.io/2017/11/19/2017-11-19-gdg-dev-fest/","excerpt":"GDG DEVFEST 2017 관람 후기","text":"GDG DEVFEST 2017 관람 후기 두번 다시는 오지 않겠다 다짐했지만 또 오게되었다…. Why TypeScript with Clean Architecture by 정유진 프론트엔드 모던 프레임워크 낱낱히 파헤치기 by 한성민 해외 취업이야기 by 정승욱 특별한 취업이야기 by 김태호 리액트와 장고로 만드는 Progressive Web App: 빠르고 단단한 웹사이트 제작하기 by 진유림 사은품 Why TypeScript with Clean Architecture by 정유진 점점 커지는 프로젝트에 관리의 어려움을 느끼기 시작함 Why Typescript with Clean Architecture from 유진 정 문제의식 다양한 지식을 통제 올바른 관점 통일 실수를 최소화 할 수 있는 개발환경 코드 리뷰가 의미 없는 시간으로 변질되고도메인 간의 관계가 서버에서는 관리가 분산 설계를 통해 관리되지만WEB 환경에서는 굉장히 우려되는 현상을 발견하게 되고Type Safe 기반의 아키텍처를 설계하는 것으로 결정하게 된다. Why TypeScript?수많은 후보들 중 결국 TypeScript를 선택하게 되었다.그 이유는 앞으로 지원할 사람을 위한 측면도 있다고 한다. JavaScript -&gt; TypeScript기존의 기술 스택인 React 환경에서 전환하는 데 큰 어려움은 없었다.특히 DDD (Domain-driven design)에 가장 큰 포커스를 두었으며디렉토리 구조조차 DDD에 상응하는 구조로 설계하여 비즈니스 부분도 고려하였다. TypeScript로 변경한 후기 다양하게 혼재되는 관점이 통일되었다. DDD를 적용하여 이제 비즈니스적인 측면이 고려된 설계로 안정감이 더해졌다. 의미있는 코드리뷰를 진행하게 되었다. 개발환경도 중요하지만 회사의 비즈니스측면을 고려한 면그리고 문제의식을 뭔저 자각하고 큰 실행에 옮긴 점이 대단하게 느껴졌다.마지막으로 TypeScript로 이전하면서 큰 시행착오는 없었다는 부분에 감탄하게되었다. 프론트엔드 모던 프레임워크 낱낱히 파헤치기 by 한성민 GDG DevFest 2017 Seoul 프론트엔드 모던 프레임워크 낱낱히 파헤치기 from Kenneth Ceyer JavaScript 라이브러리의 역사 과거에는 객체 사용이 힘들었지만 commonJS 등장 이후에 모듈 개념이 등장하기 시작그 후 AMD의 철학을 따른 RequireJS가 등장하며 끝으로 nodeJS까지 등장하였다.완전히 모듈 관점의 개발이 진행되기 시작하게 된 계기가 되었다. 2017 Front-end의 상황 이제는 배워야할 게 너무나 많다. 절대로 다 배울수는 없다 중요하다고 생각하는 키워드 동적렌더링 모듈링 &amp; 번들링 타이핑 테스트 자동화 ** 그 와중에 나타난 프레임워크 **모든 걸 쉽게 만들어 주는 프레임워크! Angular내장된 기능은 좋으나 러닝커브가 크다. React생태계가 넓지만 의존성과 버전에 민감하다. 라이브러리이기때문에 자체적인 기능은 거의 없다. Vue러닝커브와 가벼움에 유리한 점이 많다. 규모가 커지면 재활용성이 떨어진다 코드비교AngularBinding이 강력하다 ReactJSX에 로직이 함께한다. 상태관리가 굉장히 중요하다 VueAngular + React 느낌도 있지만 AngularJS를 떠올리게 된다 트렌딩 검색 순위 &amp; 스택오버플로우Angular &gt; React &gt; Vue(AngularJS + Angular의 경우 가장 큰 사용자를 보유한다 ) Github Star React &gt; Vue &gt; Angular 진입장벽(쉬움) Vue &gt; React &gt; Angular (어려움) Angular &#x3D;&gt; 사전에 프레임워크 경험 권장React &#x3D;&gt; 상태관리와 생명주기가 상대적으로 어려움AngularJS 사용 경험자는 Vue 학습에 유리하다 속도Vue가 가장 빠른 벤치마크를 보인다하지만 Angular에 AOT를 적용한다면 엄청난 퍼포먼스를 보인다 컴포넌트 Angular대규모 프로젝트에 권장 ReactSSR의 경우에 유리 Vue소규모 프로젝트에 권장 템플릿 Angular체계적이지만 다양한 패턴이 존재하여 어려울때가 많다 React템플릿 미지원 Vue간단하고 명시적이다 (AngularJS와 비슷) 개인적인 의견이 많이 들어가긴 한 발표라고 느껴지긴 했다.이제 지겨운 주제라서 보기 싫다는 사람도 많이 봤지만 결국 강당을 다 메울정도로 많은 참가자가 있었다.발표자분께서는 정말 꼼꼼하게 분석해서 좋은 강연을 해주었지만 Vue에 대해서는 약간 부족한 정보가 보였고너무 Vue만 찬밥아니냐는 참가자도 있었던 좋지만 아쉬운 발표였다 해외 취업이야기 by 정승욱 Grab에서 근무하고 계신 정승욱님의 해외취업 경험기한국 개발자들의 많은 지원을 기다린다고 한다. 해외취업을 준비하게된 계기오픈소스 활동으로 Linkedin을 통해 다양한 유수의 헤드헌터에 제의가 많이 들어옴 해외취업 준비과정다니고 있던 회사를 퇴직 후 반년을 영어공부에 매진하였다.거의 하루에 8시간은 영어 공부를 하며 지냈다고 한다. 지원지원은 직접 Apply하였으며 실제로 접촉했던 회사는 AWS, Grab, Shopify 채용프로세스운이 좋아 1개월이 조금 넘는 기간만에 취업에 성공한 케이스하고한다.하지만 그 과정은 굉장히 타이트했음을 강조하였다.레퍼런스를 요구하는 등 영어이기때문에 하고 싶은 말도 다 표현할 수 없는 답답한 점까지 있기 때문이다. 영어면접열심히 공부하고 준비했지만 굉장한 현실은 상대방의 말이 잘 들리지 않아 큰 고생을 했다고한다. 테스트구글 독스를 통해 실시간으로 테스트를 보게 되었다고한다.IDE의 지원도 없기 때문에 오히려 한국에서의 테스트보다 더욱 더 힘들 수 밖에 없었으며컴퓨터 공학 기초인 자료구조와 알고리즘도 당연하게 확인을 하고는 했다고 한다. 해외 개발자 생활이미 다양한 인종의 개발자들과 생활하는 환경이였다특히 인상적인 부분은 같은 언어를 구사함에도 불구하고 너무나 다른 억양으로애로상황이 많기때문에 업무가 지연되기도 한다곻한다 Q&amp;A 영어는 어느 정도를 해야 가능한지당연히 의사소통이 되야한다. 특히 IELTS 점수가 7점을 필히 넘어야만 지원이 가능하다고 본다.(해외에서 1년 이상 거주한 경험과 사회 경력등까지 반영되는 점수라고 한다.) 개발 경력은 어느정도가 되야 해외취업에 적당한지보통 만 3년이상은 되야 지원에 적당하다.특히 인도와 아시아 개발자는 경력에 대한 뻥튀기가 심하기 때문에 그런 인식도 고려해야한다 협업을 하며 언어가 잘 통하지 않는 경우 어떻게 대처하였는 지어쩔 수 없다. 이해할 때까지 계속 되 물어야 한다.결국에는 적어서 의사소통을 하는 경우가 있다. 특별한 취업이야기 by 김태호 구글 한국 지사 근무중인 김태호님의 이야기를 들어보았다. 구글에 지원재직 중에 직접 지원하게 되었으며 12월에 지원하고 3월에 최종합격하게되었다 면접오히려 외국인 면접관이 더욱 편했다.특히 한국인 면접관은 압박 질문을 시도하여 어려울 때가 많았다.기술지원 직무였지만 똑같이 구글 독스를 통해 테스트를 하는 경우가 있다고 한다.한때 유행했던 구글의 신기한 면접방법 (ex. 전 세계의 셔틀버스는? 버스에 들어가는 농구공의 개수는?)이제 그런 질문은 안한다고 하니 걱정하지 말라고 한다. 영어공부 오버워치 영어로 하기(농담이 아니라 진심임을 강조) 컨퍼런스 동영상들 많이 보기등등 다양한 시도를 했다 다양한 문화의 사람들과의 협업굉장히 친하게 지내고 있기때문에 허물없이 잘 지내고 있다.(의사소통이 통하지 않을때 What?!이라고 할 수 있는 정도) 리액트와 장고로 만드는 Progressive Web App: 빠르고 단단한 웹사이트 제작하기 by 진유림 Progressive Web App (feat. React, Django) from Jay Jin PWA 제작 계기 기존에 운영하던 재고관리 시스템(Boxture)을 앱으로 보게 해달라는 요청을 받음 다양한 플랫폼 중 변화에 유동적으로 대처할 수 있는 PWA 고려 IOS와 Safari가 미지원인 점이 아쉽지만 강력한 Service Worker에 감탄하여 적용하게됨(Apple측에서도 지원을 준비하고 있으니 기다려보자) PWA 개발에 좋았던 점 기존에 사용하던 CRA(Create React App)을 사용하여 바로 적용할 수 있었다. Service Worker에서 도와주는 부분이 굉장히 많았다. 쉽게 쉽게 적용할 수 있는 부분이 많았다. 완벽하지는 않지만 네이티브의 푸쉬도 가능하다. PWA 시행착오.. 쉽게 쉽게 할 수 있지만 만만치 않았다. 특히 캐시관련 이슈가 골칫거리였다. 네이티브 기능의 모든 부분을 대처할수는 없다. 꼭 필요할때만 적용하자.. 꼭 다양한 관점으로 고려할 것. Boxture를 빡쳐라고… React와 django에 대한 얘기는 거의 없었던 부분이 아쉽긴하지만 굉장히 인상적인 부분이였다.사내시스템이 아닌 실제 소비자에게 넘어가는 프로젝트라면 아직 어렵겠지만 개인 프로젝트를 하며익혀보는 것도 나중을 위해 좋아보인다. PWA의 장점을 확실하게 느낄 수 있는 발표였다. 사은품역시나 엄청난 인파 끊임없이 고생하신… 마우스 &amp; 티셔츠","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"gdg","slug":"gdg","permalink":"https://pocojang.github.io/tags/gdg/"},{"name":"gdg 2017","slug":"gdg-2017","permalink":"https://pocojang.github.io/tags/gdg-2017/"}]},{"title":"비전공 학원출신 SI개발자, 유명스타트업 들어간.ssul","slug":"2017-11-16-okky","date":"2017-11-15T15:00:00.000Z","updated":"2023-02-12T14:14:44.053Z","comments":true,"path":"2017/11/16/2017-11-16-okky/","link":"","permalink":"https://pocojang.github.io/2017/11/16/2017-11-16-okky/","excerpt":"35살, 비전공 (철학과), 국비지원 학원에서 개발 공부, 웹에이전시 4년 경력이 전부. 누가 봐도 ‘좋은 회사’ 들어가기 어려워 보이는 이 스펙을 갖고 있는 개발자는많은 개발자들의 선망의 대상인 우아한형제들에 어떻게 들어갈 수 있었을까요?","text":"35살, 비전공 (철학과), 국비지원 학원에서 개발 공부, 웹에이전시 4년 경력이 전부. 누가 봐도 ‘좋은 회사’ 들어가기 어려워 보이는 이 스펙을 갖고 있는 개발자는많은 개발자들의 선망의 대상인 우아한형제들에 어떻게 들어갈 수 있었을까요? 노상범 대표님이 작성했던 글 어린 시절 개발공부 회사생활 건강, 정신건강 SI 탈출 계획 Q&amp;A 발표자료 그 외에 후기 포스팅 이종립님 노상범 대표님이 작성했던 글 철학과 졸업 후 아마추어 운동선수, 보험회사 텔레마케터, 보습학원 강사 등의 일을 하다가다소 늦은 나이에 개발을 시작했지만 본인의 환경을 극복하고개발자로서의 새로운 멋진 인생을 펼쳐나가고 있는 개발자 이종립님을 모시고개발공부는 어떻게 공부했고, 보다 나은 개발자가 되기 위해본인은 어떤 노력을 기울였는지에 대한 얘기를 들어보는 시간을 마련했습니다. https://okky.kr/article/320736?note=1053695https://okky.kr/article/423962 어린 시절 운동 -&gt; 학원 강사 -&gt; 보험 텔레마케터 -&gt; 학원 강사(사회의 부조리를 알게 해준 직업들만 언급) 어린 시절 운동을 평생 할 줄 알았다하지만 운동을 그만두고 아르바이트를 하다 우연히 학원 강사로 취직강사를 그만두고 대학을 다님 (전공 철학과) 졸업을 하였으나 취직에 실패하여 백수가 됨 보험 가입 권유를 받았으나 백수라 보험 회사에 취직했으나영업에 소질이 없어 그만두고 다시 학원 강사로 취직100만원 조금 넘는 월급을 받으며 강사에 재능을 보였으나말도 안 되는 부조리한 이유로 잘리게 되었고 다시는 학원 강사가 되지 않겠다는 다짐을 하며앞으로는 앉아서 하는 일을 하게되겠다며 결심하게 된다 개발공부 결국 개발자 친구에 권유로 국비지원 학원에 다니게 된다.31세, 철학 전공, 통장잔고 50만원돈 부족 -&gt; 가계부 개발시간 -&gt; 시간 활용 궁리경험 부족 전공자가 아니기 때문에개발 상식 부족 -&gt; 여러 사람의 추천서 탐색무엇을 공부해야 할지 모른다 -&gt; 방통대 커리큘럼, 전공과목 소개 참고새롭게 배워야 할 것이 많다 -&gt; 일지 &#x2F; 레포트 기록 for문에 파일 입출력만 배운 상태에서 가계부를 개발수면시간을 정해놓고 밥을 먹으면서도 동영상 강의를 시청도서관 및 도서구입을 하며 전공 공부를 꾸준히 하게 됨 막노동을 하던 시절 막 노동 현장의 단어를 모른다고 무시당했던 생각에개발자가 되어서도 무시하지 않겠다며 개발에 모르는 단어를 무조건 숙지 학원 수료 후 취직조건은 가장 가깝고 연봉을 많이 주는 곳으로!! 회사생활회사에서 도서 구입을 굉장히 많이 했다프로젝트 중 남는 시간에는 무조건 독서를 했다2주에 한 번은 서점에서 분위기 파악도서관 도서 구입 의뢰를 활용 독서를 효율적으로 열심히 하루에 3권 (조금씩 읽고 요약)집 - 샘플코드 위주출퇴근길 - 재미학원&amp;회사 - 회사에 도움 되는 책 건강, 정신건강개발자 마인드를 가지려 노력 (정품 사용)-&gt; 라이선스와 자료의 소중함을 깨우친 굉장한 경험꾸준한 청결관리일주일에 한 번은 필히 운동항상 계획을 세웠으며 Plan B도 생각함(모든 계획을 망한다는 전제하에 세움)힘들거나 슬럼프가 왔을 때는 가벼운 전화통화를 한다. Code Complete 2&#x2F;E 을 처음 본 게 굉장한 도움과 믿음을 가지게 되었다프로그래밍 책을 두 달마다(일주일에 35페이지) 읽을 수 있는 용기를 주었다 독서 중 잠이 올 때는 아예 책을 타이핑해서 베껴버렸다..그러던 중 손가락에 관절염이 생겨 Vim으로 코딩하게 되었다.결국 Vim 플러그인 제작 후 깃헙 순위에 2위까지 올라간 뿌듯한 기억 SI 탈출 계획 경직된 수직구조의 회사에 파견..정부기관 파견 당시 말도 안 되는 계약관계와 예산에 충격에 PM과 다툼파견 중 정부기관에 오래 일한 사람에게 커피를 주고 개발 환경 개선에 큰 도움을 줌마구잡이로 공부하다 결국 파견이 가기 싫어 이직에 유리한 방향으로 공부 방법을 바꾸기 시작 내 실력을 정직하게 드러낼 수 있는 곳을 이직의 목표로 잡게 된다 지원 회사 리스트 작성 &#x3D;&gt;합격률이 높은 곳부터 지원하며 면접 정리 우연한 기회에 헤드헌터와 연락이 되고우아한 형제들에 지원하게 됨 &#x3D;&gt;코딩테스트 중 문제당 각 10개씩 테스트 케이스 돌고 다양한 언어를 사용(JS,SQL,Java,Scala)라스칼라코딩단에 우아한형제들의 사람들이 있다는 소문을 들었다는.. TDD에 빠져있던 때인데 TDD의 얘기만 1시간 가량하다 합격! 책을 보고 요약하는 습관 공부에 일지와 주별로 자기 자신에게 제출하는 리포트를 작성 좋은 프로그래머란, 일방통행 도로에서도 양쪽을 모두 보고 건너는 사람이다. 팀플레이 : 다른 사람을 도울 방법작은 도구를 만드는 습관 : 같은 일을 수작업으로 처리하지 않는다.기억력을 보관하는 습관 : 블로그&#x2F;개인 위키를 작성하고 관리한다좋은 음식과 충분한 수면항상 플랜B 준비알상 생활에서도 최적화 고민 Q&amp;A SI에서의 습관 지속 방법-&gt; 연봉과 술 그리고 공부를 방해하지 않는 회사만 입사유지 보수할 때는 회사에서 자동화 프로그램을 만들어주며 공부 유지 보수 회사에서 자동화 프로그램을 만들어주고 나서의 오히려 요구는 어떻게 대응했는지?-&gt; 친분이 되었을 때만 도구를 만들어줌. 만들어준 도구에 대해서 설명을 해주고 다 해줌 (전공에 1년 경력) 취업 준비 중이며 스터디를 하며 낙방을 통해 자신의 한계를 알게 됨공부를 더 할지 하향지원을 할지…-&gt; 이직이 단 한 번이라 조언이 힘들다. 나였다면 낮은 회사를 가서 배울 거 다 배우고 이직하겠다.프로그래머의 길 멘토에게 묻다라는 책을 읽어보길 권장한다 코딩 테스트 대비를 어떻게 했는지.. 알고리즘 공부 방법-&gt; 사람마다 공부의 방법은 다르다. 본인은 불안함이 가득해서 빠르게 답을 보고 공부한다.무조건 소스를 많이 본다 상황마다 방법은 다른 것이다 책만 읽는다고 공부가 되느냐… 언어는 어느 정도 공부하고 다른 공부를 공부하느냐-&gt; 언어를 마스터하는 건 불가능하다. 적당히 하고 딴거 하자 파고들면 끝이 없다.언어의 특징과 대표적인 부분을 파악하는 것도 도움이 된다. 언어를 사용하는 문화가 다르다.패러다임만 파악해도 비슷한 부분은 굉장히 빠르기 익힐 수 있다.최소 3개의 다른 언어를 파악하는 것도 좋다. 매년 1월 1일 새로운 언어를 하고 있다.책은 아무리 사소한 코드라도 코드 타이핑을 한다 좋은 개발자와 다양한 경험-&gt; 질투가 너무나 심하고 불안하기 때문에 누구보다 잘하려고 노력했다.문제를 1등으로 풀지 못하면 정말 질투가 나서 더 공부했다. 요약 비전공자이지만 엄청난 계획을 그대로 행동하고 실천하였다. 항상 플랜B가 있었다. 이렇게 해서 안되면 이렇게 하지 뭐 아 그래 저렇게 해볼까? 꽤나 치밀한 전략으로 우아한 형제들 입사에 큰 작용을 하게 되었다. 결국 미친 듯한 노력을 보였다. 자기 관리에 투철한 점이 돋보였다. 엄청난 독서량을 소화하며 다양한 미니 프로젝트를 통해 꾸준히 코딩했다. 기록과 리포팅을 통해 독서를 요약했다. 이런 삶을 SI에서 일하며 4년 이상 유지했다. 발표자료: https://www.slideshare.net/ssuser69b63d1/ss-82150195 그 외에 후기 포스팅:https://okky.kr/article/425700:https://okky.kr/article/425800 이종립님 깃헙 : https://github.com/johngrib 블로그 :https://johngrib.github.io","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"okky","slug":"okky","permalink":"https://pocojang.github.io/tags/okky/"},{"name":"이종립","slug":"이종립","permalink":"https://pocojang.github.io/tags/%EC%9D%B4%EC%A2%85%EB%A6%BD/"}]},{"title":"러닝 자바스크립트","slug":"2017-08-13-learning-js","date":"2017-08-12T15:00:00.000Z","updated":"2023-02-12T14:14:44.052Z","comments":true,"path":"2017/08/13/2017-08-13-learning-js/","link":"","permalink":"https://pocojang.github.io/2017/08/13/2017-08-13-learning-js/","excerpt":"ES6로 제대로 입문하는 모던 자바스크립트 웹 개발! 러닝 자바스크립트 리뷰","text":"ES6로 제대로 입문하는 모던 자바스크립트 웹 개발! 러닝 자바스크립트 리뷰 책 정보출판사 : 한빛미디어저자 : 이선 브라운역자 : 한선용출간 : 2017-07-11페이지 : 464ISBN : 9788968483387가격 : 28,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=12181869: http://www.hanbit.co.kr/store/books/look.php?p_code=B2328850940 소개ES6로 JavaScript를 입문!정말 이 책의 부제와 어울리는 내용과 구조의 책이다.번역에 대한 악평이 꽤나 많은 데 번역이나 내용이나 만족스러웠으며매끄러운 책으로 번역에 걱정이 있으신 분들은 걱정하실 필요가 없을 듯하다. 입문으로 볼 수는 있지만 아예 프로그래밍에 대한 지식이 없거나프로그래밍 언어에 대한 학습이 전무하다면 이 책은 어려울 수가 있다. ECMA Script 2015로 접할 수 있는 JavaScript의 세계요즘 JavaScript 서적은 ES6 이전과 이후로 나눌 수 있을 정도로 내용 차이가 굉장히 크다.하지만 ES6 이후에 나온 책들은 너무 ES6에 대한 설명과 레퍼런스로 가득하다. 러닝 자바스크립트는 ES6에 집중하기보다는 포함된 입문 서적의 느낌이다.지나치게 ES6가 많지도 않고 너무 적지도 않고 ES6 이외의 내용까지 적절하게 섞여있다.때문에 요즘 JavaScript가 어떤 JavaScript인지 알고 접근할 수 있다. 또한 책 디자인부터 설명까지 세부적인 요소까지 따라주니 지루할 수 없이 술술 익힌다. Front-end 맛보기Front-end 입문이 가장 어려운 이유는 너무나 빠르게 변하고 없어지기 때문이다.Webpack, Gulp, Git 등 수많은 개발도구에 시달리기에 시작도 전에 지쳐 쓰러질 수가 있다.러닝 자바스크립트에서는 천천히 그리고 꽤나 꼼꼼하게 개발 도구들에 대해서 설명을 해놓았고막상 따라 해보니 초보자들도 쉽게 따라 하며 자신감을 가질 수 있겠다는 생각이 들었다 후기너무나 마음에 드는 책이었다.JavaScript를 입문하려는 사람도 많아졌으며 JavaScript를 통해 개발에 입문하려는 사람도 많아졌다.때문에 누군가에게 자바스크립트에 대한 책을 추천하거나 학습을 추천할 때ES5 이전 버전보다는 차라리 ES6부터 학습을 하길 권장했었는데 이 책이 정말 제격이 아닐까 싶다. 요약 장점 입문서까지는 아니지만 처음 JavaScript를 접하는 사람도 쉽게 접근할 수 있다. 일명 코뿔소 자바스크립트 완벽 가이드만큼은 방대하지는 않지만 ES6 코뿔소라고 볼 수 있다 정규표현식, 비동기, NodeJS, jQuery까지 친절히 다룬다. 챕터 2 자바스크립트 개발 도구 부분이 심플하지만 입문자들에게 도움이 될 것 같다. 단점 챕터별로 다르지만 깊이나 설명이 부족한 부분이 간혹 나온다. 순수하게 ES2015만 다룬다고 기대하면 실망할 수 있다. ES2015 환경 속의 JavaScript 책이다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"javascript","slug":"book/programming/javascript","permalink":"https://pocojang.github.io/categories/book/programming/javascript/"}],"tags":[{"name":"러닝 자바스크립트","slug":"러닝-자바스크립트","permalink":"https://pocojang.github.io/tags/%EB%9F%AC%EB%8B%9D-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"},{"name":"javascript es6","slug":"javascript-es6","permalink":"https://pocojang.github.io/tags/javascript-es6/"},{"name":"es6 코뿔소","slug":"es6-코뿔소","permalink":"https://pocojang.github.io/tags/es6-%EC%BD%94%EB%BF%94%EC%86%8C/"}]},{"title":"앵귤러 첫걸음","slug":"2017-07-14-first-step-angular","date":"2017-07-13T15:00:00.000Z","updated":"2023-02-12T14:14:44.052Z","comments":true,"path":"2017/07/14/2017-07-14-first-step-angular/","link":"","permalink":"https://pocojang.github.io/2017/07/14/2017-07-14-first-step-angular/","excerpt":"개발 환경 설정부터 컴포넌트 테스트까지 다양한 예제로 익히는 Angular! 앵귤러 첫걸음 리뷰!","text":"개발 환경 설정부터 컴포넌트 테스트까지 다양한 예제로 익히는 Angular! 앵귤러 첫걸음 리뷰! 책 정보출판사 : 한빛미디어저자 : 조우진출간 : 2017-06-01페이지 : 488ISBN : 9788968486807가격 : 28,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=12096305: http://www.hanbit.co.kr/store/books/look.php?p_code=B3348481708 후기이 책은 이미 베타 리딩을 통해 접해본 경험이 있는 책이었다.처음 원고를 보고는 실망을 했었지만 직접 보면서 예제 부분이 맘에 들었던 책으로굉장히 디테일하게 베타 리딩 소감을 전달했던 것이 기억난다. 일단 한빛에서는 “첫걸음” 이라는 책 제목을 요새 많이 쓰지만 첫걸음으로는 무리가 있다.왜냐하면 요새 앵귤러나 리액트를 공부하려는 경우 개발자들도 많지만퍼블리셔들도 있을 뿐만 아니라 개발을 접하는 입문자들이 다양하기 때문이다. 때문에 Angular나 React를 위해서는 JavaScript뿐만 아니라Webpack, Babel, TypeScript, EcmaScript2015+를 습득해야 하는 데이 책에서는 간단히 부록 형식으로만 다루기 때문이다. 하지만 기초 수준의 이론을 설명하고 예제로 시작하는 흔한 과정이 아닌예제를 통해 앵귤러를 접할 수 있는 책이다 예제만 잘 따라 하다 보면 어느새 실력이 쌓여있는 것을 볼 수 있을 것이다 저자는 도식화에 꽤나 많은 신경을 쓴다 독특하지만 현실적인 예제 위주의 서적베타 리딩을 할 때는 몰랐지만 저자분께서 실제 현업에서 앵귤러를 접하며습득한 것을 알게 되었고 어쩐지 예제가 독특하지만 대충 만든 예제가 아닌 깊이 있는예제들로 빼곡하다는 걸 알 수 있었다. 보통 Udemy 같은 동영상이나 실제 레퍼런스를 참조하며 공부했었는 데Udemy에서 참신한 예제를 볼 때마다 역시 외국물은 다르구나 생각하고는 했는데 이 책에 있는 예제들 또한 이에 전혀 뒤처지지 않는다. 왜냐하면 국내에는 Firebase를 다룬 서적이 아직 없는 걸로 알고 있는 데이 책에서는 Firebase도 다루고있다.물론 굉장히 크게 다루는 건 아니지만Angular와 Firebase는 모두 구글에서 제공하는 서비스와 프레임워크이기 때문에연동하여 학습하기 굉장히 좋다. 특히 해외에서는 Angular를 학습할 때 Firebase가 빠지지 않고 등장한다 또한 구조를 도식화하여 자주 설명해준다.Componont 구성은 중요하기 때문에 저런 구조를 시각화해서 보여준다는 것은 필수라고 볼 수 있다 코드를 알아보는 데에 불편함이 없었다. 기초와 입문을 프로젝트를 통해 경험한다입문 또는 기초를 위해서라면 어쩔 수 없이 ES6, TypeScript, JavaScript 등등배워야 하는 건 산더미이다. 하지만 “앵귤러 첫걸음”과 함께라면 믿고 예제 위주로 습득을 하며필요하거나 헷갈리는 부분을 찾아가며 공부하는 것도 굉장히 효율적이며빠르다고 생각이 든다. 어떻게 사전 학습 없이 앵귤러를 공부 할 수 있을까?싶지만 그걸 위해서 지루하게 ES6와 TypeScript의 기초를 습득하다가흥미를 잃기보다는 이렇게 예제 위주로 시작하는 것도충분히 좋은 학습방법이라는 것을 알 수 있다 심화 예제가 꽤나 알차다 요약 장점 재미있고 참신한 예제가 다양하게 있다. 국내에 Firebase를 배울만한 책은 없기 때문에 좋은 기회인 것 같다. 예제마다 도식화에 굉장히 친절하다. 단점 TypeScript &amp; ES2015+ 등 기본적인 부분을 모르면 보기는 어려울 것 같다. 정신없이 타이핑하다 보면 흐름이 끊길 때가 있는 데 구성이 헷갈릴때가많다. 직접 세팅을 하는 부분도 있으면 좋을 텐데 AngularCLI 환경에서만 실습한다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"framework","slug":"book/programming/framework","permalink":"https://pocojang.github.io/categories/book/programming/framework/"}],"tags":[{"name":"앵귤러 책 추천","slug":"앵귤러-책-추천","permalink":"https://pocojang.github.io/tags/%EC%95%B5%EA%B7%A4%EB%9F%AC-%EC%B1%85-%EC%B6%94%EC%B2%9C/"},{"name":"앵귤러 예제책","slug":"앵귤러-예제책","permalink":"https://pocojang.github.io/tags/%EC%95%B5%EA%B7%A4%EB%9F%AC-%EC%98%88%EC%A0%9C%EC%B1%85/"},{"name":"앵귤러 첫걸음","slug":"앵귤러-첫걸음","permalink":"https://pocojang.github.io/tags/%EC%95%B5%EA%B7%A4%EB%9F%AC-%EC%B2%AB%EA%B1%B8%EC%9D%8C/"}]},{"title":"나는 자바스크립트 개발자다 by JSDev.KR & React Korea The 1st MeetUp","slug":"2017-03-15-jsdev-react-1st-meetup","date":"2017-03-14T15:00:00.000Z","updated":"2023-02-12T14:14:44.052Z","comments":true,"path":"2017/03/15/2017-03-15-jsdev-react-1st-meetup/","link":"","permalink":"https://pocojang.github.io/2017/03/15/2017-03-15-jsdev-react-1st-meetup/","excerpt":"JSDev.KR &amp; React Korea The 1st Meet up 관람기!","text":"JSDev.KR &amp; React Korea The 1st Meet up 관람기! 이종은 신정규 김종광 김동우 질의응답시간 자바스크립트 개발자 포럼 (JSDev.KR) React Korea (Facebook Group) 이종은React Native 번역서의 저자 나는 자바스크립트 개발자다.한 가지 언어로 개발한다면 본인은 자바스크립트로 한다! 사랑자바스크립트를 안다고 생각하면 안된다!호기심을 가지고 자바스크립트를 알고 이해해야 한다.Kyle Simpson &#x3D;&gt; You Don’t KnowJS자바스크립트 완벽가이드 JS 커뮤니티는 그전부터 존재했으니 많은 사랑을 부탁했다. 커뮤니티란같은 관심과 의식으로 환경을 공유하는 사회 집단이다 or 광장같은 관심사를 가진 누구나 묻고 답하고 나누는 공간이 되었으면 한다. 나는 커뮤니티를 통해 질문을 해본 적이 있다 답변을 해준 적이 있다 다른 사람이 내가 궁금한 질문을 하는 것을 본 적이 있다. 질문 또한 다른 사람에게 도움을 주는 행동이다 질문은 자세한 정보로 정중하게 답변은 친절하게 질문에 답변을 받고 글을 지우지 말자 신정규 React의 JSX에 분노하여 폴리머를 선택하여 개발한 후기를 공유했다. 문제의식이 무엇인지 생각하자문서? 런타임? 충돌 : 종교 전쟁의 시작W3CWHATWG 2007~2012HTML5로 양 집단의 정의 현재 기업이 개발하는 브라우저크롬 &#x2F; 엣지 기업 외 브라우저파이어폭스 IOS자기의 길을 걷는다 런타임 플랫폼의 현재 HTML Import Shadow DOM Custom Elements Templates Post-mobile era모바일의 미래후진국형 모바일 시장 런타임 플랫폼적 요소 (미래)WebUSB &#x2F; WebBluetooth &#x2F; WebMIDINative ClientsWebGLWebAssemblyWebPaymentsStreamsRequestldleCallbackPassive event listenerResourceHintsImageBitmapMediaRecorderCSS Variable모두 크롬북을 만들다 만들어진 것이다 Web ComponentsHTML ImportShadow DOMCustom ElementTemplates 하지만 크롬에서만 지원을 해준다WebComponent.jspolyfill 지원Lite 버전도 있다. 우리는 구글신이 만든 걸 가져다 쓰기만 했다는 것을 강조 Polymer library HTML5 Component Library Web component 기민함 재사용 가능 구글의 모든 부분에 담겨있다 요약 Polyfill 브라우저가 안되는 부분을 도와준다 양방향 바인딩 템플릿 + 스타일 + Component 상속지원(정확하게 말하면 메서드 바인딩) 직관적인 구조 장점 올인원 솔루션 WebComponent.js에 공헌 Component-driven 크롬 부라우저에서는 네이티브 지원 단점 크고 무겁다 DOM Element 의존성 체크 오버헤드 불안정 (버전업으로 인한 Component 변화가 심하다) 관련 접근 Progressive Web App웹을 앱처럼NodeJS에서 Service Worker 오프라인 지원 PRPL 패턴초기에는 중요한 Component들만 푸시첫 루트를 그림 김종광 자투리 시간을 이용하여 VPN을 시도하였으나…. 실패 Ext JS Angular나 React와는 다르게 Web Component가 하나 더 있다. Grid가 강력하다 (다양한 적용 가능) 유행이 지난 기술은 분명하다! 하지만 유용한 부분이 아직 존재한다. 김동우 스타트업 시작비전공으로 시작한 개발자 누군가의 설득에 스타트업을 시작해버렸다..스타트업이 잘 되지 않았다 행운아처럼 보이는 뉴비 스타트업은 모바일앱 앱을 만들기 시작 네이티브 역량이 되지 않아 JS모바일 앱 만들기 시작 Titanium &amp; NodeJS &amp; ParseServer를 시작 3개월 만에 앱 제작 성공! (이름은 학원 어디가) Web 시작 &#x3D;&gt; React로 시작 JavaScript의 확장성 데스크탑 : 일렉트론 게임 : 유니티 IoT &amp; Robot : NodeBots101, Cylon.JS 잘 만들어졌다고 생각하는 하이브리드 앱 질의응답시간출처 : 자바스크립트 개발자 포럼 React 네이티브로 IOS &amp; Android 빌드 및 확장성?&#x3D;&gt; 이종은: 웹이 React로 되어있다면 무조건 React 네이티브가 좋다. React 개발자가 있다면 더 좋다.&#x3D;&gt; 게스트충분히 상관없다. 속도도 괜찮다. 하지만 네이티브 코드가 늘어난다면 React 네이티브를 사용할 이유가 없다. 동적인 기능이나 Page가 많아지면 퍼포먼스가 어떤지 JS코드에 무리가 갈 것 같다.&#x3D;&gt; 게스트: 페이지가 70개고 D3를 사용했지만 성능적인 이슈를 겪은 적이 없다.&#x3D;&gt; 이종은React는 가상DOM에서 바뀐 부분만 변하기 때문에 크게 걱정할 필요는 없다. React 네이티브 팀원 구성이 어떤지 (이종은)&#x3D;&gt; JS와 ES6를 알면 React를 배울 때 어려운 점이 없다. 구조도 쉬우며 만드는 데 어려움을 느끼지 못했다. 모든 걸 자바스크립트로 할 때 김동우님이 뉴비와 단둘히 개발하면서 어떻게 관리해야 할지&#x3D;&gt; 뉴비는 Java 국비지원에 안드로이드 조금 배운 수준으로 JS 활용하여 아주 작은 TodoList 만들 수 있는 수준이었다.하지만 서로의 위치를 알려주는 어플을 타이타늄을 활용하여 스터디 차원에서 만들어보았다.개인 스터디 2주 시간 부여 &#x2F; 코드 기여 50%결론적으로 뉴비도 할 수 있지만 IOS &amp; Android에 대한 러닝커브가 심하다 React 네이티브의 JSX 문법을 포기하고 AngularJS를 해왔기때문에 Angular2를 해보려는 데 괜찮은 게 생각하는지 확인받고 싶다&#x3D;&gt; 게스트: 장단점 명확하다! Angulr는 코드가 잘 분리되어 있다(로직자체가 백엔드 개발자가 접하기 좋다)하지만 React는 그렇지 않다. 뷰에 초점을 둔다면 React &lt;&#x3D;&gt; 로직이 중요하다면 Angular&#x3D;&gt; 게스트2: JSX가 싫은 개발자들이 Angular로 넘어가는 데 Polymer를 보고 JSX도 중요하다 생각한다 꾹 참고 써보자&#x3D;&gt; 이종은Angular 경험은 없지만 Backbone 경험은 있다. 결국 의식의 흐름에 대한 차이라고 생각한다.Backbone은 데이터를 고민하며 React는 화면에 어떻게 뿌리는 지가 생각한다.이렇게 단순하게 생각하니 생각하기 좋다. JS 개발자분들 중 테스트 코드 작성하시는 분이 얼마나 되는지 궁금하다&#x3D;&gt; 1 &#x2F; 10 정도였다. React의 UI 테스트는 어떻게 하나&#x3D;&gt; 이종은: NodeJS에서 서버사이드 렌더링 후 비교해주는 테스트를 본 적이 있다.UI 테스트는 명확하지가 않으며 너무나 변수가 많다.&#x3D;&gt; 게스트: Jest라는 것이 있다고 들었다.&#x3D;&gt; 게스트2UI 단은 Component Level에서만 할 수 있는 것 같다. E2E는 힘들 것 같다.테스트 코드 작성 시간이 굉장히 오래 걸린다. 하지만 그 테스트 코드로 데모를 하기는 굉장히 좋다. React로 개편을 준비 중인데 SEO서비스가 중요한 서비스이라 고민이 많다.&#x3D;&gt; 김동우검색엔진에 대한 고민을 많이 해봤지만 결론적으로 서버사이드 렌더링이 중요하다.검색엔진은 결국 String이다. 라이브러리 Helmet를 이용해서 세팅해놓으면 다 도와준다.구글은 화면까지 읽어주고 네이버는 Meta TAG까지 읽어주더라.Helmet만 이용하면 고민이 없다. React Router 3 to 4 넘어가면서 변화가 너무 많은 데 서버사이드 렌더링을 어떻게 하는 것이 좋은지&#x3D;&gt; 게스트: React Korea에 Tip을 올렸었는데 Redux를 사용해서 Ajax의 Promise를 담았다가Store에 넣은 다음에 렌더링에 전달해주는 방식을 사용했었다.&#x3D;&gt; 김동우Redux를 Connect를 사용하였다. 맛있었던 샌드위치 자바스크립트 개발자 포럼 (JSDev.KR)자바스크립트 개발자 포럼은 JS, Parse, React, Titanium 등 다양한 주제로 포럼을 운영하고 있습니다.자바스크립트에 관심 있는 개발자라면 누구나 참여 가능합니다.https://jsdev.kr React Korea (Facebook Group)React Korea는 국내외 React 소식과 팁을 공유할 뿐만 아니라 질의응답도 가능한 자유로운 공간입니다.https://www.facebook.com/groups/react.ko","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"react","slug":"react","permalink":"https://pocojang.github.io/tags/react/"},{"name":"김동우","slug":"김동우","permalink":"https://pocojang.github.io/tags/%EA%B9%80%EB%8F%99%EC%9A%B0/"},{"name":"김종광","slug":"김종광","permalink":"https://pocojang.github.io/tags/%EA%B9%80%EC%A2%85%EA%B4%91/"},{"name":"나는 자바스크립트 개발자다","slug":"나는-자바스크립트-개발자다","permalink":"https://pocojang.github.io/tags/%EB%82%98%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%8B%A4/"},{"name":"신정규","slug":"신정규","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%A0%95%EA%B7%9C/"},{"name":"이종은","slug":"이종은","permalink":"https://pocojang.github.io/tags/%EC%9D%B4%EC%A2%85%EC%9D%80/"},{"name":"자바스크립트 개발자 포럼","slug":"자바스크립트-개발자-포럼","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%ED%8F%AC%EB%9F%BC/"},{"name":"angular","slug":"angular","permalink":"https://pocojang.github.io/tags/angular/"},{"name":"JSDev.KR","slug":"JSDev-KR","permalink":"https://pocojang.github.io/tags/JSDev-KR/"},{"name":"React Korea","slug":"React-Korea","permalink":"https://pocojang.github.io/tags/React-Korea/"}]},{"title":"만약 헤밍웨이가 자바스크립트로 코딩한다면","slug":"2017-02-24-js-book","date":"2017-02-23T15:00:00.000Z","updated":"2023-02-12T14:14:44.052Z","comments":true,"path":"2017/02/24/2017-02-24-js-book/","link":"","permalink":"https://pocojang.github.io/2017/02/24/2017-02-24-js-book/","excerpt":"만약 헤밍웨이가 자바스크립트로 코딩한다면 피보나치, 팩토리얼, 행복수, 소수, 메서드 체인에 대한 문학 거장들의 기발한 해법 리뷰!","text":"만약 헤밍웨이가 자바스크립트로 코딩한다면 피보나치, 팩토리얼, 행복수, 소수, 메서드 체인에 대한 문학 거장들의 기발한 해법 리뷰! 책 정보출판사 : 한빛미디어저자 : 앵거스 크롤역자 : 김나솔출간 : 2016-11-14페이지 : 196ISBN : 9788968484742가격 : 19,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=11213895: http://www.hanbit.co.kr/store/books/look.php?p_code=B7118865707 후기프로그래밍이 화두인 만큼 그에 따라 굉장히 다양한 스타일의 서적이 늘어나고 있다. ex.Bible, Cookbook, 입문서부터 고급서, 개발 프로세스, 라이브러리 or 프레임워크 가이드 등등 이 책은 그중에서도 가장 눈에 띄지 않을까 싶다.그 이유로는 제목부터 표지 그리고 책 한 장 한 장 어느 하나 눈에 띄지 않는 곳이 없으며이런 튀는 요소 속에 다양한 문학 거장들을 JavaScript로 표현해내는 재미있는 책이다.기술적으로는 피보나치, 팩토리얼 등 기술적인 부분도 놓치지 않으려 한다. 이 책의 흐름은 이렇다. 작가의 프로필 작가의 작품 설명이나 성장배경 등 스토리 작가의 스타일에 맞춘 재미있는 코드 한결같은 흐름이지만 다양한 개성의 25명의 문학 작가들을 모두 담아냈고그에 따른 다양한 개성의 코드들을 볼 수 있다. 한 권의 책으로 다양한 코드 스타일을 맛보다보통의 개발 서적은 언어 또는 시대적인 권장 코딩 스타일 혹은작가의 스타일에 따라 책에 담겨있는 코드가 다르다.한마디로 한 권의 책에서 다양한 스타일의 코드를 본다는 것은 굉장히 드문 일이다. 이 책에서는 개성이 강한 다양한 작가들을 JavaScript 코드로 설명하려 하기 때문에다양한 JavsScript의 코드를 이 얇은 한 권의 책으로 맛볼 수 있다.뭐 이런 병맛같은 코드가 다 있지...생각이 들때도 있다. 또한 책 디자인부터 설명까지 세부적인 요소까지 따라주니 지루할 수 없이 술술 익힌다. 재미에 비하여 부족한 설명다양한 개성을 코드로 담으려다 보니 변수명조차 이해가기 힘든 코드가 많았다.(절대 쉬운 책은 아니다)챕터 별로 코드에 대한 설명이 부족하거나 또는 충분하거나 격차가 많이 있었기 때문이다.해당 챕터에 해당하는 작가의 작품에 대해 알거나 이해도가 있다면 재미가 더해지지 않을까 싶다 위에서 술술 읽힌다고 했지만 이것은 어디까지나 내용에 대한 이야기이고코드 같은 경우에는 JavaScript의 이해도가 있는 개발자들에게나 해당되는 이야기이다.아직 JavaScript 기초가 부족하신 분들에게는 힘들 수 가있다. 요약 장점 JavaScript의 다양한 코드들과 알고리즘을 부담 없이 재미있게 접할 수 있다. 보는 눈이 즐거울 정도로 책의 디자인이나 구성이 흥미롭다. 인문학적 요소 &amp; 알고리즘 기법 &amp; JavaScript 삼박자가 어우러진다 단점 가격이 저렴하지는 않다. 분량이 아쉽다. 타이핑을 하지 않고 훑어보면 1시간 내에 다 볼 수 있다. 이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"javascript","slug":"book/programming/javascript","permalink":"https://pocojang.github.io/categories/book/programming/javascript/"}],"tags":[{"name":"만약 헤밍웨이가 자바스크립트로 코딩한다면","slug":"만약-헤밍웨이가-자바스크립트로-코딩한다면","permalink":"https://pocojang.github.io/tags/%EB%A7%8C%EC%95%BD-%ED%97%A4%EB%B0%8D%EC%9B%A8%EC%9D%B4%EA%B0%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%BD%94%EB%94%A9%ED%95%9C%EB%8B%A4%EB%A9%B4/"},{"name":"javascript 인문학","slug":"javascript-인문학","permalink":"https://pocojang.github.io/tags/javascript-%EC%9D%B8%EB%AC%B8%ED%95%99/"},{"name":"알고리즘","slug":"알고리즘","permalink":"https://pocojang.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"}]},{"title":"인사이드 자바스크립트","slug":"2017-02-10-js-book","date":"2017-02-09T15:00:00.000Z","updated":"2023-02-12T14:14:44.052Z","comments":true,"path":"2017/02/10/2017-02-10-js-book/","link":"","permalink":"https://pocojang.github.io/2017/02/10/2017-02-10-js-book/","excerpt":"핵심 개념과 원리를 정확하게 jQuery Node.js 클로저의 개념까지! 리뷰!","text":"핵심 개념과 원리를 정확하게 jQuery Node.js 클로저의 개념까지! 리뷰! 책 정보출판사 : 한빛미디어역자 : 송형주, 고현준출간 : 2014-01-12페이지 : 284ISBN : 9788968480652가격 : 18,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=7400243 후기JavaScript 입문 도서로 자주 언급되지만 개인적으로는 절대 아니라고 생각한다.또한 JavaScript의 모든 부분을 설명하고 있는 책도 아니다.필자는 기초가 부족한 상태에서 읽어서 굉장히 어렵기도 했고결국 자신의 JavaScript 수준을 판단하고 부족한 점이 무엇인지 알 수 있는 책이었다.아마 소개를 굳이 할 필요 없이 필자가 느낀 책의 방향과 저자가 소개하는 책의 코멘트와정확히 일치하기 때문에 밑에 그대로 긁어왔다. 이 책의 목적은 자바스크립트의 핵심 원리, 언어적 특성을 정확하고 알기 쉽게 설명하는 것이다.물론 이 책이 자바스크립트의 모든 것을 다룬 바이블은 아니다.그러나 자바스크립트를 제대로 공부하고자 하는 개발자에게 여러 자바스크립트 응용 기술들을 소화할 수 있는기초 체력을 기를 수 있게 도와주는 좋은 가이드가 될 것이다.[인터넷 교보문고 제공] 알차고 또 알찬 굉장한 개념서이 책의 방식은 굉장히 일관적이기 때문에 때로는 지루하기까지 하다. 해당 개념 설명 예제 코드 제공 예제 코드 리뷰 예제 코드 그림으로 설명 개념 설명이 자세하며 학습에 도움이 되는 예제 코드가 많다.웬만하면 이 책의 예제를 모두 이해하고 넘어가는 것이 좋다고 생각한다(하지만 Legacy 코드도 많다)만약 이해가 되지 않는다면 이해하도록 노력하고 잘 이해되더라도꼭 예제 타이핑을 해보는 것이 좋다고 생각된다. 또한 이 책의 저자는 JavaScript의 모든 부분을 담지 않는 대신 어느 부분이정말 중요한지 잘 알고 그 개념과 예제들을 책에 가득 채워주었고 이해시켜주려 노력한다. JavaScript는 너무 빠르게 변하고 있다. &amp; NodeJS는 어디에?당장 이 책의 예제가 좋으니 타이핑하며 보라고 추천했지만 최신 코드는 아니다.현재 ECMAScript2015+가 나온지 오래된 상황인데 이 책은 ES3로 추정된다.아마 14년에 나온 책이라고 하지만 거의 13년도에 나왔다고 봐도 된다.약간은 아쉬운 부분이다. 또한 NodeJS에 대하여 배울 수 있다는 느낌을 주는 제목이지만NodeJS 내용은 거의 없다고 봐도 된다.jQuery를 원하는 독자도 jQuery 분량은 굉장히 적으니 기대하면 실망이 크다.(대신 jQuery에 대하여 깊게 파고들어 설명해주는 데 내용이 좋다) 요약 장점 JavaScript를 입문을 통해 기초적인 학습을 한 후 개념을 한번 다시 돌아보기 좋은 개념서 책의 분량이나 두께에 비해 내용이 알차고 부족함이 없어 휴대하며 읽기도 좋다. 깊게 파고들며 공부하는 스타일에 굉장히 알맞춤이다 깊게 들어가기 때문에 개념 확립에 도움이 된다 단점 입문서로 추천되지만 어렵다. 제목과는 다르게 NodeJS 내용이 거의 없다. 오래된 코드다. ES3","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"javascript","slug":"book/programming/javascript","permalink":"https://pocojang.github.io/categories/book/programming/javascript/"}],"tags":[{"name":"인사이드 자바스크립트","slug":"인사이드-자바스크립트","permalink":"https://pocojang.github.io/tags/%EC%9D%B8%EC%82%AC%EC%9D%B4%EB%93%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"}]},{"title":"W3C HTML5 대한민국 관심그룹 45차회의","slug":"2017-01-24-w3c-html5-45","date":"2017-01-23T15:00:00.000Z","updated":"2023-02-12T14:14:44.052Z","comments":true,"path":"2017/01/24/2017-01-24-w3c-html5-45/","link":"","permalink":"https://pocojang.github.io/2017/01/24/2017-01-24-w3c-html5-45/","excerpt":"HTML5 대한민국 관심그룹 45차회의 React와 Meteor 활용 관람기","text":"HTML5 대한민국 관심그룹 45차회의 React와 Meteor 활용 관람기 React 기반 앱 개발 방법 (김대성님) Meteor.js + Cordova, 하이브리드 앱 개발 (Meteor.js Startup 진정원 CTO) React 기반 앱 개발 방법 (김대성님)야후 -&gt; 삼성 -&gt; React 공부를 하고 있다. React 프레임워크 X -&gt; View를 위한 JavaScript 라이브러리(MVC의 V는 아님) 하지만 View를 제외한 나머지 영역은 개발자의 몫 Flux &#x2F; Redux &#x2F; RxJS &#x2F; GraphQL &#x2F; Relay &#x2F; Apollo과 연동MVVM에서 View Layer만 담당한다 Component View를 표시하고 조작하는 JavaScript Class JSX를 활용한다 -&gt; Babel을 통해 변한된다 - 단일 Root노드, 계층구조 Component Lifecycle초기화 -&gt; 상태 변경 -&gt; Unmount Props Component 초기설정 Readonly : 계층을 생성한다 defaultValue 정의가능 : propsTyes를 통해 Interface 대체가능 변수에 할당하거나 다른 Component에서 사용가능 State 동적인 Components 상태를 객체로 정의ex) this.state React의 데이터를 관리한다. 만들기 Static View 구현 계층구조확인 자식 Component에 제공할 props정의 render() 완성 완성된 view확인 Component계층 구조 검증 View Update 구현 Unit 테스트 확인 요약 디자인부터 분석할 필요가 있다. 정적인 마크업파일과 CSS준비 정적인 React Component 준비 Props &amp; State 결정 Component 계층화 Meteor.js + Cordova, 하이브리드 앱 개발 (Meteor.js Startup 진정원 CTO) **Meteor.js 플랫폼 개발환경 소개 ** Meteor는 쉽게 접근하여 배울 수 있다. Meteor는 Angular &amp; Ionic과 연동하여 사용할 수 있다. 프레임워크는 아니다 전 영역에서 JavsScript 단 한가지 언어만 사용한다. NodeJS &amp; MongoDB &amp; BSON &amp; Cordova 사용 Meteor + Ionic &#x3D; meteoric 장점 DDP와 웹소켓을 사용하여 리프레시가 빠르다 리액티브를 기반으로 동기화하여 DB의 변화를 감지한다 단점 한글 자료와 문서가 거의 없다. 리액티브 남발시 리소스 낭비가 너무 심하다. 업데이트가 빠르다 (장점이기도 하다) 하이브리드 프레임워크란Ionic &#x2F; Framework7Mobile AngularUI &#x2F; OnsenUI Sent Touch &#x2F; Famo.usDUNAMIS &#x2F; Antena -&gt; XML 사장되었다 (변화대응 실패 &#x2F; 자유롭지 않다)Cordova 하이브리드 장점 한가지로 여러가지 플랫폼 Configuration Less Server Framework -&gt; 설정이 없다. 하이브리드 단점 네이티브의 기능을 모두 수용하려면 굉장히 힘들다 Limited Component &#x2F; Functionality -&gt; 제한된 컴포넌트와 제한된 기능(특히 안드로이드는 다양한 제조사로 인하여 애로상황이 많다) Data Binding (클라이언트 &amp; 서버에서 추적관리가 가능하다) 흔하게 쓰지 않는 기능들은 Bug가 많다.","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"hybrid framework","slug":"hybrid-framework","permalink":"https://pocojang.github.io/tags/hybrid-framework/"},{"name":"meteor","slug":"meteor","permalink":"https://pocojang.github.io/tags/meteor/"},{"name":"react","slug":"react","permalink":"https://pocojang.github.io/tags/react/"},{"name":"W3C HTML5","slug":"W3C-HTML5","permalink":"https://pocojang.github.io/tags/W3C-HTML5/"},{"name":"W3C HTML5 대한민국","slug":"W3C-HTML5-대한민국","permalink":"https://pocojang.github.io/tags/W3C-HTML5-%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD/"},{"name":"W3C HTML5 대한민국 관심그룹 45차회의","slug":"W3C-HTML5-대한민국-관심그룹-45차회의","permalink":"https://pocojang.github.io/tags/W3C-HTML5-%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD-%EA%B4%80%EC%8B%AC%EA%B7%B8%EB%A3%B9-45%EC%B0%A8%ED%9A%8C%EC%9D%98/"}]},{"title":"누구나 쉽게 배우는 자바스크립트","slug":"2017-01-20-js-book","date":"2017-01-19T15:00:00.000Z","updated":"2023-02-12T14:14:44.052Z","comments":true,"path":"2017/01/20/2017-01-20-js-book/","link":"","permalink":"https://pocojang.github.io/2017/01/20/2017-01-20-js-book/","excerpt":"놀면서 배우는 프로그래밍! 누구나 쉽게 배우는 자바스크립트 리뷰!","text":"놀면서 배우는 프로그래밍! 누구나 쉽게 배우는 자바스크립트 리뷰! 책 정보출판사 : 비제이퍼블릭저자 : 닉 모건역자 : 김태곤, 이미령출간 : 2015-09-16페이지 : 320 쪽ISBN : 9791186697030가격 : 28,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=9530957 후기JavasScript 입문서 그 자체이지만 부담 없는 책이라고 설명할 수 있다.일단 추천할 수 있는 부분은 이 책의 역자가 김태곤 님과 이미령 님이라는 것이며특히 독자의 이해를 위해 변수명과 코드에도 한글이 많다는 점이 특이했다.100% 풀 컬러책이면서 다양한 그림으로 이해를 돕기 때문에 흥미 유발과 동기부여 효과가 있다.(해외 원판은 Kids용 책이라는 데 어린아이가 보기에는 어려울 것 같다.) 프로그래밍! 개발!을 완전히 처음 접하는 책으로는 최고의 입문서이 책에는 JavsScript가 주인공이지만 HTML &amp; CSS &amp; jQuery를 살짝 맛보게 한 후간단한 동작의 시각적인 예제를 할 수 있도록 유도한다.그뿐만 아니라 앞서 설명했듯이 책 자체에 굉장히 이해 요소가 필요하지 않을 정도로 쉬운 컨텐츠를 가득하게 채웠다.뿐만 아니라 객체와 함수 등 개념이 중요한 부분을 대충 넘어가지 않았다. 그리고 앞서 언급했듯이 100% 풀컬러이며 재미있는 예제도 많이 존재한다.특히 시각적인 예제가 대부분이기때문에 재미와 흥미 유발에는 학습효과가 확실하다 입문서로는 좋으나 이 한권으로?그렇다. 이 책으로 개발에 입문한다면 정말 산뜻하고 쉽게 시작할 수 있을 것이다.하지만 분량에 비하여 가격은 착하지 않다.거기다가 간단하게라도 서비스적인 요소의 예제가 없다보니그런 부분을 기대한 독자들에게는 부족할 수밖에 없다. 확실히 해외에서는 Kids용으로 존재하는 책이기때문에 같은 입문자(또는 초보자)여도 호불호가 갈릴 수 있다. 요약 장점 개발에 입문해보고 싶지만 부담감과 어려움에 시작을 못하는 입문자에게 흥미 유발을 시킬 수 있다. 100% 풀컬러에 한글을 활용하는 코드가 많기 때문에 거부감이 없다. UI 및 캔버스를 활용한 예제가 많아 동기부여가 된다. 단점 Kids용으로 나온 책이기 때문에 책의 구성이 낯설고 포지션이 애매하게 느껴진다. 서비스적인 요소의 예제는 존재하지 않는다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"javascript","slug":"book/programming/javascript","permalink":"https://pocojang.github.io/categories/book/programming/javascript/"}],"tags":[{"name":"누구나 쉽게 배우는 자바스크립트","slug":"누구나-쉽게-배우는-자바스크립트","permalink":"https://pocojang.github.io/tags/%EB%88%84%EA%B5%AC%EB%82%98-%EC%89%BD%EA%B2%8C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"},{"name":"자바스크립트 입문 책","slug":"자바스크립트-입문-책","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%85%EB%AC%B8-%EC%B1%85/"},{"name":"javascript 입문","slug":"javascript-입문","permalink":"https://pocojang.github.io/tags/javascript-%EC%9E%85%EB%AC%B8/"},{"name":"Javascript for kids","slug":"Javascript-for-kids","permalink":"https://pocojang.github.io/tags/Javascript-for-kids/"}]},{"title":"GDG DEVFEST 2016 @Seoul Univ GCP","slug":"2016-11-05-gdg-devfest-seoul-2016","date":"2016-11-04T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/11/05/2016-11-05-gdg-devfest-seoul-2016/","link":"","permalink":"https://pocojang.github.io/2016/11/05/2016-11-05-gdg-devfest-seoul-2016/","excerpt":"GDG DEVFEST 2016 관람 후기!!","text":"GDG DEVFEST 2016 관람 후기!! 행사정보 행사장 방문 Boot Camp : 초보개발자들을 위한 웹 프론트엔드 개발 101 #0 Boot Camp : 초보개발자들을 위한 웹 프론트엔드 개발 101 #1 Boot Camp : 초보개발자들을 위한 웹 프론트엔드 개발 101 #2 행사정보Boot Camp: 초보개발자들을 위한 웹 프론트엔드 개발 101Angular2 어디까지 왔을까Firebase특히 인기가 많았던 걸로 기억이난다. 행사장 방문자리가 없던 세션.. Boot Camp : 초보개발자들을 위한 웹 프론트엔드 개발 101 #0사실 이전에 진행이 된 ServiceWorker도 보긴 했지만뒤늦게 참석하게 하는 바람에 후기를 쓸 정도의 참가를 못해서 쓸 수가 없게 되었다. 일단 굳이 이런 좋은 발표자료가 있는 데 작성하기보다는발표해주신 개발자분들의 발표자료를 삽입하고 현장에서 중요하다고 생각했던부분만 요약 정리하게되었다 프로필https://festi.kr/festi/speaker/cwdoh 초보 개발자를 위한 웹 프론트엔드 개발 101 from Chang W. Doh 아무래도 이전 WorkShop에서 이미 ServiceWoker부분 발표를 1시간정도 하셔서간단하게 하고 그 후에 더 좋은 개발자분들의 발표가 있다고 강조했다. 버전관리에 관하여GitHub에 있는 오픈소스로 HTML5사이트 번역한 적이 있다고 했다.장점으로는 한국어로 번역을 해도 외국인이 한국어를 모르기때문에제대로 된 피드백을 하지 못한다는 유머가 포인트였다.HTML5 ROCKS: https://www.html5rocks.com/ko 개인적인 생각이지만 Git을 하지 않는 곳은 가지 않는 것이 좋다. Boilerplate &#x3D;&gt; 굉장히 잘 쓰이는 단어다. 꼭 기억합시다 W3School은 좋지 않다제발 지양하자. 굉장히 오래된 곳이며 관리와 업데이트가 부실하여오류를 범하는 부분에 상당히 많다.W3Fools라는 안티 사이트가 있을 정도이다. 대체 공부방법 MDN Web Fundamentals (단. 구글느낌이 강하다) W3C 규격문서를 자주 읽자 (http://techhtml.github.io) webplatform.org (관심있는 토픽만 봐도 큰 도움이 된다) Magic googling: site:스택오버플로 &#x3D;&gt; 필터를 걸어서 검색하자 caniuse.com (브라우저 호환여부를 체크할 수 있다) 개발 프로세스기술 블로그를 운영하는 사이트를 참조하자&#x3D;&gt; 이런 회사에 들어가자 본인의 기술 발전을 위해서 최선의 선택이다 라이브러리라이브러리를 사용할때는 이해를 하고 쓰는 것이 좋다예를 들면 http:&#x2F;&#x2F; 와 https:&#x2F;&#x2F; 의 단순한 차이도 알고 있자 Boot Camp : 초보개발자들을 위한 웹 프론트엔드 개발 101 #1 프로필https://festi.kr/festi/speaker/choeun 한줄 요약 잊지 말자 모든 문서는 html을 권장한다 항상 index.html을 기본적으로 챙기자 HTML 문서 구조를 이해하자 HTML은 점점 진화한다. User-scalable을 막지 않는 것이 좋다. (항상 클라이언트를 생각하자) Grouping과 Sections의 차이를 이해하자 Table Layout은 지양하자 Block요소는 3줄로 시작한다 기본 font지원 굵기가 있는 데 이를 무시하고 설정하지 말자. Generic-font를 써야 다양한 OS 및 브라우저를 지원할 수 있다. 학습추천 css-tricks.comCSS 가이드 및 예제 AlistapartCSS 개발 패러다임 MDN Boot Camp : 초보개발자들을 위한 웹 프론트엔드 개발 101 #2 프로필https://festi.kr/festi/speaker/kjy2143 백엔드 출신이라고 한다.프론트엔드 이직상담 요청을 많이 받는 다고 하시는 데주로 이직하지 말라고 답변하신다는…:scream::scream: Hitchhiker&#x27;s guide to the front end development from 정윤 김 프론트엔드개발자들이 하는 일들 과거하던 일HTML + CSS + Javascript + jQuery ? 2016 CSS 확장 Task Runners JavaScript dependency 관리 이미지 압축 로딩 최적화 테스팅 자동화 기술 &amp; 경험 &amp; 운영까지 아주 좋은 강연이었다. 너무나 혼잡스러웠다 스티커 득템 잠옷 득템 그나마 무난해서 다행…","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"김정윤","slug":"김정윤","permalink":"https://pocojang.github.io/tags/%EA%B9%80%EC%A0%95%EC%9C%A4/"},{"name":"도창욱","slug":"도창욱","permalink":"https://pocojang.github.io/tags/%EB%8F%84%EC%B0%BD%EC%9A%B1/"},{"name":"조은","slug":"조은","permalink":"https://pocojang.github.io/tags/%EC%A1%B0%EC%9D%80/"},{"name":"초보개발자들을 위한 웹 프론트엔드 개발 101","slug":"초보개발자들을-위한-웹-프론트엔드-개발-101","permalink":"https://pocojang.github.io/tags/%EC%B4%88%EB%B3%B4%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C-101/"},{"name":"devfest2016","slug":"devfest2016","permalink":"https://pocojang.github.io/tags/devfest2016/"},{"name":"gdg","slug":"gdg","permalink":"https://pocojang.github.io/tags/gdg/"},{"name":"GDG DevFest Seoul 2016","slug":"GDG-DevFest-Seoul-2016","permalink":"https://pocojang.github.io/tags/GDG-DevFest-Seoul-2016/"},{"name":"gdgkr","slug":"gdgkr","permalink":"https://pocojang.github.io/tags/gdgkr/"}]},{"title":"난 정말 JAVA를 공부한 적이 없다구요","slug":"2016-09-17-java-book","date":"2016-09-16T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/09/17/2016-09-17-java-book/","link":"","permalink":"https://pocojang.github.io/2016/09/17/2016-09-17-java-book/","excerpt":"난 정말 JAVA를 공부한 적이 없다구요 리뷰!","text":"난 정말 JAVA를 공부한 적이 없다구요 리뷰! 책 정보출판사 : 오렌지미디어저자 : 윤성우출간 : 2009-08-12페이지 : 875 쪽ISBN : 9788996094029가격 : 28,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=6056781 후기Java 초보용으로 굉장히 많은 인기를 얻고 있는 책이다.일명 코딩 붐이 일어나면서 IT 관련 서적이 쏟아지고 있는 데특히 Java 기본서는 굉장히 많이 나오고 있어 그만큼 묻혀버리는 Java 기본서도 많다.이 책은 예전부터 지금까지 꽤나 오랜 기간 인기를 끌고 있는 데수많은 Java 기본서 중 거의 부동의 1위를 다투는 책이다.제목은 왜 이리 특이한지 표지도 좀 오래되어 보이고…. 뭐 결론은 내용이 꽤나 좋다.875페이지에 달하는 꽤나 두꺼운 책이지만 가격은 뭐 적당한 정가 28,000원이다.또한 http://www.orentec.co.kr에서 회원가입만 하면 저자의 동영상 강의를볼 수 있으니 책이 없어도 내용이 궁금하신 분들은 참고해도 좋을 것 같다. 자바의 정석과 비교하는 분들이 많은 데 자바의 정석은 딱딱하고 정적인 느낌이라면 이 책은 이해에 노력을 기울인다. 유기적인 내용과 핵심을 잘 알고있는 기본서개인적인 생각일 수 있지만 내용의 흐름이 꽤나 잘 연결된다는 느낌을 받을 수 있었다.또한 다른 책에 비하여 중요한 부분은 항상 중요하게 다루고 넘어간다.말 그대로 기본서로 있을 건 다 있기 때문에 개념을 잡고 이해하는 데 굉장히 좋다. 네트워크가 왜 없을까..이상하다. 한창 Java로 채팅 만들기 공부를 할 때 책을 뒤적였는데정말 없는 것이다. 대신 Swing이 들어가 있다……이 책의 출시연도는 2009년도이기때문에 개정판이 나와야 해결될까 싶다.물론 네트워크가 필요 없는 분들도 있겠지만 Java 기본서에서 네트워크 부분을 익히지 않고JSP &amp; Servlet으로 넘어간다면 초반에 이해도가 떨어지지 않을까 싶다. 요약 장점 설명이 굉장히 좋기 때문에 이해에 도움이 되었다. 개념을 놓치지 않으려고 노력한 흔적이 돋보인다(예를 들면 OOP 부분) 분량이 굉장히 많다 공부하기에 굉장히 좋은 양을 가지고 있다. 단점 네트워크 &amp; 통신을 전혀 다루지 않는다는 부분이 굉장히 치명적이다. 출간일이 오래되었다. 물론 학습에는 전혀 지장이 없지만 곧 개정판이 나오지 않을까 싶다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"java","slug":"book/programming/java","permalink":"https://pocojang.github.io/categories/book/programming/java/"}],"tags":[{"name":"자바 입문 서적","slug":"자바-입문-서적","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8-%EC%84%9C%EC%A0%81/"},{"name":"자바 입문용","slug":"자바-입문용","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8%EC%9A%A9/"},{"name":"자바 초보 책","slug":"자바-초보-책","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%B4%88%EB%B3%B4-%EC%B1%85/"},{"name":"난 정말 JAVA를 공부한 적이 없다구요","slug":"난-정말-JAVA를-공부한-적이-없다구요","permalink":"https://pocojang.github.io/tags/%EB%82%9C-%EC%A0%95%EB%A7%90-JAVA%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%9C-%EC%A0%81%EC%9D%B4-%EC%97%86%EB%8B%A4%EA%B5%AC%EC%9A%94/"}]},{"title":"기초 튼튼 코드 튼튼 다 함께 프로그래밍","slug":"2016-08-28-basic-programming","date":"2016-08-27T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/08/28/2016-08-28-basic-programming/","link":"","permalink":"https://pocojang.github.io/2016/08/28/2016-08-28-basic-programming/","excerpt":"기초 튼튼 코드 튼튼 다 함께 프로그래밍 프로그래밍을 시작하는 이들을 위한 쉽고도 친절한 안내서! 리뷰!","text":"기초 튼튼 코드 튼튼 다 함께 프로그래밍 프로그래밍을 시작하는 이들을 위한 쉽고도 친절한 안내서! 리뷰! 책 정보출판사 : 제이펍저자 : 타니지리 카오리역자 : 정인식출간 : 2016-05-12페이지 : 296 쪽ISBN : 9791185890494가격 : 22,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=10558941 후기하드웨어의 동작원리부터 설명을 하더니 차근차근 뜯어서 모두 설명해준다.프로그래밍 언어가 하드웨어부터 소프트웨어로 그리고 프로그램으로 실행되기까지모든 과정을 차근차근 물 흐르듯이 풀어나간다. 확실히 입문자에 맞춘 설명이다.물론 개발 공부하는 학생들이나 초보 개발자들조차도 도움 될만한 유익한 책이다 하드웨어부터 프로그램까지이 책은 분명히 읽는 것보다 이해하는 것이 더 중요한 책이다.이해만 된다면 두껍지 않은 책이지만 하드웨어부터 시작하여프로그램이 실행되기까지 복잡하고 긴 흐름을 더욱더 쉽게 파악할 수 있다.거기다가 프로그래밍 언어에 대한 기초 설명과 그 이상의 것까지 살펴볼 수 있다. 비전공자에게는 최고의 선물 전공자에게는 최고의 복습비전공자에게는 기본에 깔려있는 베이스나 이해도에 따라 책의 난이도가 천차만별로 느껴질 수 있다.때문에 비전공자이거나 기본적인 컴퓨터 사이언스에 대한 이해도가 부족하다면 이 책을 꼭 곱씹어서 보는 걸 추천한다.힘들다면 빠르게 훑어보면서 2~3회 읽어보는 방법도 좋을 것 같다.만약 기본적인 지식이 있는 전공자라면 빠르게 훑어보고좋은 개발자가 되기 위한 소양에 대한 내용을 소화해보는 것도 좋을듯하다 요약 장점 책의 내용 자체가 굉장히 알차다. 목차만 봐도 알 수 있다. 이해를 위한 예시가 굉장히 많고 도움이 된다. 실제 개발자로 일하면서 느낄 수 있는 부분에 대한 소양도 포함되어있다. 좋은 내용만 있는 게 아니라 좋은 개발자가 되기 위한 방법을 유도한다. 단점 책의 분량이 살짝 아쉽다. 책을 읽고 나서의 로드맵을 제시해준다면 좋았을 것 같다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"}],"tags":[{"name":"개발 입문 서적","slug":"개발-입문-서적","permalink":"https://pocojang.github.io/tags/%EA%B0%9C%EB%B0%9C-%EC%9E%85%EB%AC%B8-%EC%84%9C%EC%A0%81/"},{"name":"기초 튼튼 코드 튼튼 다 함께 프로그래밍","slug":"기초-튼튼-코드-튼튼-다-함께-프로그래밍","permalink":"https://pocojang.github.io/tags/%EA%B8%B0%EC%B4%88-%ED%8A%BC%ED%8A%BC-%EC%BD%94%EB%93%9C-%ED%8A%BC%ED%8A%BC-%EB%8B%A4-%ED%95%A8%EA%BB%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"}]},{"title":"프로그래밍 시작하기 by kenu","slug":"2016-08-21-dev-start","date":"2016-08-20T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/08/21/2016-08-21-dev-start/","link":"","permalink":"https://pocojang.github.io/2016/08/21/2016-08-21-dev-start/","excerpt":"Okky 대표 허광남님의 행복한 프로그래머 지향하기","text":"Okky 대표 허광남님의 행복한 프로그래머 지향하기 주제Hello World?프로그램의 핵심논리적으로 생각하기컴퓨터와의 대화생각대로 안될 때,좋은 프로그래밍 습관 okky.kr (오키) 의 대표 Kenu (허광남) 님이다.http://afreeca.com/kenuheohttp://bit.ly/okdevtv 주요 포커스프로그래머가 무엇인지 (일반인을 기준으로 설명)프로그래밍을 시작하기 프로그래머란?주로 일반인이 프로그래머를 어떻게 생각하는지에 대한 환상과편견들을 디테일한 이야기프로그래밍 언어의 흐름이나 역사 그리고 언어를 만든 개발자분들에 대한 설명그리고 SI는 가지 않는 게 좋다며 SI에 대해서도 상세한 설명과마지막으로는 커뮤니티 사이트들을 공유해줬다. 기억에 남는 것은 최초의 프로그래머가 여자였다는 것프로그래머 아내가 알아야 할 97가지https://okky.kr/article/168440 프로그래밍 시작하기Hello World를 왜! 처음 쓰게 되는건지?&#x3D;&gt; C언어 챕터 1 예제라고 한다. 프로그래밍의 핵심과 패턴 그리고 로직을 파악하는 것이 중요하다.논리적으로 생각해야 한다.컴퓨터와 대화하는 것이다.좋은 프로그래밍 습관을 가지자버전 관리 시스템을 꼭 사용하자함께 만들자 마무리 기대가 컸던 건지 아쉬움이 남는 세미나였다. 부족한 내용과 늦으신 kenu님…인상 깊었던 건 백발의 노인분도 세미나를 보러 오셔서 동기부여는 되었다.생활코딩 오프강의때도 중년층분들이 눈에 띄게 많았는데어떻게 알고 오셨는지 참 신기하다. 배워야 할 부분은 젊은 우리들보다이런 분들이 더 적극적이라는 것이다. p.s kenu님이 이벤트로 책을 배송해주신다고 집주소 적어가시고이메일로도 이야기했는 데 책을 안보내주신다..","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"프로그래밍 시작하기","slug":"프로그래밍-시작하기","permalink":"https://pocojang.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"},{"name":"허광남","slug":"허광남","permalink":"https://pocojang.github.io/tags/%ED%97%88%EA%B4%91%EB%82%A8/"},{"name":"kenu","slug":"kenu","permalink":"https://pocojang.github.io/tags/kenu/"},{"name":"okky","slug":"okky","permalink":"https://pocojang.github.io/tags/okky/"}]},{"title":"그림으로 배우는 Java Programming Basic","slug":"2016-08-20-java-book","date":"2016-08-19T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/08/20/2016-08-20-java-book/","link":"","permalink":"https://pocojang.github.io/2016/08/20/2016-08-20-java-book/","excerpt":"그림으로 배우는 Java Programming 재미있게 배워보는 Java 언어 기초의 모든 것 리뷰!","text":"그림으로 배우는 Java Programming 재미있게 배워보는 Java 언어 기초의 모든 것 리뷰! 책 정보출판사 : 영진닷컴저자 : Mana Takahashi역자 : 서재원출간 : 2015-04-30페이지 : 551 쪽ISBN : 9788931448283가격 : 18,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=8995099 후기그림으로 배우는 시리즈는 워낙 다양하게 준비가 되어있다.물론 굉장한 베스트 시리즈는 아니지만 기본은 하는 시리즈는 아닐까 생각이 든다.일단 번역서이지만 그렇게 거슬리거나 번역이나 신경 쓰이는 오탈자는 딱히기억에 나지 않는다. Mana Takahashi라는 일본의 저자가 쓴 책이며페이지 수는 551페이지이지만 본문의 글씨들이 큰 편이고 책도 굉장히 작다.또한 그림이 많아 술술 넘어갈 수 있으니 페이지의 압박은 없을 수 있다. 입문 || 초보용으로는 최고!물론 이 책은 꾸준히 다 보거나 몇 회 이상 정독한 것은 아니다.하지만 다양한 그림으로 거부감 없이 접근할 수 있었으며 확실히 그림의 영향으로 이해에 도움을 주었다.글씨도 굉장히 크고 책도 작아서 부담을 느낄 수 없다.특히 입문 시기에는 막상 독학을 시작하려고 산 책에 시련을 겪는 경우가 많은 데가볍게 시작할 수 있는 자신감을 기를 수 있다. 모자란 깊이입문 또는 초보용으로는 굉장히 뛰어난 반면에 하나하나 내용의 깊이나 설명.전체적인 Java에 대한 깊이는 떨어진다.나는 Java를 무조건 한 권으로 마무리해버리겠다.하시는 분들에게는 어울리지 않고 더욱더 나아간 공부는 인터넷을 통하여습득을 하던가 해야 한다. 요약 장점 그림이 많다. 그림이 많기 때문에 학습에 도움이 된다. 단점일 수도 있지만 챕터별로 다루는 내용이 굉장히 간략하다. 단점 책의 크기는 작은 데 두께가 두꺼우니 불편하다. Java 공부를 하기에는 범위가 좁다. 추가적인 학습이 필요하다 그림이 많아 좋긴 한데 이해에 도움이 되지 않는 그림들도 많다","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"java","slug":"book/programming/java","permalink":"https://pocojang.github.io/categories/book/programming/java/"}],"tags":[{"name":"자바 입문 서적","slug":"자바-입문-서적","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8-%EC%84%9C%EC%A0%81/"},{"name":"자바 입문용","slug":"자바-입문용","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8%EC%9A%A9/"},{"name":"자바 초보 책","slug":"자바-초보-책","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%B4%88%EB%B3%B4-%EC%B1%85/"},{"name":"그림으로 배우는 Java Programming Basic","slug":"그림으로-배우는-Java-Programming-Basic","permalink":"https://pocojang.github.io/tags/%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-Java-Programming-Basic/"}]},{"title":"미친 집중력","slug":"2016-07-21-concentration-crazy","date":"2016-07-20T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/07/21/2016-07-21-concentration-crazy/","link":"","permalink":"https://pocojang.github.io/2016/07/21/2016-07-21-concentration-crazy/","excerpt":"합격을 부르는 공부법! 습관의 재발견 리뷰!","text":"합격을 부르는 공부법! 습관의 재발견 리뷰! 책 정보출판사 : 매경출판원제 : 合格判定0%から1年で東大醫學部に合格した人の秘密の勉强法 圖解 勉强もビジネスも,長く樂しめる仕組みを作저자 : 이와나미 구니아키역자 : 김지영출간 : 2016-02-10페이지 : 184ISBN : 9791155423974가격 : 12,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=10168099 후기공부가 너무 안될 때 읽으려고 구매한 책이다.저자는 일본인이지만 번역은 문제가 없으며 내용은 대학 합격률이 20%도 안되는 최하위 등급 판정을 받고충격을 먹어 독학으로 공부를 한 후에 1년 만에 명문 의대에 합격했다고 한다. 당신이 ‘정리정돈파’라면 책상 위를 깔끔하게 정돈하고,‘카오스파’라고 한다면 참고서나 볼펜 등을 의도적으로 정리되지 않은 상태에서 공부하도록 합시다. ‘5초만 해보자’하는 가벼운 마음으로 시작해보면 의외로 계속 할 수 있겠다는 기분이 들어 10분, 30분 등 많은 공부 시간을 &gt;꽤 확보할 수 있게 됩니다. 이를 토대로 어떻게 공부했는지 저자가 실제 공부한 비법집중력을 위한 실천 항목 40가지가 있으며 실천에 대한 설명 + 실천 방법 + 그림으로 전체적인 구조가 재미있게 흘러간다.하지만 돈 주고 사기는 아깝고 중고책이나 대여하는 게 바람직할 것 같다. 이 책의 저자는 “미친 암기력” 이라는 책도 있는 데 대부분 평이 별차이가 없다는 의견이 다수이다. 요약 장점 전체적인 흐름과 구조 정리가 굉장히 깔끔하다. 실천항목 40가지 (설명 &#x3D;&gt; 방법 &#x3D;&gt; 그림) 이해하기 쉬웠다 단점 너무 적은 분량 미친 암기력라는 책과 별반 차이가 없다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"}],"tags":[{"name":"미친 집중력","slug":"미친-집중력","permalink":"https://pocojang.github.io/tags/%EB%AF%B8%EC%B9%9C-%EC%A7%91%EC%A4%91%EB%A0%A5/"},{"name":"집중력 책","slug":"집중력-책","permalink":"https://pocojang.github.io/tags/%EC%A7%91%EC%A4%91%EB%A0%A5-%EC%B1%85/"}]},{"title":"비전공자를 위한 자바 프로그래밍","slug":"2016-07-14-java-book","date":"2016-07-13T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/07/14/2016-07-14-java-book/","link":"","permalink":"https://pocojang.github.io/2016/07/14/2016-07-14-java-book/","excerpt":"영어 독해하듯 코드를 읽고 그림으로 쉽게 배우는 비전공자를 위한 자바 프로그래밍 리뷰!","text":"영어 독해하듯 코드를 읽고 그림으로 쉽게 배우는 비전공자를 위한 자바 프로그래밍 리뷰! 책 정보출판사 : 한빛미디어저자 : 강희은출간 : 2016-02-26페이지 : 228 쪽ISBN : 9788968488009가격 : 16,000원 자세한 정보: http://www.hanbit.co.kr/store/books/look.php?p_code=E9160460418 후기Java책만해도 4~5권을 보유하고 있지만 2회 이상 완독한 책은 이 책이 처음이다.이해력이나 사고력이 좋지않아 책이 술술 넘어가지 않았고 좀 더 쉬운 책이 없을까?생각하고 쉬운 책부터 찾다보니 이 책을 선택하게 되었다. 처음에는 200페이지가 조금 넘는 얇은 책인데 가격은 16,000원이니 뭔가 내키지 않았고결국 직접 가서 책을 보고 구매하게 되었다.참고로 저자분도 비전공자 출신이기도 하다. 감동받은 부분(사소하지만 모르고 넘어가는 코드들도 자세히 알 수 있다) 거기다가 출간일도 굉장히 최근이기 때문에 나에게는 딱일 수 밖에 없었다.단점으로는 신간이라 그런지 오탈자가 조금 있었고책 자체가 얇고 분량이 적은지라 자바의 모든 것을 다 넣을 수는 없다. 이 책만으로 자바를 습득하고자 하는 분들은 꼭 이다음 책이나 강의로 학습할 것을 권유한다.대신 얇은 두께로 두고두고 버스에서 읽기 좋을 것 같다.어떻게든 독자를 이해를 시키고자 노력한 흔적이 느껴지는 책이었다. 요약 장점 얇고 간결한 내용과 휴대성으로 이동하며 읽기 좋다. 굉장히 이해가 쉽게 나온 책이기 때문에 입문자들에게 좋다. 그림이 많다. 내용을 많이 차지하지만 이해에 도움이 된다. 사소한 디테일에 신경을 많이 쓴 티가 난다. 단점 적은 분량만큼 중요한 부분이 많이 빠졌다. (요약본 같은 느낌)&#x3D;&gt; 필히 그 다음 Java 공부에 대한 계획이 필요하다","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"java","slug":"book/programming/java","permalink":"https://pocojang.github.io/categories/book/programming/java/"}],"tags":[{"name":"비전공자를 위한 자바 프로그래밍","slug":"비전공자를-위한-자바-프로그래밍","permalink":"https://pocojang.github.io/tags/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9E%90%EB%B0%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"},{"name":"자바 입문 서적","slug":"자바-입문-서적","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8-%EC%84%9C%EC%A0%81/"},{"name":"자바 입문용","slug":"자바-입문용","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8%EC%9A%A9/"},{"name":"자바 초보 책","slug":"자바-초보-책","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%B4%88%EB%B3%B4-%EC%B1%85/"}]},{"title":"습관의 재발견","slug":"2016-06-27-rediscovery-habit","date":"2016-06-26T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/06/27/2016-06-27-rediscovery-habit/","link":"","permalink":"https://pocojang.github.io/2016/06/27/2016-06-27-rediscovery-habit/","excerpt":"기적같은 변화를 불러오는 작은 습관의 힘! 습관의 재발견 리뷰!","text":"기적같은 변화를 불러오는 작은 습관의 힘! 습관의 재발견 리뷰! 책 정보출판사 : 비즈니스북스원제 : Mini Habits저자 : 스티븐 기즈역자 : 구세희출간 : 2014-11-25페이지 : 240ISBN : 9788997575336가격 : 13,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=8366521 후기이 전에 읽은 지속하는 힘이라는 책과 유사하며 추구하는 내용도 비슷한 책이다.지속하는 힘에서는 저자가 1일 1블로그를 하면서 무엇이든 꾸준히 한다면그 자신감을 통해 성장하며 완성된 인간?이 될 수 있다는 뭐 이런 내용의 반복과 실천법이 나오던 책이다. 반면 이 책은 굉장히 비슷하지만 모든 목표를 굉장히 작고 사치스러울 정도로 쉬운 것으로 하라는 것거의 책의 마지막장까지 세뇌되다 싶이 반복적으로 나왔다. 한마디로 너무나 쉬워서 작심삼일로 가지 않는 그런 목표를 세우라는 것이다. 그렇게 실천하다 보면 어느새 큰 누적 효과와 즐거움으로 더 큰 목표를 가지게 되는 자신과 마주할 것이라는 내용이다. 저자는 하루에 팔굽혀펴기 단 1개로 시작을 통해 헬스를 하게 되었고결국 건강에 신경을 쓰게되면서 건강한 마인드 까지가지게 되어 발전했다는 내용이다. 또한 말하는 아프니까 청춘이다, 꿈꾸는 다락방 같은 자기개발서를 까는 내용도 굉장히 많다. 그냥 하면 된다는 동기만 심어주는 책은 볼 가치도 없다는 내용이다. 뭐 틀린 말은 아니다. 나 또한 매번 결심만 크게 하고 별로 한것도 없는 데 좌절하기만 했다.결국 나는 하루에 팔굽혀펴기 1~5개 하기 &amp; 일일 달력 넘기기를 목표로 하고 있다.이것은 시작일뿐이고 공부에 더 도움이 되는 습관으로 넘어갔으면 좋겠다. “너무나 쉬워서 포기하지 않을 정도로 쉬운 일부터 습관으로 만들어보자!&quot; 요약 의지력과 습관 그리고 동기부여를 가지는 구체적인 방향을 제시한다. 말도 안되는 꿈보다는 현실적이고 확실한 방법으로 독자를 설득한다. 지속하는 힘을 가지기 위한 저자의 실천과 결과가 보이는 책","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"}],"tags":[{"name":"가볍게 시작하기","slug":"가볍게-시작하기","permalink":"https://pocojang.github.io/tags/%EA%B0%80%EB%B3%8D%EA%B2%8C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"},{"name":"습관의 재발견","slug":"습관의-재발견","permalink":"https://pocojang.github.io/tags/%EC%8A%B5%EA%B4%80%EC%9D%98-%EC%9E%AC%EB%B0%9C%EA%B2%AC/"},{"name":"작은 습관의 힘","slug":"작은-습관의-힘","permalink":"https://pocojang.github.io/tags/%EC%9E%91%EC%9D%80-%EC%8A%B5%EA%B4%80%EC%9D%98-%ED%9E%98/"},{"name":"팔굽혀펴기 하루 한 번","slug":"팔굽혀펴기-하루-한-번","permalink":"https://pocojang.github.io/tags/%ED%8C%94%EA%B5%BD%ED%98%80%ED%8E%B4%EA%B8%B0-%ED%95%98%EB%A3%A8-%ED%95%9C-%EB%B2%88/"}]},{"title":"(9X년생 개발자 모임 특강 1) 게임 소프트웨어 개발자란 & 개발자의 9가지 기술","slug":"2016-06-24-9xd","date":"2016-06-23T15:00:00.000Z","updated":"2023-02-12T14:14:44.051Z","comments":true,"path":"2016/06/24/2016-06-24-9xd/","link":"","permalink":"https://pocojang.github.io/2016/06/24/2016-06-24-9xd/","excerpt":"9X년생 개발자 모임(9XD)의 비정기 특강, ‘XXD TO 9XD’의 첫 모임 특강 관람 후기","text":"9X년생 개발자 모임(9XD)의 비정기 특강, ‘XXD TO 9XD’의 첫 모임 특강 관람 후기 박종천 &#x2F; JC Park 강연경력 강연주제 소개 강연 박종천 &#x2F; JC Park한글과컴퓨터 개발팀장 6년미국 보스톤의 다수 벤쳐에서 개발실장 (Technical Director) 5년Blizzard 미국 얼바인 본사에서 수석개발자&#x2F;개발팀장 (Lead Software Engineer) 11년현재 넥슨 플랫폼본부 부본부장 (Vice President of Platform Technology)총 개발경력 22년 강연경력NDC 2011, KGC 2011, ICON 2011, 엔씨소프트, 연세대학교, 한국산업기술대학교NDC 2012, 다음커뮤니케이션NDC 2013, KGC 2013, NHN NextNDC 2015, 넥슨, 엔씨소프트, 엔트리브소프트, 네시삼십삼분스타트업얼라이언스, Microsoft Azure Conference, 서울예술대학교 강연주제성공하는 제품을 만들기 위한 팀 빌딩 &#x2F; How to build a team to ship a great product효율적인 팀 관리 &#x2F; Effective Team Management채용 프로세스 분석 &#x2F; Hiring Process좋은 품질을 위한 버그 관리 &#x2F; Bug Management효율적인 시간 관리&#x2F; Effective Time Management개발자가 갖추어야 할 9가지 기술 &#x2F; 9 Skills for Developers훌륭한 개발팀장이 되려면? &#x2F; Software Development Manager게임 개발자가 되려면? &#x2F; Game Software Engineer 9XD모임 관리자이신 진유림님인듯 보인다. 오늘의 강연자 : 박종천님 NEXON VP 주로 게임 개발에 대한 이야기였던 건 사실이라 게임보다는 중심적인 흐름에 대하여 많이 집중했다. 소개일단 경력은 위에 있으니 생략하고 한국의 개발 환경 증진을 위해 직접 돌아왔다고 하셨다.다른 대기업과의 컨택도 있었지만 밝힐 수 없는 부분들이 많아 Nexon으로 오게 되셨다고 한다. 어린 시절부터 개발을 접하신 것 같다. (이런 분들이 주로 천재형에 가까운 것 같아 부럽다)대학시절에는 노래방 프로그램도 만들어 판매한 경험이 있다고한다. 블리자드라고 해서 엄청 자유롭다고 생각하는 데 그곳도 문제가 존재하며 해외라고해서 자유로운 건 아니다.스타크래프트1 한글채팅 패치 &#x2F; WoW 패치작업 &#x2F; 하스스톤 개발 등을 주로 했다. 강연정말 좋은 이야기를 많이 해주셨다. 위트도 있고 유머있으셨는 데 중요한 얘기에서는 진지하게 조언해주셨다.또 두서없이 제대로 적지 못해서 일단 중요한 부분만 적어야겠다. 클라우드와 AWS 엄청난 전망이 있다.&#x3D;&gt; 앞으로는 클라우드를 아는 개발자와 모르는 개발자로 분류될 것이다. 자신이 하는 것만한다면 한계가 올 것이다.&#x3D;&gt; 꾸준히 공부하고 대비해야 한다 결국은 기초를 튼튼히 해야한다.&#x3D;&gt; 마치 근육과도 같다는 언어를 배울때는 역사와 변화까지 빠삭하게 파악해야한다.&#x3D;&gt; 한가지 언어를 주력으로 배울때 역사와 변화는 당연히 알게되는 부분이다. Critical Thinking&#x3D;&gt; 하나의 개발을 진행하면서 문제를 풀고 그것을 왜 풀었는지,왜 그렇게 할 수 박에 없었는지 등 사고의 폭을 넓힐 수 있는 생각 개발자의 능력은 계속 공부하는 것&#x3D;&gt; 호기심이 있어야 한다. 같은 걸 여러번 만들어서 실력을 쌓는다&#x3D;&gt; 적어도 3번! 사내에서 자기 발전을 위한 방법을 찾는다.&#x3D;&gt; 내 능력을 키울 수 있는 방법을 찾는다. 한가지 회사가 아닌 어느 회사를 갈 수 있는 역량에 초점을 맞춘다.&#x3D;&gt; 능력없을 때 생기는 기회는 저주다 무너지게 된다. 재능이 있어야한다.&#x3D;&gt; 적어도 싸인 코싸인은 구분하자 적을 만들지말라&#x3D;&gt; 인간관계는 굉장히 중요하다. 개발만 잘해서는 소용없다. 적어도 적은 만들지 말라 인공지능은 발전한다 대비는 해놓자. 모여서 코딩하라&#x3D;&gt; 모각코!! https://www.facebook.com/groups/mogaco 프로세스로 실패를 막고 개선을 하라&#x3D;&gt; 어제처럼 일하면 어제같은 결과만 나온다. The Joel test 12steps&#x3D;&gt; 참고 http://korean.joelonsoftware.com/Articles/TheJoelTest.html 인생의 프로세스를 생각한다. 새가 부러질 수도 있는 나뭇가지에 앉아 있는 것은나뭇가지가 부러질 것을 두려워하지 않는 것이 아니라 부러져도 날 수 있는 날개가 있기 때문이다.소프트웨어를 쉽게 개발하는 것이 중요한 것이 아니다.그 이면에 있는 기술력이 중요하다.지금부터 착실히 내실을 다지고 그것을 잘 배우며 다른 사람과 충돌하지 않고 착하게 지낼 수 있다면그것은 그 사람만의 경쟁력이 될 수 있다 다른 장소이지만 같은 내용 강좌 :https://storify.com/startupall/gg 동영상 :https://youtu.be/fHyTA-UIcqs 해당 모임 활동 사진 :https://milooy.wordpress.com/tag/%EB%B0%95%EC%A2%85%EC%B2%9C","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"90년생 개발자모임","slug":"90년생-개발자모임","permalink":"https://pocojang.github.io/tags/90%EB%85%84%EC%83%9D-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%AA%A8%EC%9E%84/"},{"name":"9xd 개발자 모임","slug":"9xd-개발자-모임","permalink":"https://pocojang.github.io/tags/9xd-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%AA%A8%EC%9E%84/"},{"name":"게임 개발자 세미나","slug":"게임-개발자-세미나","permalink":"https://pocojang.github.io/tags/%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%84%B8%EB%AF%B8%EB%82%98/"},{"name":"블리자드 넥슨 박종천","slug":"블리자드-넥슨-박종천","permalink":"https://pocojang.github.io/tags/%EB%B8%94%EB%A6%AC%EC%9E%90%EB%93%9C-%EB%84%A5%EC%8A%A8-%EB%B0%95%EC%A2%85%EC%B2%9C/"},{"name":"훌륭한 게임 개발자 되기","slug":"훌륭한-게임-개발자-되기","permalink":"https://pocojang.github.io/tags/%ED%9B%8C%EB%A5%AD%ED%95%9C-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%90%98%EA%B8%B0/"}]},{"title":"지속하는 힘","slug":"2016-06-21-power-persistence","date":"2016-06-20T15:00:00.000Z","updated":"2023-02-12T14:14:44.050Z","comments":true,"path":"2016/06/21/2016-06-21-power-persistence/","link":"","permalink":"https://pocojang.github.io/2016/06/21/2016-06-21-power-persistence/","excerpt":"보통 사람의 인생을 특별하게 만드는! 지속하는 힘 리뷰!","text":"보통 사람의 인생을 특별하게 만드는! 지속하는 힘 리뷰! 책 정보출판사 : 아날로그(글담)원제 : 1つのことを長く續けられる技術저자 : 고바야시 다다아키페이지 : 208ISBN : 9788997575336가격 : 12,500원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=10154727 후기자바지기 박재성님께 받은 자료 속 추천도서 목록에 하나이기도 한 책이다.일단 책은 200페이지가 조금 넘는 적은 분량이지만 굉장히 괜찮은 책이다.역시 책은 두껍다고 좋은 것도 아니고 얇다고 부족한 것도 아닌 것 같다.수많은 자기개발서를 읽어봤지만 그중 절반 이상은 도움이 되지 않거나그저 동기부여만 주거나 꿈만 가득 가지자는 내용만 나오는 책들이 많다. 하지만 이 책은 달랐다.일단 처음부터 끝까지 무언가를 지속하라는 내용을 강조한다.어떠한 사소한 것이라도 지속하여 나의 습관으로 만들기 시작하면 된다는 것이다. 제가 경험한 결과 당연하고도 평범한 일을 꾸준하게 지속하는 것 이것이 인생의 정답입니다.‘위대한 인재는 재능이 있는 사람이 아니라 꾸준한 사람이다!’라고 하지요. 이처럼 꾸준함이 특별함을 만듭니다. 두 번째로 해결방안과 상황제시 등 방향을 알려주는 책의 가르침이랄까이 부분은 확실히 독자들에게 큰 도움이 되는 내용들이다.주절주절 명언만 가득한 자기개발서보다 백번 나은 부분이다.지속하여 습관을 유지해가는 과정에서 수많은 유혹들과 애로 상황에 어떻게 대처하면좋을지 어떠한 방법으로 해결을 하는 게 좋을지 좋은 해결방안과 방향을 제시한다.전체적으로 책 자체가 해결방안 위주로 큰 로드맵이 짜여있다. 지속적으로 하는 것, 그것이 중요합니다. 해도 그만 안 해도 그만인 일을 계속하다 보면 자신감이 붙습니다.‘나는 이렇게 오랫동안 한 가지 일을 지속해온 사람이야!’라는 믿음이 생기면 어떤 어려운 일이 닥쳐도 깨지거나 부서지지 않습니다 이 책을보고 하루에 전공서 아닌 다른 책을 50페이지씩 읽기로 약속하였다.보통 자기개발서는 보고 다시 중고서점으로 가져가거나 괜찮은 책은 지인에게 선물로 주거나 한다.하지만 이 책은 두고두고 보면 좋을 것 같다. 요약 저자가 블로그에 매일 글을 쓰다 최고의 컨설턴트가 된 과정이 그대로 담겨있다 지속하는 힘을 위해 자신이 어떻게 힘든 상황들을 극복했는지 구체적인 해결 방법을 제시한다. 비현실적인 명언보다는 현실적인 조언과 방법으로 지속하는 힘을 가지도록 도와준다.","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"}],"tags":[{"name":"지속하는 기술","slug":"지속하는-기술","permalink":"https://pocojang.github.io/tags/%EC%A7%80%EC%86%8D%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0/"},{"name":"지속하는 힘","slug":"지속하는-힘","permalink":"https://pocojang.github.io/tags/%EC%A7%80%EC%86%8D%ED%95%98%EB%8A%94-%ED%9E%98/"}]},{"title":"먹고 코딩하고 사랑하기, 오래하려면 어떻게 해야할까? by KSUG","slug":"2016-06-19-ksug","date":"2016-06-18T15:00:00.000Z","updated":"2023-02-12T14:14:44.050Z","comments":true,"path":"2016/06/19/2016-06-19-ksug/","link":"","permalink":"https://pocojang.github.io/2016/06/19/2016-06-19-ksug/","excerpt":"2016 KSUG 경력개발 관람 후기","text":"2016 KSUG 경력개발 관람 후기 목차 목차 시작하세요! 커뮤니티! by 이정희 [“더 나은 개발자 되기” by Outsider](#더-나은-개발자-되기 by-outsider) [“경력, 이력서 관리하기” by 비공개.. 밝히지 않으셨다](#경력-이력서-관리하기 by-비공개-밝히지-않으셨다) 멘토들의 토크쇼 시작하세요! 커뮤니티! by 이정희 주니어 개발자의 커뮤니티 활동 이야기왜 이직을 했나어떻게 이직을 했나무엇을 알아 봤나어떻게 알아 봤나 파견업체일단 연봉 1600! 무려 1600부터 시작을 했다성차별과 엄청난 출퇴근 거리단 2개월만에 퇴직 관공서 SI연봉 2000Java 개발 시작!상사의 권유로 공부를 하는 건 정말 피가 되고 살이 되었다 웹 에이전시연봉 2600PHP, Javascript 개발야근이 너무 과해서 라꾸라꾸 침대와 친해지게 되는 계기.. 스타트업지인 추천으로 취업했으나엄청난 야근과 성격차이로 퇴사(안타까움 ㅠㅠ) 스타트업이전부터 낙방한 곳에 재도전을 하셨는 데커뮤니티에 공개 이력서를 올려 3개월 수습 기회를 얻었으나!수습 후 잘렸다고 한다굉장히 슬픈 이야기지만 엄청 멋지고 도전적이라는 생각이 절로 들었다. 짧은 시간 내에 산전수전 고생을 하신 것 같다.그 와중에도 커뮤니티 활동을 굉장히 열심히 한 부분 대단하다.열정이 느껴졌고 여성분인데 스스로 잡부라고 칭한다니 멋지다. 발표자료http://www.slideshare.net/MayLee27/ss-63215285 “더 나은 개발자 되기” by Outsider 결론! 공부하세요! 처음부터 끝까지 공부 그 자체였다개발자에게 가장 중요한 것은 개발실력이다 회사가 찾는 사람? -&gt; 잘할 것 같은 사람 열정 있는 사람 빨리 배우는 개발자 가르치면 잘 할 개발자 면접은 원하는 사람인지 보는 자리일 뿐이다! 어제의 나보다 더 좋은 개발자 되기 개발에서 배운 것을 기록한다 설치방법 버그와 해결 과정 몰랐던 기능이나 기술 사용방법 새롭게 배운 개념이나 기술 궁금한 부분이나 이해 힘든 내용 버그 리포팅 블로그를 하자 공개되었기 때문에 상황조건을 설명해야 한다 설명 과정에서 배운다. 앱 개발할 때 설명과 코드를 분리한다! 설명부분과 연관된 내용을 정확히 알 수 있다. 다른 사람을 가르쳐야 빨리 배운다! 무엇을 공부해야하 나요? 기술 변화의 흐름을 파악한다. 개발 서적과 레퍼런스 문서 보기 최신 유행 기술은 흐름만 파악하자 기초에 투자하자-&gt; 실력의 차이는 기초와 이해에서 온다. 세미나 참가 블로그 구독 (RSS활용) SNS 활용 (트위터 등등) 언어와 프레임워크가 바뀌어도 바뀌지 않을 지식 투자 대비 효율이 좋다 쌓이면 쌓일수록 큰 실력의 차이가 난다 어떤 지식이 이 부분에 속하는지 구분할 수 있어야 한다. 커뮤니티에 참여하세요 같은 관심사의 사람들과 교류는 즐겁다 좋은 개발자를 만나게 된다 기술에 대한 관심이 회사 내에 갇히지 않는다 새로운 회사를 소개받을 수도 있다. 오픈소스의 활용 가장 진보된 소프트웨어 개발 문화이다 버그 리포팅 -&gt; 해결법을 Pull Request 한다 오픈 소스 문화를 이해할 수 있다. 협업을 배울 수 있다. 다름 사람의 코드를 배울 수 있다. 오픈소스로 사이드 프로젝트 진행 평소 만들고 싶은것을 만든다 불편하다고 생각이 드는 것을 개선한다. Commit Message를 신경쓰자 코드는 계속 리펙토링한다. 테스트 작성 &#x2F; 커버리지 측정 &#x2F; CI 환경에 신경 쓴다. 코드 작성법, 접근 방법, 협업 방법을 미리 보여 줄 수 있다. Outsider님 블로그: https://blog.outsider.ne.kr발표자료https://blog.outsider.ne.kr/1223 “경력, 이력서 관리하기” by 비공개.. 밝히지 않으셨다 이직 이야기입사 3년 차 이직률 40%이다!입사 18년 차에 첫 이직하게 되었다. 위기는 언젠가 온다.옮기기 전에 고려하자주변에 모든 것이 바뀐다대기업이 안정적이라는 생각은 버려야 한다.안정적인 회사는 없다! 대기업과 중소기업의 차이 중소기업지원팀이 없다. (PC 설치 셀프는 기본)나의 없무가 노출된다기대를 받는다사장의 감정이 곧.. 나의 감정이다. 대기업대접받는 착각이 든다.지원부서 존재교육을 시켜주더라내가 일을 잘하는지 남에게 달려있다.연간 목표와 주간 보고는 생명이다.올해의 달성 목표와 주간의 업무를 보고해야 한다. 경력직의 이력서 관리 신입사원보다 경력직이 이력서를 더 신경 쓰지 않는다. 신입(3~6개월 교육)과 경력을 뽑는 것은 완전히 다른 부분이다. 경력사원들은 기대감을 많이 받을 수밖에 없다. 이력서는 회사의 키워드가 중요하다 항상 프로젝트 관리를 하자 기타 기술사 취득..좋기는 좋다. 석사는 구조조정이나 승진시 사용된다 나의 채용담당자는 나의 편이다! 3년 뒤 나갈 수 있는 직장이 좋다 이력서는 출력해서 본다.(링크만 남기면 큰 일..) 어떤 프로젝트에 어떤 기술을 사용했는지 쓰자 공백 기간을 조심하자. ** 채용 NHN &#x2F; 우아한 형제들** NHN에서는 일주일에 40시간만 일하는 자율근무제를 소개하였다.멋진 문화이지만 그에 해당하는 책임은 피할 수 없다는 것을 강조하였다이력서가 회사의 입장보다는 자신의 입장을 고려한 이력서가 많아몇 년 동안 사람을 뽑지 못했다고 한다 배달의 민족 CTO도 왔다.작년에 30명을 채용했고 앞으로도 30명이상을 채용을 예고하였고기업의 이념과 가치에 대해서 설명해주었다 멘토들의 토크쇼 굉장히 인상에 남고 재미있는 토크쇼였다.큰 기업의 CTO와 발표하셨던 패널분들 그리고 자바지기의 박재성님토비의 스프링의 이일민 님 등 엄청난 개발자분들이 많았다.구글폼으로 비공개 질문까지 가능하였고 흥미진진한 시간이었다.제대로 기록하지 못한 게 후회된다. 중요하게 적었던 것들만 리뷰 오래 개발하기 개발을 좋아해야 한다. 배우는 시간 대신 희생해야 할 것이 많다. 일하면서 면접 보기 아프다고 하자 (어쩔 수 없다면) 저녁에도 면접을 보는 곳이 있다. 뽑아줄 사람들은 저녁에도 뽑아준다 비전공자 30대에게 해줄 만한 조언 28살 농촌인이 개발 시작했다. 시작할 때부터 선을 그었다.컴퓨터 전공에 머리 좋은 애들이랑 비교하지 말고, 기초레벨 포기하고 공부했다.초반에는 통했지만 결국은 기초다. 내가 좋아하고 경쟁력 있는 것 그것만 몇 년을 하자.그걸 잘하게 되면 결국 시야가 넓어져서 비슷해진다.비전공자 독학은 정말 힘들다. 커뮤니티에 참여하는 것 밖에 방법이 없다.얼굴에 철판을 깔고 끼어들어라! 전공자의 장점 별로 없다. 주변에 비전공자들이 더 잘한다.하지만 자기 하기 나름이다. 비전공자로 차별을 느꼈었다. 결국 노력이 중요하고 사람 관계가 중요한 것이다. 공부 방법 똑똑한 사람이 너무 많아 시간을 많이 썼다. 내가 무엇을 포기할지 먼저 정하자. 새로운 기술이 너무 많아 이것저것 다 하면 아무것도 못한다. 새로운 기술을 공부하고 싶다면 먼저 라이브러리부터 찾아본다. 내가 재밌는 걸 하는 게 우선이다. 잡부가 되어도 상관없다 굉장한 세미나였다.개발자가 무엇인지뿐만아니라 세미나가 무엇인지도 제대로 알게되었다굉장히 유익한 시간이었다개발자는 공부해야 한다.개발자는 항상 고민이 많다. 이곳에서 공유된 커뮤니티도 필자가 모아놓은 곳에 따로 정리해두었다.http://devjang.blogspot.com/2016/10/blog-post_2.html","categories":[{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"}],"tags":[{"name":"ksug","slug":"ksug","permalink":"https://pocojang.github.io/tags/ksug/"},{"name":"2016 ksug","slug":"2016-ksug","permalink":"https://pocojang.github.io/tags/2016-ksug/"},{"name":"먹고 코딩하고 사랑하기","slug":"먹고-코딩하고-사랑하기","permalink":"https://pocojang.github.io/tags/%EB%A8%B9%EA%B3%A0-%EC%BD%94%EB%94%A9%ED%95%98%EA%B3%A0-%EC%82%AC%EB%9E%91%ED%95%98%EA%B8%B0/"}]},{"title":"미쳐야 공부다","slug":"2016-06-17-crazy-study","date":"2016-06-16T15:00:00.000Z","updated":"2023-02-12T14:14:44.050Z","comments":true,"path":"2016/06/17/2016-06-17-crazy-study/","link":"","permalink":"https://pocojang.github.io/2016/06/17/2016-06-17-crazy-study/","excerpt":"18시간 공부 몰입의 법칙! 미쳐야 공부다 리뷰!","text":"18시간 공부 몰입의 법칙! 미쳐야 공부다 리뷰! 책 정보출판사 : 한빛미디어저자 : 강성태출간 : 2015-07-10페이지 : 328ISBN : 9791130605814가격 : 15,000원 자세한 정보: http://book.naver.com/bookdb/book_detail.nhn?bid=9250959 후기개발자가 되기 위해 어느 정도 공부 방법이나 동기부여가 필요하다고 생각했다.저자 강성태의 공신 운영과 학창시절 어떤 계기로 어떤 이유로 미친 것처럼 공부를 하게 되었는지공부 방법과 해결방안 그리고 경험이 자서전처럼 술술 넘어간다. 마치 나도 공부를 안 하면 뒤처질 것만같은 기분이 들고 저자의 학창시절미친 사람처럼 공부하는 그 모습이 나에게도 이입이 된다. 정말 대단한 사람이다.나는 보통 공부하기 전에 집중이 안 되면 한 단락씩 읽고는 했다.하지만!! 수능을 보는 학생들을 타겟으로 한 서적이라는 것이 문제였다.책이 문제가 아닌 선택을 잘못한 나의 잘못이지만 그래도 인상적으로 보았다. 요약 장점 자신과의 싸움과 공부를 향한 열정으로 정신력을 어떻게 다스렸는지 체험할 수 있다. 동기부여를 강하게 받을 수 있다. 단점 확실히 수능 및 고시를 준비하는 분들이 아니라면 읽기에는 애매하다. 공부 방법에 대한 구체적인 설명과 방법은 없다.(주관적인 생각)","categories":[{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"}],"tags":[{"name":"강성태","slug":"강성태","permalink":"https://pocojang.github.io/tags/%EA%B0%95%EC%84%B1%ED%83%9C/"},{"name":"강성태 공부의 신","slug":"강성태-공부의-신","permalink":"https://pocojang.github.io/tags/%EA%B0%95%EC%84%B1%ED%83%9C-%EA%B3%B5%EB%B6%80%EC%9D%98-%EC%8B%A0/"},{"name":"공부의 신","slug":"공부의-신","permalink":"https://pocojang.github.io/tags/%EA%B3%B5%EB%B6%80%EC%9D%98-%EC%8B%A0/"},{"name":"공부자극","slug":"공부자극","permalink":"https://pocojang.github.io/tags/%EA%B3%B5%EB%B6%80%EC%9E%90%EA%B7%B9/"},{"name":"공신","slug":"공신","permalink":"https://pocojang.github.io/tags/%EA%B3%B5%EC%8B%A0/"},{"name":"미쳐야 공부다","slug":"미쳐야-공부다","permalink":"https://pocojang.github.io/tags/%EB%AF%B8%EC%B3%90%EC%95%BC-%EA%B3%B5%EB%B6%80%EB%8B%A4/"}]}],"categories":[{"name":"column","slug":"column","permalink":"https://pocojang.github.io/categories/column/"},{"name":"retrospect","slug":"retrospect","permalink":"https://pocojang.github.io/categories/retrospect/"},{"name":"conference","slug":"conference","permalink":"https://pocojang.github.io/categories/conference/"},{"name":"book","slug":"book","permalink":"https://pocojang.github.io/categories/book/"},{"name":"self-help","slug":"book/self-help","permalink":"https://pocojang.github.io/categories/book/self-help/"},{"name":"programming","slug":"programming","permalink":"https://pocojang.github.io/categories/programming/"},{"name":"react","slug":"programming/react","permalink":"https://pocojang.github.io/categories/programming/react/"},{"name":"programming","slug":"book/programming","permalink":"https://pocojang.github.io/categories/book/programming/"},{"name":"computer science","slug":"book/programming/computer-science","permalink":"https://pocojang.github.io/categories/book/programming/computer-science/"},{"name":"css","slug":"book/programming/css","permalink":"https://pocojang.github.io/categories/book/programming/css/"},{"name":"TIL","slug":"TIL","permalink":"https://pocojang.github.io/categories/TIL/"},{"name":"javascript","slug":"TIL/javascript","permalink":"https://pocojang.github.io/categories/TIL/javascript/"},{"name":"javascipt30","slug":"TIL/javascript/javascipt30","permalink":"https://pocojang.github.io/categories/TIL/javascript/javascipt30/"},{"name":"javascript","slug":"book/programming/javascript","permalink":"https://pocojang.github.io/categories/book/programming/javascript/"},{"name":"javascript","slug":"programming/javascript","permalink":"https://pocojang.github.io/categories/programming/javascript/"},{"name":"typescript","slug":"programming/typescript","permalink":"https://pocojang.github.io/categories/programming/typescript/"},{"name":"java","slug":"book/programming/java","permalink":"https://pocojang.github.io/categories/book/programming/java/"},{"name":"tip","slug":"programming/tip","permalink":"https://pocojang.github.io/categories/programming/tip/"},{"name":"framework","slug":"book/programming/framework","permalink":"https://pocojang.github.io/categories/book/programming/framework/"}],"tags":[{"name":"글또","slug":"글또","permalink":"https://pocojang.github.io/tags/%EA%B8%80%EB%98%90/"},{"name":"글쓰기","slug":"글쓰기","permalink":"https://pocojang.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"회고","slug":"회고","permalink":"https://pocojang.github.io/tags/%ED%9A%8C%EA%B3%A0/"},{"name":"if(kakao)","slug":"if-kakao","permalink":"https://pocojang.github.io/tags/if-kakao/"},{"name":"kakao","slug":"kakao","permalink":"https://pocojang.github.io/tags/kakao/"},{"name":"book","slug":"book","permalink":"https://pocojang.github.io/tags/book/"},{"name":"learning","slug":"learning","permalink":"https://pocojang.github.io/tags/learning/"},{"name":"youtube","slug":"youtube","permalink":"https://pocojang.github.io/tags/youtube/"},{"name":"2020 개발자 회고","slug":"2020-개발자-회고","permalink":"https://pocojang.github.io/tags/2020-%EA%B0%9C%EB%B0%9C%EC%9E%90-%ED%9A%8C%EA%B3%A0/"},{"name":"TypeScript","slug":"TypeScript","permalink":"https://pocojang.github.io/tags/TypeScript/"},{"name":"React","slug":"React","permalink":"https://pocojang.github.io/tags/React/"},{"name":"start-up","slug":"start-up","permalink":"https://pocojang.github.io/tags/start-up/"},{"name":"시간관리","slug":"시간관리","permalink":"https://pocojang.github.io/tags/%EC%8B%9C%EA%B0%84%EA%B4%80%EB%A6%AC/"},{"name":"react","slug":"react","permalink":"https://pocojang.github.io/tags/react/"},{"name":"velopert","slug":"velopert","permalink":"https://pocojang.github.io/tags/velopert/"},{"name":"LINE","slug":"LINE","permalink":"https://pocojang.github.io/tags/LINE/"},{"name":"개발자","slug":"개발자","permalink":"https://pocojang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"},{"name":"공부","slug":"공부","permalink":"https://pocojang.github.io/tags/%EA%B3%B5%EB%B6%80/"},{"name":"알고리즘","slug":"알고리즘","permalink":"https://pocojang.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"프로그래밍 면접","slug":"프로그래밍-면접","permalink":"https://pocojang.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%A9%B4%EC%A0%91/"},{"name":"게임으로 익히는 코딩 알고리즘","slug":"게임으로-익히는-코딩-알고리즘","permalink":"https://pocojang.github.io/tags/%EA%B2%8C%EC%9E%84%EC%9C%BC%EB%A1%9C-%EC%9D%B5%ED%9E%88%EB%8A%94-%EC%BD%94%EB%94%A9-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"gdg","slug":"gdg","permalink":"https://pocojang.github.io/tags/gdg/"},{"name":"front-endgame","slug":"front-endgame","permalink":"https://pocojang.github.io/tags/front-endgame/"},{"name":"천민호","slug":"천민호","permalink":"https://pocojang.github.io/tags/%EC%B2%9C%EB%AF%BC%ED%98%B8/"},{"name":"진겸","slug":"진겸","permalink":"https://pocojang.github.io/tags/%EC%A7%84%EA%B2%B8/"},{"name":"한재엽","slug":"한재엽","permalink":"https://pocojang.github.io/tags/%ED%95%9C%EC%9E%AC%EC%97%BD/"},{"name":"서재원","slug":"서재원","permalink":"https://pocojang.github.io/tags/%EC%84%9C%EC%9E%AC%EC%9B%90/"},{"name":"나석주","slug":"나석주","permalink":"https://pocojang.github.io/tags/%EB%82%98%EC%84%9D%EC%A3%BC/"},{"name":"한근택","slug":"한근택","permalink":"https://pocojang.github.io/tags/%ED%95%9C%EA%B7%BC%ED%83%9D/"},{"name":"벨로퍼트","slug":"벨로퍼트","permalink":"https://pocojang.github.io/tags/%EB%B2%A8%EB%A1%9C%ED%8D%BC%ED%8A%B8/"},{"name":"김민준","slug":"김민준","permalink":"https://pocojang.github.io/tags/%EA%B9%80%EB%AF%BC%EC%A4%80/"},{"name":"모던 웹을 위한 HTML5+CSS3 바이블","slug":"모던-웹을-위한-HTML5-CSS3-바이블","permalink":"https://pocojang.github.io/tags/%EB%AA%A8%EB%8D%98-%EC%9B%B9%EC%9D%84-%EC%9C%84%ED%95%9C-HTML5-CSS3-%EB%B0%94%EC%9D%B4%EB%B8%94/"},{"name":"HTML5","slug":"HTML5","permalink":"https://pocojang.github.io/tags/HTML5/"},{"name":"CSS3","slug":"CSS3","permalink":"https://pocojang.github.io/tags/CSS3/"},{"name":"vanilla javascript","slug":"vanilla-javascript","permalink":"https://pocojang.github.io/tags/vanilla-javascript/"},{"name":"리눅스","slug":"리눅스","permalink":"https://pocojang.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/"},{"name":"예제로 배우는 ECMAScript 6 핵심 기능","slug":"예제로-배우는-ECMAScript-6-핵심-기능","permalink":"https://pocojang.github.io/tags/%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-ECMAScript-6-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EB%8A%A5/"},{"name":"ES6","slug":"ES6","permalink":"https://pocojang.github.io/tags/ES6/"},{"name":"ES2015","slug":"ES2015","permalink":"https://pocojang.github.io/tags/ES2015/"},{"name":"자바스크립트를 깨우치다","slug":"자바스크립트를-깨우치다","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EA%B9%A8%EC%9A%B0%EC%B9%98%EB%8B%A4/"},{"name":"객체지향 자바스크립트의 원리","slug":"객체지향-자바스크립트의-원리","permalink":"https://pocojang.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%9B%90%EB%A6%AC/"},{"name":"객체지향 자바스크립트","slug":"객체지향-자바스크립트","permalink":"https://pocojang.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"},{"name":"자바스크립트 oop","slug":"자바스크립트-oop","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-oop/"},{"name":"번역","slug":"번역","permalink":"https://pocojang.github.io/tags/%EB%B2%88%EC%97%AD/"},{"name":"es6","slug":"es6","permalink":"https://pocojang.github.io/tags/es6/"},{"name":"var","slug":"var","permalink":"https://pocojang.github.io/tags/var/"},{"name":"let","slug":"let","permalink":"https://pocojang.github.io/tags/let/"},{"name":"const","slug":"const","permalink":"https://pocojang.github.io/tags/const/"},{"name":"신입 프론트엔드","slug":"신입-프론트엔드","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C/"},{"name":"신입 개발자","slug":"신입-개발자","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9E%85-%EA%B0%9C%EB%B0%9C%EC%9E%90/"},{"name":"신입 프론트엔드 개발자","slug":"신입-프론트엔드-개발자","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90/"},{"name":"intellij","slug":"intellij","permalink":"https://pocojang.github.io/tags/intellij/"},{"name":"visual studio code","slug":"visual-studio-code","permalink":"https://pocojang.github.io/tags/visual-studio-code/"},{"name":"CodePen","slug":"CodePen","permalink":"https://pocojang.github.io/tags/CodePen/"},{"name":"JS Bin","slug":"JS-Bin","permalink":"https://pocojang.github.io/tags/JS-Bin/"},{"name":"JSFiddle","slug":"JSFiddle","permalink":"https://pocojang.github.io/tags/JSFiddle/"},{"name":"CodeSandbox","slug":"CodeSandbox","permalink":"https://pocojang.github.io/tags/CodeSandbox/"},{"name":"typescript","slug":"typescript","permalink":"https://pocojang.github.io/tags/typescript/"},{"name":"run console","slug":"run-console","permalink":"https://pocojang.github.io/tags/run-console/"},{"name":"자바 입문 책","slug":"자바-입문-책","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8-%EC%B1%85/"},{"name":"이것이 자바다","slug":"이것이-자바다","permalink":"https://pocojang.github.io/tags/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EC%9E%90%EB%B0%94%EB%8B%A4/"},{"name":"신용권","slug":"신용권","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9A%A9%EA%B6%8C/"},{"name":"Hello Coding 프로그래밍","slug":"Hello-Coding-프로그래밍","permalink":"https://pocojang.github.io/tags/Hello-Coding-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"},{"name":"c# 입문 책","slug":"c-입문-책","permalink":"https://pocojang.github.io/tags/c-%EC%9E%85%EB%AC%B8-%EC%B1%85/"},{"name":"김포프","slug":"김포프","permalink":"https://pocojang.github.io/tags/%EA%B9%80%ED%8F%AC%ED%94%84/"},{"name":"프로그래머의 길 멘토에게 묻다","slug":"프로그래머의-길-멘토에게-묻다","permalink":"https://pocojang.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EA%B8%B8-%EB%A9%98%ED%86%A0%EC%97%90%EA%B2%8C-%EB%AC%BB%EB%8B%A4/"},{"name":"개발자 로드맵","slug":"개발자-로드맵","permalink":"https://pocojang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%A1%9C%EB%93%9C%EB%A7%B5/"},{"name":"개발자 인생","slug":"개발자-인생","permalink":"https://pocojang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9D%B8%EC%83%9D/"},{"name":"터미널 에디터 실행","slug":"터미널-에디터-실행","permalink":"https://pocojang.github.io/tags/%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%94%94%ED%84%B0-%EC%8B%A4%ED%96%89/"},{"name":"run terminal","slug":"run-terminal","permalink":"https://pocojang.github.io/tags/run-terminal/"},{"name":"vscode","slug":"vscode","permalink":"https://pocojang.github.io/tags/vscode/"},{"name":"신입 개발자 멘토","slug":"신입-개발자-멘토","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%9E%85-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%A9%98%ED%86%A0/"},{"name":"2017 개발자 회고","slug":"2017-개발자-회고","permalink":"https://pocojang.github.io/tags/2017-%EA%B0%9C%EB%B0%9C%EC%9E%90-%ED%9A%8C%EA%B3%A0/"},{"name":"Vuetiful Korea","slug":"Vuetiful-Korea","permalink":"https://pocojang.github.io/tags/Vuetiful-Korea/"},{"name":"Vuetiful Korea 세 번째 밋업","slug":"Vuetiful-Korea-세-번째-밋업","permalink":"https://pocojang.github.io/tags/Vuetiful-Korea-%EC%84%B8-%EB%B2%88%EC%A7%B8-%EB%B0%8B%EC%97%85/"},{"name":"Vue 한국 사용자 모임","slug":"Vue-한국-사용자-모임","permalink":"https://pocojang.github.io/tags/Vue-%ED%95%9C%EA%B5%AD-%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%AA%A8%EC%9E%84/"},{"name":"TypeScript from UglifyJs","slug":"TypeScript-from-UglifyJs","permalink":"https://pocojang.github.io/tags/TypeScript-from-UglifyJs/"},{"name":"UglifyJs","slug":"UglifyJs","permalink":"https://pocojang.github.io/tags/UglifyJs/"},{"name":"gdg 2017","slug":"gdg-2017","permalink":"https://pocojang.github.io/tags/gdg-2017/"},{"name":"okky","slug":"okky","permalink":"https://pocojang.github.io/tags/okky/"},{"name":"이종립","slug":"이종립","permalink":"https://pocojang.github.io/tags/%EC%9D%B4%EC%A2%85%EB%A6%BD/"},{"name":"러닝 자바스크립트","slug":"러닝-자바스크립트","permalink":"https://pocojang.github.io/tags/%EB%9F%AC%EB%8B%9D-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"},{"name":"javascript es6","slug":"javascript-es6","permalink":"https://pocojang.github.io/tags/javascript-es6/"},{"name":"es6 코뿔소","slug":"es6-코뿔소","permalink":"https://pocojang.github.io/tags/es6-%EC%BD%94%EB%BF%94%EC%86%8C/"},{"name":"앵귤러 책 추천","slug":"앵귤러-책-추천","permalink":"https://pocojang.github.io/tags/%EC%95%B5%EA%B7%A4%EB%9F%AC-%EC%B1%85-%EC%B6%94%EC%B2%9C/"},{"name":"앵귤러 예제책","slug":"앵귤러-예제책","permalink":"https://pocojang.github.io/tags/%EC%95%B5%EA%B7%A4%EB%9F%AC-%EC%98%88%EC%A0%9C%EC%B1%85/"},{"name":"앵귤러 첫걸음","slug":"앵귤러-첫걸음","permalink":"https://pocojang.github.io/tags/%EC%95%B5%EA%B7%A4%EB%9F%AC-%EC%B2%AB%EA%B1%B8%EC%9D%8C/"},{"name":"김동우","slug":"김동우","permalink":"https://pocojang.github.io/tags/%EA%B9%80%EB%8F%99%EC%9A%B0/"},{"name":"김종광","slug":"김종광","permalink":"https://pocojang.github.io/tags/%EA%B9%80%EC%A2%85%EA%B4%91/"},{"name":"나는 자바스크립트 개발자다","slug":"나는-자바스크립트-개발자다","permalink":"https://pocojang.github.io/tags/%EB%82%98%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%8B%A4/"},{"name":"신정규","slug":"신정규","permalink":"https://pocojang.github.io/tags/%EC%8B%A0%EC%A0%95%EA%B7%9C/"},{"name":"이종은","slug":"이종은","permalink":"https://pocojang.github.io/tags/%EC%9D%B4%EC%A2%85%EC%9D%80/"},{"name":"자바스크립트 개발자 포럼","slug":"자바스크립트-개발자-포럼","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%ED%8F%AC%EB%9F%BC/"},{"name":"angular","slug":"angular","permalink":"https://pocojang.github.io/tags/angular/"},{"name":"JSDev.KR","slug":"JSDev-KR","permalink":"https://pocojang.github.io/tags/JSDev-KR/"},{"name":"React Korea","slug":"React-Korea","permalink":"https://pocojang.github.io/tags/React-Korea/"},{"name":"만약 헤밍웨이가 자바스크립트로 코딩한다면","slug":"만약-헤밍웨이가-자바스크립트로-코딩한다면","permalink":"https://pocojang.github.io/tags/%EB%A7%8C%EC%95%BD-%ED%97%A4%EB%B0%8D%EC%9B%A8%EC%9D%B4%EA%B0%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%BD%94%EB%94%A9%ED%95%9C%EB%8B%A4%EB%A9%B4/"},{"name":"javascript 인문학","slug":"javascript-인문학","permalink":"https://pocojang.github.io/tags/javascript-%EC%9D%B8%EB%AC%B8%ED%95%99/"},{"name":"인사이드 자바스크립트","slug":"인사이드-자바스크립트","permalink":"https://pocojang.github.io/tags/%EC%9D%B8%EC%82%AC%EC%9D%B4%EB%93%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"},{"name":"hybrid framework","slug":"hybrid-framework","permalink":"https://pocojang.github.io/tags/hybrid-framework/"},{"name":"meteor","slug":"meteor","permalink":"https://pocojang.github.io/tags/meteor/"},{"name":"W3C HTML5","slug":"W3C-HTML5","permalink":"https://pocojang.github.io/tags/W3C-HTML5/"},{"name":"W3C HTML5 대한민국","slug":"W3C-HTML5-대한민국","permalink":"https://pocojang.github.io/tags/W3C-HTML5-%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD/"},{"name":"W3C HTML5 대한민국 관심그룹 45차회의","slug":"W3C-HTML5-대한민국-관심그룹-45차회의","permalink":"https://pocojang.github.io/tags/W3C-HTML5-%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD-%EA%B4%80%EC%8B%AC%EA%B7%B8%EB%A3%B9-45%EC%B0%A8%ED%9A%8C%EC%9D%98/"},{"name":"누구나 쉽게 배우는 자바스크립트","slug":"누구나-쉽게-배우는-자바스크립트","permalink":"https://pocojang.github.io/tags/%EB%88%84%EA%B5%AC%EB%82%98-%EC%89%BD%EA%B2%8C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"},{"name":"자바스크립트 입문 책","slug":"자바스크립트-입문-책","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%85%EB%AC%B8-%EC%B1%85/"},{"name":"javascript 입문","slug":"javascript-입문","permalink":"https://pocojang.github.io/tags/javascript-%EC%9E%85%EB%AC%B8/"},{"name":"Javascript for kids","slug":"Javascript-for-kids","permalink":"https://pocojang.github.io/tags/Javascript-for-kids/"},{"name":"김정윤","slug":"김정윤","permalink":"https://pocojang.github.io/tags/%EA%B9%80%EC%A0%95%EC%9C%A4/"},{"name":"도창욱","slug":"도창욱","permalink":"https://pocojang.github.io/tags/%EB%8F%84%EC%B0%BD%EC%9A%B1/"},{"name":"조은","slug":"조은","permalink":"https://pocojang.github.io/tags/%EC%A1%B0%EC%9D%80/"},{"name":"초보개발자들을 위한 웹 프론트엔드 개발 101","slug":"초보개발자들을-위한-웹-프론트엔드-개발-101","permalink":"https://pocojang.github.io/tags/%EC%B4%88%EB%B3%B4%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C-101/"},{"name":"devfest2016","slug":"devfest2016","permalink":"https://pocojang.github.io/tags/devfest2016/"},{"name":"GDG DevFest Seoul 2016","slug":"GDG-DevFest-Seoul-2016","permalink":"https://pocojang.github.io/tags/GDG-DevFest-Seoul-2016/"},{"name":"gdgkr","slug":"gdgkr","permalink":"https://pocojang.github.io/tags/gdgkr/"},{"name":"자바 입문 서적","slug":"자바-입문-서적","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8-%EC%84%9C%EC%A0%81/"},{"name":"자바 입문용","slug":"자바-입문용","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8%EC%9A%A9/"},{"name":"자바 초보 책","slug":"자바-초보-책","permalink":"https://pocojang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%B4%88%EB%B3%B4-%EC%B1%85/"},{"name":"난 정말 JAVA를 공부한 적이 없다구요","slug":"난-정말-JAVA를-공부한-적이-없다구요","permalink":"https://pocojang.github.io/tags/%EB%82%9C-%EC%A0%95%EB%A7%90-JAVA%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%9C-%EC%A0%81%EC%9D%B4-%EC%97%86%EB%8B%A4%EA%B5%AC%EC%9A%94/"},{"name":"개발 입문 서적","slug":"개발-입문-서적","permalink":"https://pocojang.github.io/tags/%EA%B0%9C%EB%B0%9C-%EC%9E%85%EB%AC%B8-%EC%84%9C%EC%A0%81/"},{"name":"기초 튼튼 코드 튼튼 다 함께 프로그래밍","slug":"기초-튼튼-코드-튼튼-다-함께-프로그래밍","permalink":"https://pocojang.github.io/tags/%EA%B8%B0%EC%B4%88-%ED%8A%BC%ED%8A%BC-%EC%BD%94%EB%93%9C-%ED%8A%BC%ED%8A%BC-%EB%8B%A4-%ED%95%A8%EA%BB%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"},{"name":"프로그래밍 시작하기","slug":"프로그래밍-시작하기","permalink":"https://pocojang.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"},{"name":"허광남","slug":"허광남","permalink":"https://pocojang.github.io/tags/%ED%97%88%EA%B4%91%EB%82%A8/"},{"name":"kenu","slug":"kenu","permalink":"https://pocojang.github.io/tags/kenu/"},{"name":"그림으로 배우는 Java Programming Basic","slug":"그림으로-배우는-Java-Programming-Basic","permalink":"https://pocojang.github.io/tags/%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-Java-Programming-Basic/"},{"name":"미친 집중력","slug":"미친-집중력","permalink":"https://pocojang.github.io/tags/%EB%AF%B8%EC%B9%9C-%EC%A7%91%EC%A4%91%EB%A0%A5/"},{"name":"집중력 책","slug":"집중력-책","permalink":"https://pocojang.github.io/tags/%EC%A7%91%EC%A4%91%EB%A0%A5-%EC%B1%85/"},{"name":"비전공자를 위한 자바 프로그래밍","slug":"비전공자를-위한-자바-프로그래밍","permalink":"https://pocojang.github.io/tags/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9E%90%EB%B0%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"},{"name":"가볍게 시작하기","slug":"가볍게-시작하기","permalink":"https://pocojang.github.io/tags/%EA%B0%80%EB%B3%8D%EA%B2%8C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"},{"name":"습관의 재발견","slug":"습관의-재발견","permalink":"https://pocojang.github.io/tags/%EC%8A%B5%EA%B4%80%EC%9D%98-%EC%9E%AC%EB%B0%9C%EA%B2%AC/"},{"name":"작은 습관의 힘","slug":"작은-습관의-힘","permalink":"https://pocojang.github.io/tags/%EC%9E%91%EC%9D%80-%EC%8A%B5%EA%B4%80%EC%9D%98-%ED%9E%98/"},{"name":"팔굽혀펴기 하루 한 번","slug":"팔굽혀펴기-하루-한-번","permalink":"https://pocojang.github.io/tags/%ED%8C%94%EA%B5%BD%ED%98%80%ED%8E%B4%EA%B8%B0-%ED%95%98%EB%A3%A8-%ED%95%9C-%EB%B2%88/"},{"name":"90년생 개발자모임","slug":"90년생-개발자모임","permalink":"https://pocojang.github.io/tags/90%EB%85%84%EC%83%9D-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%AA%A8%EC%9E%84/"},{"name":"9xd 개발자 모임","slug":"9xd-개발자-모임","permalink":"https://pocojang.github.io/tags/9xd-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%AA%A8%EC%9E%84/"},{"name":"게임 개발자 세미나","slug":"게임-개발자-세미나","permalink":"https://pocojang.github.io/tags/%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%84%B8%EB%AF%B8%EB%82%98/"},{"name":"블리자드 넥슨 박종천","slug":"블리자드-넥슨-박종천","permalink":"https://pocojang.github.io/tags/%EB%B8%94%EB%A6%AC%EC%9E%90%EB%93%9C-%EB%84%A5%EC%8A%A8-%EB%B0%95%EC%A2%85%EC%B2%9C/"},{"name":"훌륭한 게임 개발자 되기","slug":"훌륭한-게임-개발자-되기","permalink":"https://pocojang.github.io/tags/%ED%9B%8C%EB%A5%AD%ED%95%9C-%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%90%98%EA%B8%B0/"},{"name":"지속하는 기술","slug":"지속하는-기술","permalink":"https://pocojang.github.io/tags/%EC%A7%80%EC%86%8D%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0/"},{"name":"지속하는 힘","slug":"지속하는-힘","permalink":"https://pocojang.github.io/tags/%EC%A7%80%EC%86%8D%ED%95%98%EB%8A%94-%ED%9E%98/"},{"name":"ksug","slug":"ksug","permalink":"https://pocojang.github.io/tags/ksug/"},{"name":"2016 ksug","slug":"2016-ksug","permalink":"https://pocojang.github.io/tags/2016-ksug/"},{"name":"먹고 코딩하고 사랑하기","slug":"먹고-코딩하고-사랑하기","permalink":"https://pocojang.github.io/tags/%EB%A8%B9%EA%B3%A0-%EC%BD%94%EB%94%A9%ED%95%98%EA%B3%A0-%EC%82%AC%EB%9E%91%ED%95%98%EA%B8%B0/"},{"name":"강성태","slug":"강성태","permalink":"https://pocojang.github.io/tags/%EA%B0%95%EC%84%B1%ED%83%9C/"},{"name":"강성태 공부의 신","slug":"강성태-공부의-신","permalink":"https://pocojang.github.io/tags/%EA%B0%95%EC%84%B1%ED%83%9C-%EA%B3%B5%EB%B6%80%EC%9D%98-%EC%8B%A0/"},{"name":"공부의 신","slug":"공부의-신","permalink":"https://pocojang.github.io/tags/%EA%B3%B5%EB%B6%80%EC%9D%98-%EC%8B%A0/"},{"name":"공부자극","slug":"공부자극","permalink":"https://pocojang.github.io/tags/%EA%B3%B5%EB%B6%80%EC%9E%90%EA%B7%B9/"},{"name":"공신","slug":"공신","permalink":"https://pocojang.github.io/tags/%EA%B3%B5%EC%8B%A0/"},{"name":"미쳐야 공부다","slug":"미쳐야-공부다","permalink":"https://pocojang.github.io/tags/%EB%AF%B8%EC%B3%90%EC%95%BC-%EA%B3%B5%EB%B6%80%EB%8B%A4/"}]}